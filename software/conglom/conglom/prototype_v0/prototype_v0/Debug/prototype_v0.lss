
prototype_v0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  00000baa  00000c3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000baa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080016a  0080016a  00000ca8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002159  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010ca  00000000  00000000  00003069  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010f3  00000000  00000000  00004133  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004bc  00000000  00000000  00005228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000880  00000000  00000000  000056e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000134c  00000000  00000000  00005f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  000072b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 23 03 	jmp	0x646	; 0x646 <__vector_16>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea ea       	ldi	r30, 0xAA	; 170
  c8:	fb e0       	ldi	r31, 0x0B	; 11
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 36       	cpi	r26, 0x6A	; 106
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e6       	ldi	r26, 0x6A	; 106
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a0 37       	cpi	r26, 0x70	; 112
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 95 02 	call	0x52a	; 0x52a <main>
  ea:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <AD9833_init>:
	SPI_write16(regLs);
	SPI_write16(regMs);
	controlReg &= ~(1<<RESET);
	SPI_write16(controlReg);
	
}
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	0e 94 43 03 	call	0x686	; 0x686 <SPI_write16>
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	91 e2       	ldi	r25, 0x21	; 33
  fe:	0e 94 43 03 	call	0x686	; 0x686 <SPI_write16>
 102:	8d e4       	ldi	r24, 0x4D	; 77
 104:	92 e6       	ldi	r25, 0x62	; 98
 106:	0e 94 43 03 	call	0x686	; 0x686 <SPI_write16>
 10a:	81 e4       	ldi	r24, 0x41	; 65
 10c:	90 e4       	ldi	r25, 0x40	; 64
 10e:	0e 94 43 03 	call	0x686	; 0x686 <SPI_write16>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 ec       	ldi	r25, 0xC0	; 192
 116:	0e 94 43 03 	call	0x686	; 0x686 <SPI_write16>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 43 03 	call	0x686	; 0x686 <SPI_write16>
 122:	08 95       	ret

00000124 <phaseChange>:

void phaseChange(uint16_t phaseShift, uint8_t select) {
 124:	cf 93       	push	r28
 126:	c6 2f       	mov	r28, r22
	uint16_t phaseReg = (phaseShift*POW2_12) / (2*PI);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	78 2f       	mov	r23, r24
 12e:	72 95       	swap	r23
 130:	70 7f       	andi	r23, 0xF0	; 240
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 10 05 	call	0xa20	; 0xa20 <__floatunsisf>
 13a:	2b ed       	ldi	r18, 0xDB	; 219
 13c:	3f e0       	ldi	r19, 0x0F	; 15
 13e:	49 ec       	ldi	r20, 0xC9	; 201
 140:	50 e4       	ldi	r21, 0x40	; 64
 142:	0e 94 6f 04 	call	0x8de	; 0x8de <__divsf3>
 146:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fixunssfsi>
 14a:	ab 01       	movw	r20, r22
	controlReg |= (1<<RESET);
 14c:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <__data_end>
 150:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <__data_end+0x1>
 154:	31 60       	ori	r19, 0x01	; 1
 156:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <__data_end+0x1>
 15a:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <__data_end>
	
	if (select == 0) {
 15e:	c1 11       	cpse	r28, r1
 160:	0b c0       	rjmp	.+22     	; 0x178 <phaseChange+0x54>
		phaseReg |= PHASE0_D_MASK;
 162:	50 6c       	ori	r21, 0xC0	; 192
		controlReg &= ~(1<<PSELECT);
 164:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <__data_end>
 168:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <__data_end+0x1>
 16c:	3b 7f       	andi	r19, 0xFB	; 251
 16e:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <__data_end+0x1>
 172:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <__data_end>
 176:	0d c0       	rjmp	.+26     	; 0x192 <phaseChange+0x6e>
	}
	if (select == 1) {
 178:	c1 30       	cpi	r28, 0x01	; 1
 17a:	59 f4       	brne	.+22     	; 0x192 <phaseChange+0x6e>
		phaseReg |= PHASE1_D_MASK;
 17c:	ab 01       	movw	r20, r22
 17e:	50 6e       	ori	r21, 0xE0	; 224
		controlReg |= (1<<PSELECT);
 180:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <__data_end>
 184:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <__data_end+0x1>
 188:	34 60       	ori	r19, 0x04	; 4
 18a:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <__data_end+0x1>
 18e:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <__data_end>
	}
	
	SPI_write16(phaseReg);
 192:	ca 01       	movw	r24, r20
 194:	0e 94 43 03 	call	0x686	; 0x686 <SPI_write16>
	controlReg &= ~(1<<RESET);
 198:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 19c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
 1a0:	9e 7f       	andi	r25, 0xFE	; 254
 1a2:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
 1a6:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
	
}
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <sineOut>:

void sineOut(void) {
	controlReg |= (1<<RESET);
 1ae:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 1b2:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
 1b6:	91 60       	ori	r25, 0x01	; 1
 1b8:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
 1bc:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
	controlReg &= ~((1<< SLEEP12) | (1<<OPBITEN) | (1<<MODE));
 1c0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 1c4:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
 1c8:	8d 79       	andi	r24, 0x9D	; 157
 1ca:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
 1ce:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
	SPI_write16(controlReg);
 1d2:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 1d6:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
 1da:	0e 94 43 03 	call	0x686	; 0x686 <SPI_write16>
	controlReg &= ~(1<<RESET);
 1de:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 1e2:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
 1e6:	9e 7f       	andi	r25, 0xFE	; 254
 1e8:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
 1ec:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
	SPI_write16(controlReg);
 1f0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 1f4:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
 1f8:	0e 94 43 03 	call	0x686	; 0x686 <SPI_write16>
 1fc:	08 95       	ret

000001fe <cosineOut>:
}

void cosineOut(uint8_t select) {
 1fe:	cf 93       	push	r28
 200:	c8 2f       	mov	r28, r24
	sineOut();
 202:	0e 94 d7 00 	call	0x1ae	; 0x1ae <sineOut>
	phaseChange(90,select);
 206:	6c 2f       	mov	r22, r28
 208:	8a e5       	ldi	r24, 0x5A	; 90
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 92 00 	call	0x124	; 0x124 <phaseChange>
}
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <triangleOut>:

void triangleOut(void) {
	controlReg |= (1<<RESET) | (1<<MODE);
 214:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 218:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	91 60       	ori	r25, 0x01	; 1
 220:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
 224:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
	controlReg &= ~((1<< SLEEP12) | (1<<OPBITEN));
 228:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 22c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
 230:	8f 79       	andi	r24, 0x9F	; 159
 232:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
 236:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
	SPI_write16(controlReg);
 23a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 23e:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
 242:	0e 94 43 03 	call	0x686	; 0x686 <SPI_write16>
	controlReg &= ~(1<<RESET);
 246:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 24a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
 24e:	9e 7f       	andi	r25, 0xFE	; 254
 250:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
 254:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
	SPI_write16(controlReg);
 258:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 25c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
 260:	0e 94 43 03 	call	0x686	; 0x686 <SPI_write16>
 264:	08 95       	ret

00000266 <squareOut>:
}

void squareOut(void) {
	controlReg |= (1<<RESET) | (1<<SLEEP12) | (1<<OPBITEN) | (1<<DIV2);
 266:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 26a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
 26e:	88 66       	ori	r24, 0x68	; 104
 270:	91 60       	ori	r25, 0x01	; 1
 272:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
 276:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
	controlReg &= ~(1<<MODE);
 27a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 27e:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
 282:	8d 7f       	andi	r24, 0xFD	; 253
 284:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
 288:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
	SPI_write16(controlReg);
 28c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 290:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
 294:	0e 94 43 03 	call	0x686	; 0x686 <SPI_write16>
	controlReg &= ~(1<<RESET);
 298:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 29c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
 2a0:	9e 7f       	andi	r25, 0xFE	; 254
 2a2:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
 2a6:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
	SPI_write16(controlReg);
 2aa:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
 2ae:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
 2b2:	0e 94 43 03 	call	0x686	; 0x686 <SPI_write16>
 2b6:	08 95       	ret

000002b8 <setSignalOut>:
}

void setSignalOut(uint8_t sigMode) {
	switch (sigMode) {
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	49 f0       	breq	.+18     	; 0x2ce <setSignalOut+0x16>
 2bc:	28 f0       	brcs	.+10     	; 0x2c8 <setSignalOut+0x10>
 2be:	82 30       	cpi	r24, 0x02	; 2
 2c0:	51 f0       	breq	.+20     	; 0x2d6 <setSignalOut+0x1e>
 2c2:	83 30       	cpi	r24, 0x03	; 3
 2c4:	59 f0       	breq	.+22     	; 0x2dc <setSignalOut+0x24>
 2c6:	08 95       	ret
		case SIGNAL_SIN:
			sineOut();
 2c8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <sineOut>
			break;
 2cc:	08 95       	ret
		case SIGNAL_COS:
			cosineOut(0);
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <cosineOut>
			break;
 2d4:	08 95       	ret
		case SIGNAL_SQ:
			squareOut();
 2d6:	0e 94 33 01 	call	0x266	; 0x266 <squareOut>
			break;
 2da:	08 95       	ret
		case SIGNAL_TRI:
			triangleOut();
 2dc:	0e 94 0a 01 	call	0x214	; 0x214 <triangleOut>
 2e0:	08 95       	ret

000002e2 <I2C_WRITESEQ>:

void lcd_data(unsigned char data)

{

    wr_lcd_mode(data, 1);
 2e2:	ef 92       	push	r14
 2e4:	ff 92       	push	r15
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	7b 01       	movw	r14, r22
 2f0:	14 2f       	mov	r17, r20
 2f2:	88 0f       	add	r24, r24
 2f4:	0e 94 54 03 	call	0x6a8	; 0x6a8 <i2c_start>
 2f8:	81 11       	cpse	r24, r1
 2fa:	12 c0       	rjmp	.+36     	; 0x320 <I2C_WRITESEQ+0x3e>
 2fc:	11 23       	and	r17, r17
 2fe:	91 f0       	breq	.+36     	; 0x324 <I2C_WRITESEQ+0x42>
 300:	e7 01       	movw	r28, r14
 302:	11 50       	subi	r17, 0x01	; 1
 304:	01 2f       	mov	r16, r17
 306:	10 e0       	ldi	r17, 0x00	; 0
 308:	0f 5f       	subi	r16, 0xFF	; 255
 30a:	1f 4f       	sbci	r17, 0xFF	; 255
 30c:	0e 0d       	add	r16, r14
 30e:	1f 1d       	adc	r17, r15
 310:	89 91       	ld	r24, Y+
 312:	0e 94 84 03 	call	0x708	; 0x708 <i2c_write>
 316:	c0 17       	cp	r28, r16
 318:	d1 07       	cpc	r29, r17
 31a:	d1 f7       	brne	.-12     	; 0x310 <I2C_WRITESEQ+0x2e>
 31c:	c0 e0       	ldi	r28, 0x00	; 0
 31e:	03 c0       	rjmp	.+6      	; 0x326 <I2C_WRITESEQ+0x44>
 320:	c1 e0       	ldi	r28, 0x01	; 1
 322:	01 c0       	rjmp	.+2      	; 0x326 <I2C_WRITESEQ+0x44>
 324:	c0 e0       	ldi	r28, 0x00	; 0
 326:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <i2c_stop>
 32a:	8c 2f       	mov	r24, r28
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	08 95       	ret

0000033a <wr_lcd_mode>:
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	00 d0       	rcall	.+0      	; 0x344 <wr_lcd_mode+0xa>
 344:	00 d0       	rcall	.+0      	; 0x346 <wr_lcd_mode+0xc>
 346:	1f 92       	push	r1
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	08 2f       	mov	r16, r24
 34e:	68 30       	cpi	r22, 0x08	; 8
 350:	71 f4       	brne	.+28     	; 0x36e <wr_lcd_mode+0x34>
 352:	81 11       	cpse	r24, r1
 354:	02 c0       	rjmp	.+4      	; 0x35a <wr_lcd_mode+0x20>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	01 c0       	rjmp	.+2      	; 0x35c <wr_lcd_mode+0x22>
 35a:	88 e0       	ldi	r24, 0x08	; 8
 35c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	71 e0       	ldi	r23, 0x01	; 1
 366:	87 e2       	ldi	r24, 0x27	; 39
 368:	0e 94 71 01 	call	0x2e2	; 0x2e2 <I2C_WRITESEQ>
 36c:	26 c0       	rjmp	.+76     	; 0x3ba <wr_lcd_mode+0x80>
 36e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 372:	16 2f       	mov	r17, r22
 374:	18 2b       	or	r17, r24
 376:	19 83       	std	Y+1, r17	; 0x01
 378:	80 2f       	mov	r24, r16
 37a:	80 7f       	andi	r24, 0xF0	; 240
 37c:	84 60       	ori	r24, 0x04	; 4
 37e:	81 2b       	or	r24, r17
 380:	8a 83       	std	Y+2, r24	; 0x02
 382:	8b 7f       	andi	r24, 0xFB	; 251
 384:	8b 83       	std	Y+3, r24	; 0x03
 386:	20 e1       	ldi	r18, 0x10	; 16
 388:	02 9f       	mul	r16, r18
 38a:	c0 01       	movw	r24, r0
 38c:	11 24       	eor	r1, r1
 38e:	81 2b       	or	r24, r17
 390:	84 60       	ori	r24, 0x04	; 4
 392:	8c 83       	std	Y+4, r24	; 0x04
 394:	8b 7f       	andi	r24, 0xFB	; 251
 396:	8d 83       	std	Y+5, r24	; 0x05
 398:	45 e0       	ldi	r20, 0x05	; 5
 39a:	be 01       	movw	r22, r28
 39c:	6f 5f       	subi	r22, 0xFF	; 255
 39e:	7f 4f       	sbci	r23, 0xFF	; 255
 3a0:	87 e2       	ldi	r24, 0x27	; 39
 3a2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <I2C_WRITESEQ>
 3a6:	10 fd       	sbrc	r17, 0
 3a8:	08 c0       	rjmp	.+16     	; 0x3ba <wr_lcd_mode+0x80>
 3aa:	03 30       	cpi	r16, 0x03	; 3
 3ac:	30 f4       	brcc	.+12     	; 0x3ba <wr_lcd_mode+0x80>
 3ae:	e3 ef       	ldi	r30, 0xF3	; 243
 3b0:	f1 e0       	ldi	r31, 0x01	; 1
 3b2:	31 97       	sbiw	r30, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <wr_lcd_mode+0x78>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <wr_lcd_mode+0x7e>
 3b8:	00 00       	nop
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	1f 91       	pop	r17
 3ca:	0f 91       	pop	r16
 3cc:	08 95       	ret

000003ce <lcd_gotoxy>:
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	d8 2f       	mov	r29, r24
 3d4:	c6 2f       	mov	r28, r22
 3d6:	e6 2f       	mov	r30, r22
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	e3 5e       	subi	r30, 0xE3	; 227
 3dc:	fe 4f       	sbci	r31, 0xFE	; 254
 3de:	80 81       	ld	r24, Z
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	8d 0f       	add	r24, r29
 3e4:	0e 94 9d 01 	call	0x33a	; 0x33a <wr_lcd_mode>
 3e8:	8d ee       	ldi	r24, 0xED	; 237
 3ea:	92 e0       	ldi	r25, 0x02	; 2
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_gotoxy+0x1e>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <lcd_gotoxy+0x24>
 3f2:	00 00       	nop
 3f4:	d0 93 6e 01 	sts	0x016E, r29	; 0x80016e <_lcd_x>
 3f8:	c0 93 6f 01 	sts	0x016F, r28	; 0x80016f <_lcd_y>
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <lcd_clrscr>:
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 9d 01 	call	0x33a	; 0x33a <wr_lcd_mode>
 40a:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <_lcd_y>
 40e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <_lcd_x>
 412:	08 95       	ret

00000414 <lcd_putc>:
 414:	cf 93       	push	r28
 416:	c8 2f       	mov	r28, r24
 418:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <_lcd_x>
 41c:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <_lcd_maxx>
 420:	98 17       	cp	r25, r24
 422:	18 f4       	brcc	.+6      	; 0x42a <lcd_putc+0x16>
 424:	ca 30       	cpi	r28, 0x0A	; 10
 426:	59 f4       	brne	.+22     	; 0x43e <lcd_putc+0x2a>
 428:	1a c0       	rjmp	.+52     	; 0x45e <lcd_putc+0x4a>
 42a:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <_lcd_y>
 42e:	6f 5f       	subi	r22, 0xFF	; 255
 430:	60 93 6f 01 	sts	0x016F, r22	; 0x80016f <_lcd_y>
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_gotoxy>
 43a:	ca 30       	cpi	r28, 0x0A	; 10
 43c:	c1 f0       	breq	.+48     	; 0x46e <lcd_putc+0x5a>
 43e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <_lcd_x>
 442:	8f 5f       	subi	r24, 0xFF	; 255
 444:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <_lcd_x>
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	8c 2f       	mov	r24, r28
 44c:	0e 94 9d 01 	call	0x33a	; 0x33a <wr_lcd_mode>
 450:	8d ee       	ldi	r24, 0xED	; 237
 452:	92 e0       	ldi	r25, 0x02	; 2
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <lcd_putc+0x40>
 458:	00 c0       	rjmp	.+0      	; 0x45a <lcd_putc+0x46>
 45a:	00 00       	nop
 45c:	08 c0       	rjmp	.+16     	; 0x46e <lcd_putc+0x5a>
 45e:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <_lcd_y>
 462:	6f 5f       	subi	r22, 0xFF	; 255
 464:	60 93 6f 01 	sts	0x016F, r22	; 0x80016f <_lcd_y>
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_gotoxy>
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <lcd_puts>:
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	ec 01       	movw	r28, r24
 478:	88 81       	ld	r24, Y
 47a:	88 23       	and	r24, r24
 47c:	31 f0       	breq	.+12     	; 0x48a <lcd_puts+0x18>
 47e:	21 96       	adiw	r28, 0x01	; 1
 480:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_putc>
 484:	89 91       	ld	r24, Y+
 486:	81 11       	cpse	r24, r1
 488:	fb cf       	rjmp	.-10     	; 0x480 <lcd_puts+0xe>
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <lcd_init>:

// initialize the LCD controller

void lcd_init(unsigned char command)

{
 490:	df 92       	push	r13
 492:	ef 92       	push	r14
 494:	ff 92       	push	r15
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	00 d0       	rcall	.+0      	; 0x4a0 <lcd_init+0x10>
 4a0:	00 d0       	rcall	.+0      	; 0x4a2 <lcd_init+0x12>
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <lcd_init+0x14>
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
 4a8:	d8 2e       	mov	r13, r24

    // High-Nibble von Byte 8 = Display Control:

    // 1DCB****  D: Disp on/off; C: Cursor on/off  B: blink on/off

    char init_sequenz[] = { 0x33, 0x32, 0x28, 0x0C, 0x06, 0x01 };
 4aa:	86 e0       	ldi	r24, 0x06	; 6
 4ac:	e7 e1       	ldi	r30, 0x17	; 23
 4ae:	f1 e0       	ldi	r31, 0x01	; 1
 4b0:	de 01       	movw	r26, r28
 4b2:	11 96       	adiw	r26, 0x01	; 1
 4b4:	01 90       	ld	r0, Z+
 4b6:	0d 92       	st	X+, r0
 4b8:	8a 95       	dec	r24
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <lcd_init+0x24>

    _lcd_maxx = LCD_DISP_LENGTH;
 4bc:	80 e1       	ldi	r24, 0x10	; 16
 4be:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <_lcd_maxx>

   // _base_y[2] = _base_y[0] + _lcd_maxx;

    //_base_y[3] = _base_y[1] + _lcd_maxx;

    I2C_INIT();
 4c2:	0e 94 4e 03 	call	0x69c	; 0x69c <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c6:	8b e4       	ldi	r24, 0x4B	; 75
 4c8:	9d e1       	ldi	r25, 0x1D	; 29
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <lcd_init+0x3a>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <lcd_init+0x40>
 4d0:	00 00       	nop
 4d2:	8e 01       	movw	r16, r28
 4d4:	0f 5f       	subi	r16, 0xFF	; 255
 4d6:	1f 4f       	sbci	r17, 0xFF	; 255
 4d8:	7e 01       	movw	r14, r28
 4da:	97 e0       	ldi	r25, 0x07	; 7
 4dc:	e9 0e       	add	r14, r25
 4de:	f1 1c       	adc	r15, r1

    _delay_ms(30);               // 30 ms Delay nach power-up

    for (i = 0; i < sizeof(init_sequenz); i++) {

        wr_lcd_mode(init_sequenz[i], 0);
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	f8 01       	movw	r30, r16
 4e4:	81 91       	ld	r24, Z+
 4e6:	8f 01       	movw	r16, r30
 4e8:	0e 94 9d 01 	call	0x33a	; 0x33a <wr_lcd_mode>
 4ec:	81 ee       	ldi	r24, 0xE1	; 225
 4ee:	94 e0       	ldi	r25, 0x04	; 4
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <lcd_init+0x60>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <lcd_init+0x66>
 4f6:	00 00       	nop

    I2C_INIT();

    _delay_ms(30);               // 30 ms Delay nach power-up

    for (i = 0; i < sizeof(init_sequenz); i++) {
 4f8:	0e 15       	cp	r16, r14
 4fa:	1f 05       	cpc	r17, r15
 4fc:	89 f7       	brne	.-30     	; 0x4e0 <lcd_init+0x50>

        _delay_ms(5);

    }

	wr_lcd_mode(command, 0);
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	8d 2d       	mov	r24, r13
 502:	0e 94 9d 01 	call	0x33a	; 0x33a <wr_lcd_mode>

}
 506:	26 96       	adiw	r28, 0x06	; 6
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	f8 94       	cli
 50c:	de bf       	out	0x3e, r29	; 62
 50e:	0f be       	out	0x3f, r0	; 63
 510:	cd bf       	out	0x3d, r28	; 61
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	1f 91       	pop	r17
 518:	0f 91       	pop	r16
 51a:	ff 90       	pop	r15
 51c:	ef 90       	pop	r14
 51e:	df 90       	pop	r13
 520:	08 95       	ret

00000522 <lcd_backlight>:

void lcd_backlight(char on)

{

    wr_lcd_mode(on, 8);
 522:	68 e0       	ldi	r22, 0x08	; 8
 524:	0e 94 9d 01 	call	0x33a	; 0x33a <wr_lcd_mode>
 528:	08 95       	ret

0000052a <main>:
	In each mode display the mode and the appro
*/

extern volatile uint8_t setVal;

int main(void) {
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	1f 92       	push	r1
 530:	cd b7       	in	r28, 0x3d	; 61
 532:	de b7       	in	r29, 0x3e	; 62
	uint8_t mode = MODE_SIGNAL;
	uint8_t signal = SIGNAL_SIN;
	uint32_t frequency = INIT_FREQ;
	uint16_t phase = 0;
	int8_t voltage = 1; // probably won't be able to display voltage
	const uint8_t aQuiescent = ROTARY_PIN & (1<<ROTARY_A);
 534:	86 b1       	in	r24, 0x06	; 6
 536:	81 70       	andi	r24, 0x01	; 1
 538:	d8 2e       	mov	r13, r24
	uint8_t rotation = NO_ROTATION;
	
	uint8_t modeLast = 0xFF;
 53a:	8f ef       	ldi	r24, 0xFF	; 255
 53c:	89 83       	std	Y+1, r24	; 0x01
	uint8_t signalLast = signal;
	uint32_t freqLast = frequency;
	uint16_t phaseLast = phase;
	uiInit();
 53e:	0e 94 2a 04 	call	0x854	; 0x854 <uiInit>
	SPI_init();
 542:	0e 94 39 03 	call	0x672	; 0x672 <SPI_init>
	AD9833_init();
 546:	0e 94 79 00 	call	0xf2	; 0xf2 <AD9833_init>
	sei();
 54a:	78 94       	sei
	int8_t voltage = 1; // probably won't be able to display voltage
	const uint8_t aQuiescent = ROTARY_PIN & (1<<ROTARY_A);
	uint8_t rotation = NO_ROTATION;
	
	uint8_t modeLast = 0xFF;
	uint8_t signalLast = signal;
 54c:	a1 2c       	mov	r10, r1
	uint8_t signal = SIGNAL_SIN;
	uint32_t frequency = INIT_FREQ;
	uint16_t phase = 0;
	int8_t voltage = 1; // probably won't be able to display voltage
	const uint8_t aQuiescent = ROTARY_PIN & (1<<ROTARY_A);
	uint8_t rotation = NO_ROTATION;
 54e:	f1 2c       	mov	r15, r1

extern volatile uint8_t setVal;

int main(void) {
	uint8_t mode = MODE_SIGNAL;
	uint8_t signal = SIGNAL_SIN;
 550:	b1 2c       	mov	r11, r1
	uiInit();
	SPI_init();
	AD9833_init();
	sei();
    while (1) {
		rotation = setRotaryStatus(aQuiescent, rotation);
 552:	6f 2d       	mov	r22, r15
 554:	8d 2d       	mov	r24, r13
 556:	0e 94 11 03 	call	0x622	; 0x622 <setRotaryStatus>
 55a:	f8 2e       	mov	r15, r24
		if (rotation != NO_ROTATION) {
 55c:	88 23       	and	r24, r24
 55e:	c9 f3       	breq	.-14     	; 0x552 <main+0x28>
			if (setVal) {
 560:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <setVal>
 564:	88 23       	and	r24, r24
 566:	79 f0       	breq	.+30     	; 0x586 <main+0x5c>
				switch(mode) {
					case MODE_SIGNAL:
						if (rotation == CLOCKWISE)
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	f8 12       	cpse	r15, r24
 56c:	04 c0       	rjmp	.+8      	; 0x576 <main+0x4c>
							signal = (signal+1)&3;
 56e:	8b 0d       	add	r24, r11
 570:	83 70       	andi	r24, 0x03	; 3
 572:	b8 2e       	mov	r11, r24
 574:	28 c0       	rjmp	.+80     	; 0x5c6 <main+0x9c>
						else if (rotation == COUNTERCLOCKWISE)
 576:	82 e0       	ldi	r24, 0x02	; 2
 578:	f8 12       	cpse	r15, r24
 57a:	25 c0       	rjmp	.+74     	; 0x5c6 <main+0x9c>
							signal = (signal-1)&3;
 57c:	8f ef       	ldi	r24, 0xFF	; 255
 57e:	8b 0d       	add	r24, r11
 580:	83 70       	andi	r24, 0x03	; 3
 582:	b8 2e       	mov	r11, r24
 584:	20 c0       	rjmp	.+64     	; 0x5c6 <main+0x9c>
							phase--;
						break;
				}
			}
			else {
				if (signal != signalLast) {
 586:	ba 14       	cp	r11, r10
 588:	29 f0       	breq	.+10     	; 0x594 <main+0x6a>
					cli();
 58a:	f8 94       	cli
					setSignalOut(signal);
 58c:	8b 2d       	mov	r24, r11
 58e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <setSignalOut>
					signalLast = signal;
					sei();
 592:	78 94       	sei
					cli();
					phaseChange(phase,0);
					phaseLast = phase;
					sei();
				}
				if (rotation == CLOCKWISE)
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	f8 12       	cpse	r15, r24
 598:	09 c0       	rjmp	.+18     	; 0x5ac <main+0x82>
					rotation = getNextMode(mode, &modeLast);
 59a:	be 01       	movw	r22, r28
 59c:	6f 5f       	subi	r22, 0xFF	; 255
 59e:	7f 4f       	sbci	r23, 0xFF	; 255
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	0e 94 07 03 	call	0x60e	; 0x60e <getNextMode>
 5a6:	f8 2e       	mov	r15, r24
 5a8:	ab 2c       	mov	r10, r11
 5aa:	0d c0       	rjmp	.+26     	; 0x5c6 <main+0x9c>
				else if (rotation == COUNTERCLOCKWISE)
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	f8 12       	cpse	r15, r24
 5b0:	09 c0       	rjmp	.+18     	; 0x5c4 <main+0x9a>
					rotation = getPreviousMode(mode, &modeLast);
 5b2:	be 01       	movw	r22, r28
 5b4:	6f 5f       	subi	r22, 0xFF	; 255
 5b6:	7f 4f       	sbci	r23, 0xFF	; 255
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	0e 94 0c 03 	call	0x618	; 0x618 <getPreviousMode>
 5be:	f8 2e       	mov	r15, r24
 5c0:	ab 2c       	mov	r10, r11
 5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <main+0x9c>
 5c4:	ab 2c       	mov	r10, r11
			}
			displayRefresh(mode, &modeLast, frequency, phase, voltage, signal);
 5c6:	cb 2c       	mov	r12, r11
 5c8:	ee 24       	eor	r14, r14
 5ca:	e3 94       	inc	r14
 5cc:	00 e0       	ldi	r16, 0x00	; 0
 5ce:	10 e0       	ldi	r17, 0x00	; 0
 5d0:	20 ea       	ldi	r18, 0xA0	; 160
 5d2:	36 e8       	ldi	r19, 0x86	; 134
 5d4:	41 e0       	ldi	r20, 0x01	; 1
 5d6:	50 e0       	ldi	r21, 0x00	; 0
 5d8:	be 01       	movw	r22, r28
 5da:	6f 5f       	subi	r22, 0xFF	; 255
 5dc:	7f 4f       	sbci	r23, 0xFF	; 255
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	0e 94 ad 03 	call	0x75a	; 0x75a <displayRefresh>
 5e4:	b6 cf       	rjmp	.-148    	; 0x552 <main+0x28>

000005e6 <initHeartbeatTimer>:
	initHeartbeatTimer();
}

// Init timer0 - int0 8bit PS=1024 , ticks = 78 , freq ~= 200Hz , period ~= 5ms
void initHeartbeatTimer() {
	TCNT0 = 78;					// set Timer0 to tick for 10ms
 5e6:	8e e4       	ldi	r24, 0x4E	; 78
 5e8:	86 bd       	out	0x26, r24	; 38
	TCCR0B |= (1<<CS02)|(1<<CS00);	// pre-scaler = 1024
 5ea:	85 b5       	in	r24, 0x25	; 37
 5ec:	85 60       	ori	r24, 0x05	; 5
 5ee:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<TOIE0);			// overflow interrupt enable
 5f0:	ee e6       	ldi	r30, 0x6E	; 110
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	81 60       	ori	r24, 0x01	; 1
 5f8:	80 83       	st	Z, r24
 5fa:	08 95       	ret

000005fc <rotaryInit>:
#include "rotary.h"

volatile uint8_t setVal = 0;

void rotaryInit(void) {
	ROTARY_DDR &= ~((1<<ROTARY_A) | (1<<ROTARY_B) | (1<<ROTARY_BUTTON)); // encoder pins and button set as input
 5fc:	87 b1       	in	r24, 0x07	; 7
 5fe:	88 7f       	andi	r24, 0xF8	; 248
 600:	87 b9       	out	0x07, r24	; 7
	ROTARY_PORT |= (1<<ROTARY_A) | (1<<ROTARY_B); // set pull-up resistors on encoder pins.
 602:	88 b1       	in	r24, 0x08	; 8
 604:	83 60       	ori	r24, 0x03	; 3
 606:	88 b9       	out	0x08, r24	; 8
	initHeartbeatTimer();
 608:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <initHeartbeatTimer>
 60c:	08 95       	ret

0000060e <getNextMode>:
	TCCR0B |= (1<<CS02)|(1<<CS00);	// pre-scaler = 1024
	TIMSK0 |= (1<<TOIE0);			// overflow interrupt enable
}

uint8_t getNextMode(uint8_t mode, uint8_t *modeLast) {
	*modeLast = mode;
 60e:	fb 01       	movw	r30, r22
 610:	80 83       	st	Z, r24
	return mode = (mode+1)&3;
 612:	8f 5f       	subi	r24, 0xFF	; 255
}
 614:	83 70       	andi	r24, 0x03	; 3
 616:	08 95       	ret

00000618 <getPreviousMode>:

uint8_t getPreviousMode(uint8_t mode, uint8_t *modeLast) {
	*modeLast = mode;
 618:	fb 01       	movw	r30, r22
 61a:	80 83       	st	Z, r24
	return mode = (mode-1)&3;
 61c:	81 50       	subi	r24, 0x01	; 1
}
 61e:	83 70       	andi	r24, 0x03	; 3
 620:	08 95       	ret

00000622 <setRotaryStatus>:

uint8_t setRotaryStatus(uint8_t aQuiescent, uint8_t rotation) {
	uint8_t aState = ROTARY_PIN & (1<<ROTARY_A);
 622:	96 b1       	in	r25, 0x06	; 6
 624:	91 70       	andi	r25, 0x01	; 1
	rotation = NO_ROTATION;
	if (aState != aQuiescent) 
 626:	98 17       	cp	r25, r24
 628:	51 f0       	breq	.+20     	; 0x63e <setRotaryStatus+0x1c>
		rotation = (ROTARY_PIN & (1<<ROTARY_B)) != aState ? COUNTERCLOCKWISE : CLOCKWISE;
 62a:	26 b1       	in	r18, 0x06	; 6
 62c:	22 70       	andi	r18, 0x02	; 2
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	89 2f       	mov	r24, r25
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	28 17       	cp	r18, r24
 636:	39 07       	cpc	r19, r25
 638:	21 f4       	brne	.+8      	; 0x642 <setRotaryStatus+0x20>
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	08 95       	ret
	return mode = (mode-1)&3;
}

uint8_t setRotaryStatus(uint8_t aQuiescent, uint8_t rotation) {
	uint8_t aState = ROTARY_PIN & (1<<ROTARY_A);
	rotation = NO_ROTATION;
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	08 95       	ret
	if (aState != aQuiescent) 
		rotation = (ROTARY_PIN & (1<<ROTARY_B)) != aState ? COUNTERCLOCKWISE : CLOCKWISE;
 642:	82 e0       	ldi	r24, 0x02	; 2
	return rotation;
}
 644:	08 95       	ret

00000646 <__vector_16>:

/* Interrupt Service Routine for Timer0
	Occurs every 10ms to poll button pin */
ISR (TIMER0_OVF_vect) {
 646:	1f 92       	push	r1
 648:	0f 92       	push	r0
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	0f 92       	push	r0
 64e:	11 24       	eor	r1, r1
 650:	8f 93       	push	r24
 652:	9f 93       	push	r25
		if (ROTARY_PIN & (1<<ROTARY_BUTTON)) setVal ^= SET_VAL_FLAG;
 654:	32 9b       	sbis	0x06, 2	; 6
 656:	06 c0       	rjmp	.+12     	; 0x664 <__vector_16+0x1e>
 658:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <setVal>
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	89 27       	eor	r24, r25
 660:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <setVal>
 664:	9f 91       	pop	r25
 666:	8f 91       	pop	r24
 668:	0f 90       	pop	r0
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	0f 90       	pop	r0
 66e:	1f 90       	pop	r1
 670:	18 95       	reti

00000672 <SPI_init>:

#include "spi.h"

void SPI_init (void)
{
	SPI_DDR |= (1<<SPI_CS) | (1<<SPI_MOSI) | (1<<SPI_SCK); // set SCK,MOSI,CS as Fsync 
 672:	84 b1       	in	r24, 0x04	; 4
 674:	8c 62       	ori	r24, 0x2C	; 44
 676:	84 b9       	out	0x04, r24	; 4
	SPI_PORT |= (1<<SPI_CS) | (1<<SPI_SCK); // SCK and CS high
 678:	85 b1       	in	r24, 0x05	; 5
 67a:	84 62       	ori	r24, 0x24	; 36
 67c:	85 b9       	out	0x05, r24	; 5
	SPCR0 |= (1<<SPE) | (1<<MSTR) | (1<<CPOL); // Enable SPI // Set Master mode //	Set clk to inv.
 67e:	8c b5       	in	r24, 0x2c	; 44
 680:	88 65       	ori	r24, 0x58	; 88
 682:	8c bd       	out	0x2c, r24	; 44
 684:	08 95       	ret

00000686 <SPI_write16>:
{

	unsigned char MSdata = ((data>>8) & 0x00FF);  	//filter out MS
	unsigned char LSdata = (data & 0x00FF);			//filter out LS

	SPI_PORT &= ~(1<<SPI_CS);				// 	Fsync Low --> begin frame
 686:	2a 98       	cbi	0x05, 2	; 5
	
	SPDR0 = MSdata;							// 	send First 8 MS of data
 688:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR0 & (1<<SPIF)));			//	while busy
 68a:	0d b4       	in	r0, 0x2d	; 45
 68c:	07 fe       	sbrs	r0, 7
 68e:	fd cf       	rjmp	.-6      	; 0x68a <SPI_write16+0x4>

	SPDR0 = LSdata;							// 	send Last 8 LS of data
 690:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR0 & (1<<SPIF)));			//	while busy
 692:	0d b4       	in	r0, 0x2d	; 45
 694:	07 fe       	sbrs	r0, 7
 696:	fd cf       	rjmp	.-6      	; 0x692 <SPI_write16+0xc>

	SPI_PORT |= (1<<SPI_CS);				// 	Fsync High --> End of frame
 698:	2a 9a       	sbi	0x05, 2	; 5
 69a:	08 95       	ret

0000069c <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 69c:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 6a0:	88 e4       	ldi	r24, 0x48	; 72
 6a2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 6a6:	08 95       	ret

000006a8 <i2c_start>:
 6a8:	94 ea       	ldi	r25, 0xA4	; 164
 6aa:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 6ae:	ec ed       	ldi	r30, 0xDC	; 220
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	90 81       	ld	r25, Z
 6b4:	99 23       	and	r25, r25
 6b6:	ec f7       	brge	.-6      	; 0x6b2 <i2c_start+0xa>
 6b8:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 6bc:	98 7f       	andi	r25, 0xF8	; 248
 6be:	98 30       	cpi	r25, 0x08	; 8
 6c0:	11 f0       	breq	.+4      	; 0x6c6 <i2c_start+0x1e>
 6c2:	90 31       	cpi	r25, 0x10	; 16
 6c4:	a1 f4       	brne	.+40     	; 0x6ee <i2c_start+0x46>
 6c6:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 6ca:	84 e8       	ldi	r24, 0x84	; 132
 6cc:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 6d0:	ec ed       	ldi	r30, 0xDC	; 220
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	88 23       	and	r24, r24
 6d8:	ec f7       	brge	.-6      	; 0x6d4 <i2c_start+0x2c>
 6da:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 6de:	98 7f       	andi	r25, 0xF8	; 248
 6e0:	98 31       	cpi	r25, 0x18	; 24
 6e2:	39 f0       	breq	.+14     	; 0x6f2 <i2c_start+0x4a>
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	90 34       	cpi	r25, 0x40	; 64
 6e8:	29 f4       	brne	.+10     	; 0x6f4 <i2c_start+0x4c>
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	08 95       	ret
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	08 95       	ret
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	08 95       	ret

000006f6 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 6f6:	84 e9       	ldi	r24, 0x94	; 148
 6f8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	
	// wait until stop condition is executed and bus released
	while(TWCR1 & (1<<TWSTO));
 6fc:	ec ed       	ldi	r30, 0xDC	; 220
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 81       	ld	r24, Z
 702:	84 fd       	sbrc	r24, 4
 704:	fd cf       	rjmp	.-6      	; 0x700 <i2c_stop+0xa>

}/* i2c_stop */
 706:	08 95       	ret

00000708 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR1 = data;
 708:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	TWCR1 = (1<<TWINT) | (1<<TWEN);
 70c:	84 e8       	ldi	r24, 0x84	; 132
 70e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

	// wait until transmission completed
	while(!(TWCR1 & (1<<TWINT)));
 712:	ec ed       	ldi	r30, 0xDC	; 220
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	88 23       	and	r24, r24
 71a:	ec f7       	brge	.-6      	; 0x716 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TWSR1 & 0xF8;
 71c:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 720:	98 7f       	andi	r25, 0xF8	; 248
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	98 32       	cpi	r25, 0x28	; 40
 726:	09 f4       	brne	.+2      	; 0x72a <i2c_write+0x22>
 728:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 72a:	08 95       	ret

0000072c <clearScreen>:
	for (uint8_t i = x1; i < x2; i++) {
		lcd_gotoxy(i,y);
		lcd_puts(" ");
	}
	lcd_gotoxy(x1,y);
}
 72c:	0e 94 01 02 	call	0x402	; 0x402 <lcd_clrscr>
 730:	8f e3       	ldi	r24, 0x3F	; 63
 732:	9c e9       	ldi	r25, 0x9C	; 156
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	f1 f7       	brne	.-4      	; 0x734 <clearScreen+0x8>
 738:	00 c0       	rjmp	.+0      	; 0x73a <clearScreen+0xe>
 73a:	00 00       	nop
 73c:	08 95       	ret

0000073e <clearLine>:
 73e:	cf 93       	push	r28
 740:	68 2f       	mov	r22, r24
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_gotoxy>
 748:	c0 e1       	ldi	r28, 0x10	; 16
 74a:	81 e2       	ldi	r24, 0x21	; 33
 74c:	91 e0       	ldi	r25, 0x01	; 1
 74e:	0e 94 39 02 	call	0x472	; 0x472 <lcd_puts>
 752:	c1 50       	subi	r28, 0x01	; 1
 754:	d1 f7       	brne	.-12     	; 0x74a <clearLine+0xc>
 756:	cf 91       	pop	r28
 758:	08 95       	ret

0000075a <displayRefresh>:

void displayRefresh(uint8_t mode, uint8_t *modeLast, uint32_t frequency, uint16_t phase, int8_t voltage, uint8_t signal) {
 75a:	8f 92       	push	r8
 75c:	9f 92       	push	r9
 75e:	af 92       	push	r10
 760:	bf 92       	push	r11
 762:	cf 92       	push	r12
 764:	ef 92       	push	r14
 766:	ff 92       	push	r15
 768:	0f 93       	push	r16
 76a:	1f 93       	push	r17
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
 770:	cd b7       	in	r28, 0x3d	; 61
 772:	de b7       	in	r29, 0x3e	; 62
 774:	2a 97       	sbiw	r28, 0x0a	; 10
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	f8 94       	cli
 77a:	de bf       	out	0x3e, r29	; 62
 77c:	0f be       	out	0x3f, r0	; 63
 77e:	cd bf       	out	0x3d, r28	; 61
 780:	f8 2e       	mov	r15, r24
 782:	49 01       	movw	r8, r18
 784:	5a 01       	movw	r10, r20
	if (mode != *modeLast) {
 786:	fb 01       	movw	r30, r22
 788:	80 81       	ld	r24, Z
 78a:	8f 15       	cp	r24, r15
 78c:	69 f0       	breq	.+26     	; 0x7a8 <displayRefresh+0x4e>
		clearScreen();
 78e:	0e 94 96 03 	call	0x72c	; 0x72c <clearScreen>
		lcd_puts(labels[mode]);
 792:	ef 2d       	mov	r30, r15
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	ee 0f       	add	r30, r30
 798:	ff 1f       	adc	r31, r31
 79a:	e1 5f       	subi	r30, 0xF1	; 241
 79c:	fe 4f       	sbci	r31, 0xFE	; 254
 79e:	80 81       	ld	r24, Z
 7a0:	91 81       	ldd	r25, Z+1	; 0x01
 7a2:	0e 94 39 02 	call	0x472	; 0x472 <lcd_puts>
 7a6:	03 c0       	rjmp	.+6      	; 0x7ae <displayRefresh+0x54>
	}
	else
		clearLine(1);
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	0e 94 9f 03 	call	0x73e	; 0x73e <clearLine>
	lcd_gotoxy(0,1);
 7ae:	61 e0       	ldi	r22, 0x01	; 1
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_gotoxy>
	if (mode == MODE_SIGNAL) lcd_puts(signals[signal]);
 7b6:	f1 10       	cpse	r15, r1
 7b8:	0b c0       	rjmp	.+22     	; 0x7d0 <displayRefresh+0x76>
 7ba:	ec 2d       	mov	r30, r12
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	ee 0f       	add	r30, r30
 7c0:	ff 1f       	adc	r31, r31
 7c2:	ef 5f       	subi	r30, 0xFF	; 255
 7c4:	fe 4f       	sbci	r31, 0xFE	; 254
 7c6:	80 81       	ld	r24, Z
 7c8:	91 81       	ldd	r25, Z+1	; 0x01
 7ca:	0e 94 39 02 	call	0x472	; 0x472 <lcd_puts>
 7ce:	30 c0       	rjmp	.+96     	; 0x830 <displayRefresh+0xd6>
	else {
		char val[10];
		if (mode == MODE_VOLTAGE) itoa(voltage,val,10);
 7d0:	f1 e0       	ldi	r31, 0x01	; 1
 7d2:	ff 12       	cpse	r15, r31
 7d4:	0a c0       	rjmp	.+20     	; 0x7ea <displayRefresh+0x90>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7d6:	4a e0       	ldi	r20, 0x0A	; 10
 7d8:	be 01       	movw	r22, r28
 7da:	6f 5f       	subi	r22, 0xFF	; 255
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255
 7de:	8e 2d       	mov	r24, r14
 7e0:	ee 0c       	add	r14, r14
 7e2:	99 0b       	sbc	r25, r25
 7e4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__itoa_ncheck>
 7e8:	15 c0       	rjmp	.+42     	; 0x814 <displayRefresh+0xba>
		else if (mode == MODE_FREQUENCY) itoa(frequency,val,10);
 7ea:	82 e0       	ldi	r24, 0x02	; 2
 7ec:	f8 12       	cpse	r15, r24
 7ee:	08 c0       	rjmp	.+16     	; 0x800 <displayRefresh+0xa6>
 7f0:	4a e0       	ldi	r20, 0x0A	; 10
 7f2:	be 01       	movw	r22, r28
 7f4:	6f 5f       	subi	r22, 0xFF	; 255
 7f6:	7f 4f       	sbci	r23, 0xFF	; 255
 7f8:	c4 01       	movw	r24, r8
 7fa:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__itoa_ncheck>
 7fe:	0a c0       	rjmp	.+20     	; 0x814 <displayRefresh+0xba>
		else if (mode == MODE_PHASE) itoa(phase,val,10);
 800:	e3 e0       	ldi	r30, 0x03	; 3
 802:	fe 12       	cpse	r15, r30
 804:	07 c0       	rjmp	.+14     	; 0x814 <displayRefresh+0xba>
 806:	4a e0       	ldi	r20, 0x0A	; 10
 808:	be 01       	movw	r22, r28
 80a:	6f 5f       	subi	r22, 0xFF	; 255
 80c:	7f 4f       	sbci	r23, 0xFF	; 255
 80e:	c8 01       	movw	r24, r16
 810:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__itoa_ncheck>
		lcd_puts(val);
 814:	ce 01       	movw	r24, r28
 816:	01 96       	adiw	r24, 0x01	; 1
 818:	0e 94 39 02 	call	0x472	; 0x472 <lcd_puts>
		lcd_puts(units[mode-1]);
 81c:	ef 2d       	mov	r30, r15
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	ee 0f       	add	r30, r30
 822:	ff 1f       	adc	r31, r31
 824:	e9 5f       	subi	r30, 0xF9	; 249
 826:	fe 4f       	sbci	r31, 0xFE	; 254
 828:	80 81       	ld	r24, Z
 82a:	91 81       	ldd	r25, Z+1	; 0x01
 82c:	0e 94 39 02 	call	0x472	; 0x472 <lcd_puts>
		val[0] = '\0';
	}
 830:	2a 96       	adiw	r28, 0x0a	; 10
 832:	0f b6       	in	r0, 0x3f	; 63
 834:	f8 94       	cli
 836:	de bf       	out	0x3e, r29	; 62
 838:	0f be       	out	0x3f, r0	; 63
 83a:	cd bf       	out	0x3d, r28	; 61
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	1f 91       	pop	r17
 842:	0f 91       	pop	r16
 844:	ff 90       	pop	r15
 846:	ef 90       	pop	r14
 848:	cf 90       	pop	r12
 84a:	bf 90       	pop	r11
 84c:	af 90       	pop	r10
 84e:	9f 90       	pop	r9
 850:	8f 90       	pop	r8
 852:	08 95       	ret

00000854 <uiInit>:
const char* units[3] = {" V"," Hz"," deg"};
const char* signals[4] = {"sine","cosine","square","triangle"};

extern void lcd_backlight(char on);

void uiInit(void) {
 854:	cf 92       	push	r12
 856:	ef 92       	push	r14
 858:	0f 93       	push	r16
 85a:	1f 93       	push	r17
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	1f 92       	push	r1
 862:	cd b7       	in	r28, 0x3d	; 61
 864:	de b7       	in	r29, 0x3e	; 62
	const uint8_t initMode = 0;
	const uint8_t initModeLast = 0xFF;
 866:	8f ef       	ldi	r24, 0xFF	; 255
 868:	89 83       	std	Y+1, r24	; 0x01
	rotaryInit();
 86a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <rotaryInit>
	LCD_I2C_DDR &= ~((1<<LCD_I2C_SCL) | (1<<LCD_I2C_SDA));
 86e:	8d b1       	in	r24, 0x0d	; 13
 870:	8c 7f       	andi	r24, 0xFC	; 252
 872:	8d b9       	out	0x0d, r24	; 13
	LCD_I2C_PORT |= (1<<LCD_I2C_SCL) | (1<<LCD_I2C_SDA);
 874:	8e b1       	in	r24, 0x0e	; 14
 876:	83 60       	ori	r24, 0x03	; 3
 878:	8e b9       	out	0x0e, r24	; 14
	lcd_init(LCD_ON_DISPLAY);
 87a:	82 e0       	ldi	r24, 0x02	; 2
 87c:	0e 94 48 02 	call	0x490	; 0x490 <lcd_init>
	lcd_backlight(0);
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	0e 94 91 02 	call	0x522	; 0x522 <lcd_backlight>
 886:	2f ef       	ldi	r18, 0xFF	; 255
 888:	89 e6       	ldi	r24, 0x69	; 105
 88a:	98 e1       	ldi	r25, 0x18	; 24
 88c:	21 50       	subi	r18, 0x01	; 1
 88e:	80 40       	sbci	r24, 0x00	; 0
 890:	90 40       	sbci	r25, 0x00	; 0
 892:	e1 f7       	brne	.-8      	; 0x88c <uiInit+0x38>
 894:	00 c0       	rjmp	.+0      	; 0x896 <uiInit+0x42>
 896:	00 00       	nop
	_delay_ms(500);
	lcd_backlight(1);
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	0e 94 91 02 	call	0x522	; 0x522 <lcd_backlight>
 89e:	2f ef       	ldi	r18, 0xFF	; 255
 8a0:	89 e6       	ldi	r24, 0x69	; 105
 8a2:	98 e1       	ldi	r25, 0x18	; 24
 8a4:	21 50       	subi	r18, 0x01	; 1
 8a6:	80 40       	sbci	r24, 0x00	; 0
 8a8:	90 40       	sbci	r25, 0x00	; 0
 8aa:	e1 f7       	brne	.-8      	; 0x8a4 <uiInit+0x50>
 8ac:	00 c0       	rjmp	.+0      	; 0x8ae <uiInit+0x5a>
 8ae:	00 00       	nop
	_delay_ms(500);
	displayRefresh(initMode,&initModeLast,100000,0,1,0);
 8b0:	c1 2c       	mov	r12, r1
 8b2:	ee 24       	eor	r14, r14
 8b4:	e3 94       	inc	r14
 8b6:	00 e0       	ldi	r16, 0x00	; 0
 8b8:	10 e0       	ldi	r17, 0x00	; 0
 8ba:	20 ea       	ldi	r18, 0xA0	; 160
 8bc:	36 e8       	ldi	r19, 0x86	; 134
 8be:	41 e0       	ldi	r20, 0x01	; 1
 8c0:	50 e0       	ldi	r21, 0x00	; 0
 8c2:	be 01       	movw	r22, r28
 8c4:	6f 5f       	subi	r22, 0xFF	; 255
 8c6:	7f 4f       	sbci	r23, 0xFF	; 255
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	0e 94 ad 03 	call	0x75a	; 0x75a <displayRefresh>
}
 8ce:	0f 90       	pop	r0
 8d0:	df 91       	pop	r29
 8d2:	cf 91       	pop	r28
 8d4:	1f 91       	pop	r17
 8d6:	0f 91       	pop	r16
 8d8:	ef 90       	pop	r14
 8da:	cf 90       	pop	r12
 8dc:	08 95       	ret

000008de <__divsf3>:
 8de:	0e 94 83 04 	call	0x906	; 0x906 <__divsf3x>
 8e2:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__fp_round>
 8e6:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_pscB>
 8ea:	58 f0       	brcs	.+22     	; 0x902 <__stack+0x3>
 8ec:	0e 94 56 05 	call	0xaac	; 0xaac <__fp_pscA>
 8f0:	40 f0       	brcs	.+16     	; 0x902 <__stack+0x3>
 8f2:	29 f4       	brne	.+10     	; 0x8fe <__divsf3+0x20>
 8f4:	5f 3f       	cpi	r21, 0xFF	; 255
 8f6:	29 f0       	breq	.+10     	; 0x902 <__stack+0x3>
 8f8:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_inf>
 8fc:	51 11       	cpse	r21, r1
 8fe:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_szero>
 902:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__fp_nan>

00000906 <__divsf3x>:
 906:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_split3>
 90a:	68 f3       	brcs	.-38     	; 0x8e6 <__divsf3+0x8>

0000090c <__divsf3_pse>:
 90c:	99 23       	and	r25, r25
 90e:	b1 f3       	breq	.-20     	; 0x8fc <__divsf3+0x1e>
 910:	55 23       	and	r21, r21
 912:	91 f3       	breq	.-28     	; 0x8f8 <__divsf3+0x1a>
 914:	95 1b       	sub	r25, r21
 916:	55 0b       	sbc	r21, r21
 918:	bb 27       	eor	r27, r27
 91a:	aa 27       	eor	r26, r26
 91c:	62 17       	cp	r22, r18
 91e:	73 07       	cpc	r23, r19
 920:	84 07       	cpc	r24, r20
 922:	38 f0       	brcs	.+14     	; 0x932 <__divsf3_pse+0x26>
 924:	9f 5f       	subi	r25, 0xFF	; 255
 926:	5f 4f       	sbci	r21, 0xFF	; 255
 928:	22 0f       	add	r18, r18
 92a:	33 1f       	adc	r19, r19
 92c:	44 1f       	adc	r20, r20
 92e:	aa 1f       	adc	r26, r26
 930:	a9 f3       	breq	.-22     	; 0x91c <__divsf3_pse+0x10>
 932:	35 d0       	rcall	.+106    	; 0x99e <__divsf3_pse+0x92>
 934:	0e 2e       	mov	r0, r30
 936:	3a f0       	brmi	.+14     	; 0x946 <__divsf3_pse+0x3a>
 938:	e0 e8       	ldi	r30, 0x80	; 128
 93a:	32 d0       	rcall	.+100    	; 0x9a0 <__divsf3_pse+0x94>
 93c:	91 50       	subi	r25, 0x01	; 1
 93e:	50 40       	sbci	r21, 0x00	; 0
 940:	e6 95       	lsr	r30
 942:	00 1c       	adc	r0, r0
 944:	ca f7       	brpl	.-14     	; 0x938 <__divsf3_pse+0x2c>
 946:	2b d0       	rcall	.+86     	; 0x99e <__divsf3_pse+0x92>
 948:	fe 2f       	mov	r31, r30
 94a:	29 d0       	rcall	.+82     	; 0x99e <__divsf3_pse+0x92>
 94c:	66 0f       	add	r22, r22
 94e:	77 1f       	adc	r23, r23
 950:	88 1f       	adc	r24, r24
 952:	bb 1f       	adc	r27, r27
 954:	26 17       	cp	r18, r22
 956:	37 07       	cpc	r19, r23
 958:	48 07       	cpc	r20, r24
 95a:	ab 07       	cpc	r26, r27
 95c:	b0 e8       	ldi	r27, 0x80	; 128
 95e:	09 f0       	breq	.+2      	; 0x962 <__divsf3_pse+0x56>
 960:	bb 0b       	sbc	r27, r27
 962:	80 2d       	mov	r24, r0
 964:	bf 01       	movw	r22, r30
 966:	ff 27       	eor	r31, r31
 968:	93 58       	subi	r25, 0x83	; 131
 96a:	5f 4f       	sbci	r21, 0xFF	; 255
 96c:	3a f0       	brmi	.+14     	; 0x97c <__divsf3_pse+0x70>
 96e:	9e 3f       	cpi	r25, 0xFE	; 254
 970:	51 05       	cpc	r21, r1
 972:	78 f0       	brcs	.+30     	; 0x992 <__divsf3_pse+0x86>
 974:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_inf>
 978:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_szero>
 97c:	5f 3f       	cpi	r21, 0xFF	; 255
 97e:	e4 f3       	brlt	.-8      	; 0x978 <__divsf3_pse+0x6c>
 980:	98 3e       	cpi	r25, 0xE8	; 232
 982:	d4 f3       	brlt	.-12     	; 0x978 <__divsf3_pse+0x6c>
 984:	86 95       	lsr	r24
 986:	77 95       	ror	r23
 988:	67 95       	ror	r22
 98a:	b7 95       	ror	r27
 98c:	f7 95       	ror	r31
 98e:	9f 5f       	subi	r25, 0xFF	; 255
 990:	c9 f7       	brne	.-14     	; 0x984 <__divsf3_pse+0x78>
 992:	88 0f       	add	r24, r24
 994:	91 1d       	adc	r25, r1
 996:	96 95       	lsr	r25
 998:	87 95       	ror	r24
 99a:	97 f9       	bld	r25, 7
 99c:	08 95       	ret
 99e:	e1 e0       	ldi	r30, 0x01	; 1
 9a0:	66 0f       	add	r22, r22
 9a2:	77 1f       	adc	r23, r23
 9a4:	88 1f       	adc	r24, r24
 9a6:	bb 1f       	adc	r27, r27
 9a8:	62 17       	cp	r22, r18
 9aa:	73 07       	cpc	r23, r19
 9ac:	84 07       	cpc	r24, r20
 9ae:	ba 07       	cpc	r27, r26
 9b0:	20 f0       	brcs	.+8      	; 0x9ba <__divsf3_pse+0xae>
 9b2:	62 1b       	sub	r22, r18
 9b4:	73 0b       	sbc	r23, r19
 9b6:	84 0b       	sbc	r24, r20
 9b8:	ba 0b       	sbc	r27, r26
 9ba:	ee 1f       	adc	r30, r30
 9bc:	88 f7       	brcc	.-30     	; 0x9a0 <__divsf3_pse+0x94>
 9be:	e0 95       	com	r30
 9c0:	08 95       	ret

000009c2 <__fixunssfsi>:
 9c2:	0e 94 7d 05 	call	0xafa	; 0xafa <__fp_splitA>
 9c6:	88 f0       	brcs	.+34     	; 0x9ea <__fixunssfsi+0x28>
 9c8:	9f 57       	subi	r25, 0x7F	; 127
 9ca:	98 f0       	brcs	.+38     	; 0x9f2 <__fixunssfsi+0x30>
 9cc:	b9 2f       	mov	r27, r25
 9ce:	99 27       	eor	r25, r25
 9d0:	b7 51       	subi	r27, 0x17	; 23
 9d2:	b0 f0       	brcs	.+44     	; 0xa00 <__fixunssfsi+0x3e>
 9d4:	e1 f0       	breq	.+56     	; 0xa0e <__fixunssfsi+0x4c>
 9d6:	66 0f       	add	r22, r22
 9d8:	77 1f       	adc	r23, r23
 9da:	88 1f       	adc	r24, r24
 9dc:	99 1f       	adc	r25, r25
 9de:	1a f0       	brmi	.+6      	; 0x9e6 <__fixunssfsi+0x24>
 9e0:	ba 95       	dec	r27
 9e2:	c9 f7       	brne	.-14     	; 0x9d6 <__fixunssfsi+0x14>
 9e4:	14 c0       	rjmp	.+40     	; 0xa0e <__fixunssfsi+0x4c>
 9e6:	b1 30       	cpi	r27, 0x01	; 1
 9e8:	91 f0       	breq	.+36     	; 0xa0e <__fixunssfsi+0x4c>
 9ea:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fp_zero>
 9ee:	b1 e0       	ldi	r27, 0x01	; 1
 9f0:	08 95       	ret
 9f2:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__fp_zero>
 9f6:	67 2f       	mov	r22, r23
 9f8:	78 2f       	mov	r23, r24
 9fa:	88 27       	eor	r24, r24
 9fc:	b8 5f       	subi	r27, 0xF8	; 248
 9fe:	39 f0       	breq	.+14     	; 0xa0e <__fixunssfsi+0x4c>
 a00:	b9 3f       	cpi	r27, 0xF9	; 249
 a02:	cc f3       	brlt	.-14     	; 0x9f6 <__fixunssfsi+0x34>
 a04:	86 95       	lsr	r24
 a06:	77 95       	ror	r23
 a08:	67 95       	ror	r22
 a0a:	b3 95       	inc	r27
 a0c:	d9 f7       	brne	.-10     	; 0xa04 <__fixunssfsi+0x42>
 a0e:	3e f4       	brtc	.+14     	; 0xa1e <__fixunssfsi+0x5c>
 a10:	90 95       	com	r25
 a12:	80 95       	com	r24
 a14:	70 95       	com	r23
 a16:	61 95       	neg	r22
 a18:	7f 4f       	sbci	r23, 0xFF	; 255
 a1a:	8f 4f       	sbci	r24, 0xFF	; 255
 a1c:	9f 4f       	sbci	r25, 0xFF	; 255
 a1e:	08 95       	ret

00000a20 <__floatunsisf>:
 a20:	e8 94       	clt
 a22:	09 c0       	rjmp	.+18     	; 0xa36 <__floatsisf+0x12>

00000a24 <__floatsisf>:
 a24:	97 fb       	bst	r25, 7
 a26:	3e f4       	brtc	.+14     	; 0xa36 <__floatsisf+0x12>
 a28:	90 95       	com	r25
 a2a:	80 95       	com	r24
 a2c:	70 95       	com	r23
 a2e:	61 95       	neg	r22
 a30:	7f 4f       	sbci	r23, 0xFF	; 255
 a32:	8f 4f       	sbci	r24, 0xFF	; 255
 a34:	9f 4f       	sbci	r25, 0xFF	; 255
 a36:	99 23       	and	r25, r25
 a38:	a9 f0       	breq	.+42     	; 0xa64 <__floatsisf+0x40>
 a3a:	f9 2f       	mov	r31, r25
 a3c:	96 e9       	ldi	r25, 0x96	; 150
 a3e:	bb 27       	eor	r27, r27
 a40:	93 95       	inc	r25
 a42:	f6 95       	lsr	r31
 a44:	87 95       	ror	r24
 a46:	77 95       	ror	r23
 a48:	67 95       	ror	r22
 a4a:	b7 95       	ror	r27
 a4c:	f1 11       	cpse	r31, r1
 a4e:	f8 cf       	rjmp	.-16     	; 0xa40 <__floatsisf+0x1c>
 a50:	fa f4       	brpl	.+62     	; 0xa90 <__floatsisf+0x6c>
 a52:	bb 0f       	add	r27, r27
 a54:	11 f4       	brne	.+4      	; 0xa5a <__floatsisf+0x36>
 a56:	60 ff       	sbrs	r22, 0
 a58:	1b c0       	rjmp	.+54     	; 0xa90 <__floatsisf+0x6c>
 a5a:	6f 5f       	subi	r22, 0xFF	; 255
 a5c:	7f 4f       	sbci	r23, 0xFF	; 255
 a5e:	8f 4f       	sbci	r24, 0xFF	; 255
 a60:	9f 4f       	sbci	r25, 0xFF	; 255
 a62:	16 c0       	rjmp	.+44     	; 0xa90 <__floatsisf+0x6c>
 a64:	88 23       	and	r24, r24
 a66:	11 f0       	breq	.+4      	; 0xa6c <__floatsisf+0x48>
 a68:	96 e9       	ldi	r25, 0x96	; 150
 a6a:	11 c0       	rjmp	.+34     	; 0xa8e <__floatsisf+0x6a>
 a6c:	77 23       	and	r23, r23
 a6e:	21 f0       	breq	.+8      	; 0xa78 <__floatsisf+0x54>
 a70:	9e e8       	ldi	r25, 0x8E	; 142
 a72:	87 2f       	mov	r24, r23
 a74:	76 2f       	mov	r23, r22
 a76:	05 c0       	rjmp	.+10     	; 0xa82 <__floatsisf+0x5e>
 a78:	66 23       	and	r22, r22
 a7a:	71 f0       	breq	.+28     	; 0xa98 <__floatsisf+0x74>
 a7c:	96 e8       	ldi	r25, 0x86	; 134
 a7e:	86 2f       	mov	r24, r22
 a80:	70 e0       	ldi	r23, 0x00	; 0
 a82:	60 e0       	ldi	r22, 0x00	; 0
 a84:	2a f0       	brmi	.+10     	; 0xa90 <__floatsisf+0x6c>
 a86:	9a 95       	dec	r25
 a88:	66 0f       	add	r22, r22
 a8a:	77 1f       	adc	r23, r23
 a8c:	88 1f       	adc	r24, r24
 a8e:	da f7       	brpl	.-10     	; 0xa86 <__floatsisf+0x62>
 a90:	88 0f       	add	r24, r24
 a92:	96 95       	lsr	r25
 a94:	87 95       	ror	r24
 a96:	97 f9       	bld	r25, 7
 a98:	08 95       	ret

00000a9a <__fp_inf>:
 a9a:	97 f9       	bld	r25, 7
 a9c:	9f 67       	ori	r25, 0x7F	; 127
 a9e:	80 e8       	ldi	r24, 0x80	; 128
 aa0:	70 e0       	ldi	r23, 0x00	; 0
 aa2:	60 e0       	ldi	r22, 0x00	; 0
 aa4:	08 95       	ret

00000aa6 <__fp_nan>:
 aa6:	9f ef       	ldi	r25, 0xFF	; 255
 aa8:	80 ec       	ldi	r24, 0xC0	; 192
 aaa:	08 95       	ret

00000aac <__fp_pscA>:
 aac:	00 24       	eor	r0, r0
 aae:	0a 94       	dec	r0
 ab0:	16 16       	cp	r1, r22
 ab2:	17 06       	cpc	r1, r23
 ab4:	18 06       	cpc	r1, r24
 ab6:	09 06       	cpc	r0, r25
 ab8:	08 95       	ret

00000aba <__fp_pscB>:
 aba:	00 24       	eor	r0, r0
 abc:	0a 94       	dec	r0
 abe:	12 16       	cp	r1, r18
 ac0:	13 06       	cpc	r1, r19
 ac2:	14 06       	cpc	r1, r20
 ac4:	05 06       	cpc	r0, r21
 ac6:	08 95       	ret

00000ac8 <__fp_round>:
 ac8:	09 2e       	mov	r0, r25
 aca:	03 94       	inc	r0
 acc:	00 0c       	add	r0, r0
 ace:	11 f4       	brne	.+4      	; 0xad4 <__fp_round+0xc>
 ad0:	88 23       	and	r24, r24
 ad2:	52 f0       	brmi	.+20     	; 0xae8 <__fp_round+0x20>
 ad4:	bb 0f       	add	r27, r27
 ad6:	40 f4       	brcc	.+16     	; 0xae8 <__fp_round+0x20>
 ad8:	bf 2b       	or	r27, r31
 ada:	11 f4       	brne	.+4      	; 0xae0 <__fp_round+0x18>
 adc:	60 ff       	sbrs	r22, 0
 ade:	04 c0       	rjmp	.+8      	; 0xae8 <__fp_round+0x20>
 ae0:	6f 5f       	subi	r22, 0xFF	; 255
 ae2:	7f 4f       	sbci	r23, 0xFF	; 255
 ae4:	8f 4f       	sbci	r24, 0xFF	; 255
 ae6:	9f 4f       	sbci	r25, 0xFF	; 255
 ae8:	08 95       	ret

00000aea <__fp_split3>:
 aea:	57 fd       	sbrc	r21, 7
 aec:	90 58       	subi	r25, 0x80	; 128
 aee:	44 0f       	add	r20, r20
 af0:	55 1f       	adc	r21, r21
 af2:	59 f0       	breq	.+22     	; 0xb0a <__fp_splitA+0x10>
 af4:	5f 3f       	cpi	r21, 0xFF	; 255
 af6:	71 f0       	breq	.+28     	; 0xb14 <__fp_splitA+0x1a>
 af8:	47 95       	ror	r20

00000afa <__fp_splitA>:
 afa:	88 0f       	add	r24, r24
 afc:	97 fb       	bst	r25, 7
 afe:	99 1f       	adc	r25, r25
 b00:	61 f0       	breq	.+24     	; 0xb1a <__fp_splitA+0x20>
 b02:	9f 3f       	cpi	r25, 0xFF	; 255
 b04:	79 f0       	breq	.+30     	; 0xb24 <__fp_splitA+0x2a>
 b06:	87 95       	ror	r24
 b08:	08 95       	ret
 b0a:	12 16       	cp	r1, r18
 b0c:	13 06       	cpc	r1, r19
 b0e:	14 06       	cpc	r1, r20
 b10:	55 1f       	adc	r21, r21
 b12:	f2 cf       	rjmp	.-28     	; 0xaf8 <__fp_split3+0xe>
 b14:	46 95       	lsr	r20
 b16:	f1 df       	rcall	.-30     	; 0xafa <__fp_splitA>
 b18:	08 c0       	rjmp	.+16     	; 0xb2a <__fp_splitA+0x30>
 b1a:	16 16       	cp	r1, r22
 b1c:	17 06       	cpc	r1, r23
 b1e:	18 06       	cpc	r1, r24
 b20:	99 1f       	adc	r25, r25
 b22:	f1 cf       	rjmp	.-30     	; 0xb06 <__fp_splitA+0xc>
 b24:	86 95       	lsr	r24
 b26:	71 05       	cpc	r23, r1
 b28:	61 05       	cpc	r22, r1
 b2a:	08 94       	sec
 b2c:	08 95       	ret

00000b2e <__fp_zero>:
 b2e:	e8 94       	clt

00000b30 <__fp_szero>:
 b30:	bb 27       	eor	r27, r27
 b32:	66 27       	eor	r22, r22
 b34:	77 27       	eor	r23, r23
 b36:	cb 01       	movw	r24, r22
 b38:	97 f9       	bld	r25, 7
 b3a:	08 95       	ret

00000b3c <__itoa_ncheck>:
 b3c:	bb 27       	eor	r27, r27
 b3e:	4a 30       	cpi	r20, 0x0A	; 10
 b40:	31 f4       	brne	.+12     	; 0xb4e <__itoa_ncheck+0x12>
 b42:	99 23       	and	r25, r25
 b44:	22 f4       	brpl	.+8      	; 0xb4e <__itoa_ncheck+0x12>
 b46:	bd e2       	ldi	r27, 0x2D	; 45
 b48:	90 95       	com	r25
 b4a:	81 95       	neg	r24
 b4c:	9f 4f       	sbci	r25, 0xFF	; 255
 b4e:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__utoa_common>

00000b52 <__utoa_ncheck>:
 b52:	bb 27       	eor	r27, r27

00000b54 <__utoa_common>:
 b54:	fb 01       	movw	r30, r22
 b56:	55 27       	eor	r21, r21
 b58:	aa 27       	eor	r26, r26
 b5a:	88 0f       	add	r24, r24
 b5c:	99 1f       	adc	r25, r25
 b5e:	aa 1f       	adc	r26, r26
 b60:	a4 17       	cp	r26, r20
 b62:	10 f0       	brcs	.+4      	; 0xb68 <__utoa_common+0x14>
 b64:	a4 1b       	sub	r26, r20
 b66:	83 95       	inc	r24
 b68:	50 51       	subi	r21, 0x10	; 16
 b6a:	b9 f7       	brne	.-18     	; 0xb5a <__utoa_common+0x6>
 b6c:	a0 5d       	subi	r26, 0xD0	; 208
 b6e:	aa 33       	cpi	r26, 0x3A	; 58
 b70:	08 f0       	brcs	.+2      	; 0xb74 <__utoa_common+0x20>
 b72:	a9 5d       	subi	r26, 0xD9	; 217
 b74:	a1 93       	st	Z+, r26
 b76:	00 97       	sbiw	r24, 0x00	; 0
 b78:	79 f7       	brne	.-34     	; 0xb58 <__utoa_common+0x4>
 b7a:	b1 11       	cpse	r27, r1
 b7c:	b1 93       	st	Z+, r27
 b7e:	11 92       	st	Z+, r1
 b80:	cb 01       	movw	r24, r22
 b82:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <strrev>

00000b86 <strrev>:
 b86:	dc 01       	movw	r26, r24
 b88:	fc 01       	movw	r30, r24
 b8a:	67 2f       	mov	r22, r23
 b8c:	71 91       	ld	r23, Z+
 b8e:	77 23       	and	r23, r23
 b90:	e1 f7       	brne	.-8      	; 0xb8a <strrev+0x4>
 b92:	32 97       	sbiw	r30, 0x02	; 2
 b94:	04 c0       	rjmp	.+8      	; 0xb9e <strrev+0x18>
 b96:	7c 91       	ld	r23, X
 b98:	6d 93       	st	X+, r22
 b9a:	70 83       	st	Z, r23
 b9c:	62 91       	ld	r22, -Z
 b9e:	ae 17       	cp	r26, r30
 ba0:	bf 07       	cpc	r27, r31
 ba2:	c8 f3       	brcs	.-14     	; 0xb96 <strrev+0x10>
 ba4:	08 95       	ret

00000ba6 <_exit>:
 ba6:	f8 94       	cli

00000ba8 <__stop_program>:
 ba8:	ff cf       	rjmp	.-2      	; 0xba8 <__stop_program>
