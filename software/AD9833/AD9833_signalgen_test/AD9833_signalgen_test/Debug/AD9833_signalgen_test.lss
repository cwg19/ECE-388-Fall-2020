
AD9833_signalgen_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000062c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ecd  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aba  00000000  00000000  000015e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005bc  00000000  00000000  000020a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00002660  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a4  00000000  00000000  00002754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000378  00000000  00000000  00002cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003070  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  d4:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <SPI_init>:

volatile uint16_t controlReg = 0;

void SPI_init (void)
{
	SPI_DDR |= (1<<SPI_CS) | (1<<SPI_MOSI) | (1<<SPI_SCK); // set SCK,MOSI,CS as Fsync 
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	8c 62       	ori	r24, 0x2C	; 44
  e0:	84 b9       	out	0x04, r24	; 4
	SPI_PORT |= (1<<SPI_CS) | (1<<SPI_SCK); // SCK and CS high
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	84 62       	ori	r24, 0x24	; 36
  e6:	85 b9       	out	0x05, r24	; 5
	SPCR0 |= (1<<SPE) | (1<<MSTR) | (1<<CPOL); // Enable SPI // Set Master mode //	Set clk to inv.
  e8:	8c b5       	in	r24, 0x2c	; 44
  ea:	88 65       	ori	r24, 0x58	; 88
  ec:	8c bd       	out	0x2c, r24	; 44
  ee:	08 95       	ret

000000f0 <SPI_write16>:
{

	unsigned char MSdata = ((data>>8) & 0x00FF);  	//filter out MS
	unsigned char LSdata = (data & 0x00FF);			//filter out LS

	SPI_PORT &= ~(1<<SPI_CS);				// 	Fsync Low --> begin frame
  f0:	2a 98       	cbi	0x05, 2	; 5
	
	SPDR0 = MSdata;							// 	send First 8 MS of data
  f2:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR0 & (1<<SPIF)));			//	while busy
  f4:	0d b4       	in	r0, 0x2d	; 45
  f6:	07 fe       	sbrs	r0, 7
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <SPI_write16+0x4>

	SPDR0 = LSdata;							// 	send Last 8 LS of data
  fa:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR0 & (1<<SPIF)));			//	while busy
  fc:	0d b4       	in	r0, 0x2d	; 45
  fe:	07 fe       	sbrs	r0, 7
 100:	fd cf       	rjmp	.-6      	; 0xfc <SPI_write16+0xc>

	SPI_PORT |= (1<<SPI_CS);				// 	Fsync High --> End of frame
 102:	2a 9a       	sbi	0x05, 2	; 5
 104:	08 95       	ret

00000106 <AD9833_init>:
// 	controlReg &= ~(1<<RESET);
// 	freqChange(100000,0); //initial frequency of 100kHz on Freq
// 	phaseChange(0,0); // initial phase of 0 deg
	// idk if i did the math here right or if it even matters;
	// this init sequence is maybe more efficient or something
	SPI_write16(INIT_RESET);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_write16>
	SPI_write16(INIT_RESET_B28);
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	91 e2       	ldi	r25, 0x21	; 33
 112:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_write16>
	SPI_write16(INIT_FREQ0_LSB);
 116:	8d e4       	ldi	r24, 0x4D	; 77
 118:	92 e6       	ldi	r25, 0x62	; 98
 11a:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_write16>
	SPI_write16(INIT_FREQ0_MSB);
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	90 e4       	ldi	r25, 0x40	; 64
 122:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_write16>
	SPI_write16(INIT_PHASE0);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 ec       	ldi	r25, 0xC0	; 192
 12a:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_write16>
	SPI_write16(INIT_GO);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_write16>
 136:	08 95       	ret

00000138 <freqChange>:
}


void freqChange(uint32_t freqOut, uint8_t select)  // take base10 frequency and do frequency hop
{
 138:	ff 92       	push	r15
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	f4 2e       	mov	r15, r20
	//freqReg = freq_out* 2^28/freq_mclk
	uint32_t freqReg = (freqOut * POW2_28)/MCLK;
 144:	05 2e       	mov	r0, r21
 146:	5c e1       	ldi	r21, 0x1C	; 28
 148:	66 0f       	add	r22, r22
 14a:	77 1f       	adc	r23, r23
 14c:	88 1f       	adc	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	5a 95       	dec	r21
 152:	d1 f7       	brne	.-12     	; 0x148 <freqChange+0x10>
 154:	50 2d       	mov	r21, r0
 156:	20 e4       	ldi	r18, 0x40	; 64
 158:	38 e7       	ldi	r19, 0x78	; 120
 15a:	4d e7       	ldi	r20, 0x7D	; 125
 15c:	51 e0       	ldi	r21, 0x01	; 1
 15e:	0e 94 b8 02 	call	0x570	; 0x570 <__udivmodsi4>
	uint16_t regLs = (freqReg & BITS14_MASK);
 162:	e9 01       	movw	r28, r18
 164:	df 73       	andi	r29, 0x3F	; 63
	uint16_t regMs = ((freqReg>>14) & BITS14_MASK);
 166:	da 01       	movw	r26, r20
 168:	c9 01       	movw	r24, r18
 16a:	07 2e       	mov	r0, r23
 16c:	7e e0       	ldi	r23, 0x0E	; 14
 16e:	b6 95       	lsr	r27
 170:	a7 95       	ror	r26
 172:	97 95       	ror	r25
 174:	87 95       	ror	r24
 176:	7a 95       	dec	r23
 178:	d1 f7       	brne	.-12     	; 0x16e <freqChange+0x36>
 17a:	70 2d       	mov	r23, r0
 17c:	8c 01       	movw	r16, r24
 17e:	1f 73       	andi	r17, 0x3F	; 63
	controlReg |= (1<<B28) | (1<<RESET);
 180:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 184:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 188:	91 62       	ori	r25, 0x21	; 33
 18a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 18e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	if (select == 0) {
 192:	f1 10       	cpse	r15, r1
 194:	0c c0       	rjmp	.+24     	; 0x1ae <freqChange+0x76>
		regLs |= FREQ0_D_MASK;
 196:	d0 64       	ori	r29, 0x40	; 64
		regMs |= FREQ0_D_MASK;
 198:	10 64       	ori	r17, 0x40	; 64
		controlReg &= ~(1<<FSELECT);
 19a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 19e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1a2:	97 7f       	andi	r25, 0xF7	; 247
 1a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1ac:	0e c0       	rjmp	.+28     	; 0x1ca <freqChange+0x92>
	}
	if (select == 1) {
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	f8 12       	cpse	r15, r24
 1b2:	0b c0       	rjmp	.+22     	; 0x1ca <freqChange+0x92>
		regLs |= FREQ1_D_MASK;
 1b4:	d0 68       	ori	r29, 0x80	; 128
		regMs |= FREQ1_D_MASK;
 1b6:	10 68       	ori	r17, 0x80	; 128
		controlReg |= (1<<FSELECT);
 1b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1c0:	98 60       	ori	r25, 0x08	; 8
 1c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	
	SPI_write16(controlReg);
 1ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1d2:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_write16>
	SPI_write16(regLs);
 1d6:	ce 01       	movw	r24, r28
 1d8:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_write16>
	SPI_write16(regMs);
 1dc:	c8 01       	movw	r24, r16
 1de:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_write16>
	controlReg &= ~(1<<RESET);
 1e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1ea:	9e 7f       	andi	r25, 0xFE	; 254
 1ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	SPI_write16(controlReg);
 1f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1fc:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_write16>
}
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	ff 90       	pop	r15
 20a:	08 95       	ret

0000020c <phaseChange>:

void phaseChange(uint16_t phaseShift, uint8_t select) {
 20c:	cf 93       	push	r28
 20e:	c6 2f       	mov	r28, r22
	uint16_t phaseReg = (phaseShift*POW2_12) / (2*PI);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	78 2f       	mov	r23, r24
 216:	72 95       	swap	r23
 218:	70 7f       	andi	r23, 0xF0	; 240
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 2a 02 	call	0x454	; 0x454 <__floatunsisf>
 222:	2b ed       	ldi	r18, 0xDB	; 219
 224:	3f e0       	ldi	r19, 0x0F	; 15
 226:	49 ec       	ldi	r20, 0xC9	; 201
 228:	50 e4       	ldi	r21, 0x40	; 64
 22a:	0e 94 89 01 	call	0x312	; 0x312 <__divsf3>
 22e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__fixunssfsi>
 232:	ab 01       	movw	r20, r22
	controlReg |= (1<<RESET);
 234:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 238:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 23c:	31 60       	ori	r19, 0x01	; 1
 23e:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 242:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
	
	if (select == 0) {
 246:	c1 11       	cpse	r28, r1
 248:	0b c0       	rjmp	.+22     	; 0x260 <phaseChange+0x54>
		phaseReg |= PHASE0_D_MASK;
 24a:	50 6c       	ori	r21, 0xC0	; 192
		controlReg &= ~(1<<PSELECT);
 24c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 250:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 254:	3b 7f       	andi	r19, 0xFB	; 251
 256:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 25a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 25e:	0d c0       	rjmp	.+26     	; 0x27a <phaseChange+0x6e>
	}
	if (select == 1) {
 260:	c1 30       	cpi	r28, 0x01	; 1
 262:	59 f4       	brne	.+22     	; 0x27a <phaseChange+0x6e>
		phaseReg |= PHASE1_D_MASK;
 264:	ab 01       	movw	r20, r22
 266:	50 6e       	ori	r21, 0xE0	; 224
		controlReg |= (1<<PSELECT);
 268:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 26c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 270:	34 60       	ori	r19, 0x04	; 4
 272:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 276:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
	}
	
	SPI_write16(phaseReg);
 27a:	ca 01       	movw	r24, r20
 27c:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_write16>
	controlReg &= ~(1<<RESET);
 280:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 284:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 288:	9e 7f       	andi	r25, 0xFE	; 254
 28a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 28e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
}
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <main>:

extern volatile uint16_t controlReg;

int main(void)
{
	SPI_init();
 296:	0e 94 6e 00 	call	0xdc	; 0xdc <SPI_init>
	AD9833_init();
 29a:	0e 94 83 00 	call	0x106	; 0x106 <AD9833_init>
// need 64 bit int (can shift by 3 i believe)

extern volatile uint16_t controlReg;

int main(void)
{
 29e:	c0 e1       	ldi	r28, 0x10	; 16
 2a0:	d7 e2       	ldi	r29, 0x27	; 39
	uint32_t freqOut = 0;
	uint16_t phaseOut = 0;
	while(1) {
		for (uint8_t i = 1; i < 255; i++) {
			freqOut = i*10000;
			freqChange(freqOut,0);
 2a2:	be 01       	movw	r22, r28
 2a4:	0d 2e       	mov	r0, r29
 2a6:	00 0c       	add	r0, r0
 2a8:	88 0b       	sbc	r24, r24
 2aa:	99 0b       	sbc	r25, r25
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	0e 94 9c 00 	call	0x138	; 0x138 <freqChange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	87 ea       	ldi	r24, 0xA7	; 167
 2b6:	91 e6       	ldi	r25, 0x61	; 97
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0x22>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x2c>
 2c2:	00 00       	nop
 2c4:	c0 5f       	subi	r28, 0xF0	; 240
 2c6:	d8 4d       	sbci	r29, 0xD8	; 216
	SPI_init();
	AD9833_init();
	uint32_t freqOut = 0;
	uint16_t phaseOut = 0;
	while(1) {
		for (uint8_t i = 1; i < 255; i++) {
 2c8:	c0 3f       	cpi	r28, 0xF0	; 240
 2ca:	28 ee       	ldi	r18, 0xE8	; 232
 2cc:	d2 07       	cpc	r29, r18
 2ce:	49 f7       	brne	.-46     	; 0x2a2 <main+0xc>
			freqOut = i*10000;
			freqChange(freqOut,0);
			_delay_ms(2000);
		}
		freqOut = 1000;
		freqChange(freqOut,0);
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	68 ee       	ldi	r22, 0xE8	; 232
 2d4:	73 e0       	ldi	r23, 0x03	; 3
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 9c 00 	call	0x138	; 0x138 <freqChange>
 2de:	c0 e0       	ldi	r28, 0x00	; 0
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
		for (uint8_t j = 0; j < 180; j++) {
			phaseOut = j*2;
			phaseChange(phaseOut,0);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	ce 01       	movw	r24, r28
 2e6:	0e 94 06 01 	call	0x20c	; 0x20c <phaseChange>
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	97 ea       	ldi	r25, 0xA7	; 167
 2ee:	21 e6       	ldi	r18, 0x61	; 97
 2f0:	81 50       	subi	r24, 0x01	; 1
 2f2:	90 40       	sbci	r25, 0x00	; 0
 2f4:	20 40       	sbci	r18, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <main+0x5a>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <main+0x64>
 2fa:	00 00       	nop
 2fc:	22 96       	adiw	r28, 0x02	; 2
			freqChange(freqOut,0);
			_delay_ms(2000);
		}
		freqOut = 1000;
		freqChange(freqOut,0);
		for (uint8_t j = 0; j < 180; j++) {
 2fe:	c8 36       	cpi	r28, 0x68	; 104
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	d8 07       	cpc	r29, r24
 304:	71 f7       	brne	.-36     	; 0x2e2 <main+0x4c>
			phaseOut = j*2;
			phaseChange(phaseOut,0);
			_delay_ms(2000);
		}
		phaseOut = 0;
		phaseChange(phaseOut,0);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 06 01 	call	0x20c	; 0x20c <phaseChange>
	}
 310:	c6 cf       	rjmp	.-116    	; 0x29e <main+0x8>

00000312 <__divsf3>:
 312:	0e 94 9d 01 	call	0x33a	; 0x33a <__divsf3x>
 316:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__fp_round>
 31a:	0e 94 77 02 	call	0x4ee	; 0x4ee <__fp_pscB>
 31e:	58 f0       	brcs	.+22     	; 0x336 <__divsf3+0x24>
 320:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fp_pscA>
 324:	40 f0       	brcs	.+16     	; 0x336 <__divsf3+0x24>
 326:	29 f4       	brne	.+10     	; 0x332 <__divsf3+0x20>
 328:	5f 3f       	cpi	r21, 0xFF	; 255
 32a:	29 f0       	breq	.+10     	; 0x336 <__divsf3+0x24>
 32c:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__fp_inf>
 330:	51 11       	cpse	r21, r1
 332:	0c 94 b2 02 	jmp	0x564	; 0x564 <__fp_szero>
 336:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__fp_nan>

0000033a <__divsf3x>:
 33a:	0e 94 8f 02 	call	0x51e	; 0x51e <__fp_split3>
 33e:	68 f3       	brcs	.-38     	; 0x31a <__divsf3+0x8>

00000340 <__divsf3_pse>:
 340:	99 23       	and	r25, r25
 342:	b1 f3       	breq	.-20     	; 0x330 <__divsf3+0x1e>
 344:	55 23       	and	r21, r21
 346:	91 f3       	breq	.-28     	; 0x32c <__divsf3+0x1a>
 348:	95 1b       	sub	r25, r21
 34a:	55 0b       	sbc	r21, r21
 34c:	bb 27       	eor	r27, r27
 34e:	aa 27       	eor	r26, r26
 350:	62 17       	cp	r22, r18
 352:	73 07       	cpc	r23, r19
 354:	84 07       	cpc	r24, r20
 356:	38 f0       	brcs	.+14     	; 0x366 <__divsf3_pse+0x26>
 358:	9f 5f       	subi	r25, 0xFF	; 255
 35a:	5f 4f       	sbci	r21, 0xFF	; 255
 35c:	22 0f       	add	r18, r18
 35e:	33 1f       	adc	r19, r19
 360:	44 1f       	adc	r20, r20
 362:	aa 1f       	adc	r26, r26
 364:	a9 f3       	breq	.-22     	; 0x350 <__divsf3_pse+0x10>
 366:	35 d0       	rcall	.+106    	; 0x3d2 <__divsf3_pse+0x92>
 368:	0e 2e       	mov	r0, r30
 36a:	3a f0       	brmi	.+14     	; 0x37a <__divsf3_pse+0x3a>
 36c:	e0 e8       	ldi	r30, 0x80	; 128
 36e:	32 d0       	rcall	.+100    	; 0x3d4 <__divsf3_pse+0x94>
 370:	91 50       	subi	r25, 0x01	; 1
 372:	50 40       	sbci	r21, 0x00	; 0
 374:	e6 95       	lsr	r30
 376:	00 1c       	adc	r0, r0
 378:	ca f7       	brpl	.-14     	; 0x36c <__divsf3_pse+0x2c>
 37a:	2b d0       	rcall	.+86     	; 0x3d2 <__divsf3_pse+0x92>
 37c:	fe 2f       	mov	r31, r30
 37e:	29 d0       	rcall	.+82     	; 0x3d2 <__divsf3_pse+0x92>
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	88 1f       	adc	r24, r24
 386:	bb 1f       	adc	r27, r27
 388:	26 17       	cp	r18, r22
 38a:	37 07       	cpc	r19, r23
 38c:	48 07       	cpc	r20, r24
 38e:	ab 07       	cpc	r26, r27
 390:	b0 e8       	ldi	r27, 0x80	; 128
 392:	09 f0       	breq	.+2      	; 0x396 <__divsf3_pse+0x56>
 394:	bb 0b       	sbc	r27, r27
 396:	80 2d       	mov	r24, r0
 398:	bf 01       	movw	r22, r30
 39a:	ff 27       	eor	r31, r31
 39c:	93 58       	subi	r25, 0x83	; 131
 39e:	5f 4f       	sbci	r21, 0xFF	; 255
 3a0:	3a f0       	brmi	.+14     	; 0x3b0 <__divsf3_pse+0x70>
 3a2:	9e 3f       	cpi	r25, 0xFE	; 254
 3a4:	51 05       	cpc	r21, r1
 3a6:	78 f0       	brcs	.+30     	; 0x3c6 <__divsf3_pse+0x86>
 3a8:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__fp_inf>
 3ac:	0c 94 b2 02 	jmp	0x564	; 0x564 <__fp_szero>
 3b0:	5f 3f       	cpi	r21, 0xFF	; 255
 3b2:	e4 f3       	brlt	.-8      	; 0x3ac <__divsf3_pse+0x6c>
 3b4:	98 3e       	cpi	r25, 0xE8	; 232
 3b6:	d4 f3       	brlt	.-12     	; 0x3ac <__divsf3_pse+0x6c>
 3b8:	86 95       	lsr	r24
 3ba:	77 95       	ror	r23
 3bc:	67 95       	ror	r22
 3be:	b7 95       	ror	r27
 3c0:	f7 95       	ror	r31
 3c2:	9f 5f       	subi	r25, 0xFF	; 255
 3c4:	c9 f7       	brne	.-14     	; 0x3b8 <__divsf3_pse+0x78>
 3c6:	88 0f       	add	r24, r24
 3c8:	91 1d       	adc	r25, r1
 3ca:	96 95       	lsr	r25
 3cc:	87 95       	ror	r24
 3ce:	97 f9       	bld	r25, 7
 3d0:	08 95       	ret
 3d2:	e1 e0       	ldi	r30, 0x01	; 1
 3d4:	66 0f       	add	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	88 1f       	adc	r24, r24
 3da:	bb 1f       	adc	r27, r27
 3dc:	62 17       	cp	r22, r18
 3de:	73 07       	cpc	r23, r19
 3e0:	84 07       	cpc	r24, r20
 3e2:	ba 07       	cpc	r27, r26
 3e4:	20 f0       	brcs	.+8      	; 0x3ee <__divsf3_pse+0xae>
 3e6:	62 1b       	sub	r22, r18
 3e8:	73 0b       	sbc	r23, r19
 3ea:	84 0b       	sbc	r24, r20
 3ec:	ba 0b       	sbc	r27, r26
 3ee:	ee 1f       	adc	r30, r30
 3f0:	88 f7       	brcc	.-30     	; 0x3d4 <__divsf3_pse+0x94>
 3f2:	e0 95       	com	r30
 3f4:	08 95       	ret

000003f6 <__fixunssfsi>:
 3f6:	0e 94 97 02 	call	0x52e	; 0x52e <__fp_splitA>
 3fa:	88 f0       	brcs	.+34     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3fc:	9f 57       	subi	r25, 0x7F	; 127
 3fe:	98 f0       	brcs	.+38     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 400:	b9 2f       	mov	r27, r25
 402:	99 27       	eor	r25, r25
 404:	b7 51       	subi	r27, 0x17	; 23
 406:	b0 f0       	brcs	.+44     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 408:	e1 f0       	breq	.+56     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	88 1f       	adc	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	1a f0       	brmi	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 414:	ba 95       	dec	r27
 416:	c9 f7       	brne	.-14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 418:	14 c0       	rjmp	.+40     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 41a:	b1 30       	cpi	r27, 0x01	; 1
 41c:	91 f0       	breq	.+36     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 41e:	0e 94 b1 02 	call	0x562	; 0x562 <__fp_zero>
 422:	b1 e0       	ldi	r27, 0x01	; 1
 424:	08 95       	ret
 426:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_zero>
 42a:	67 2f       	mov	r22, r23
 42c:	78 2f       	mov	r23, r24
 42e:	88 27       	eor	r24, r24
 430:	b8 5f       	subi	r27, 0xF8	; 248
 432:	39 f0       	breq	.+14     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 434:	b9 3f       	cpi	r27, 0xF9	; 249
 436:	cc f3       	brlt	.-14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 438:	86 95       	lsr	r24
 43a:	77 95       	ror	r23
 43c:	67 95       	ror	r22
 43e:	b3 95       	inc	r27
 440:	d9 f7       	brne	.-10     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 442:	3e f4       	brtc	.+14     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 444:	90 95       	com	r25
 446:	80 95       	com	r24
 448:	70 95       	com	r23
 44a:	61 95       	neg	r22
 44c:	7f 4f       	sbci	r23, 0xFF	; 255
 44e:	8f 4f       	sbci	r24, 0xFF	; 255
 450:	9f 4f       	sbci	r25, 0xFF	; 255
 452:	08 95       	ret

00000454 <__floatunsisf>:
 454:	e8 94       	clt
 456:	09 c0       	rjmp	.+18     	; 0x46a <__floatsisf+0x12>

00000458 <__floatsisf>:
 458:	97 fb       	bst	r25, 7
 45a:	3e f4       	brtc	.+14     	; 0x46a <__floatsisf+0x12>
 45c:	90 95       	com	r25
 45e:	80 95       	com	r24
 460:	70 95       	com	r23
 462:	61 95       	neg	r22
 464:	7f 4f       	sbci	r23, 0xFF	; 255
 466:	8f 4f       	sbci	r24, 0xFF	; 255
 468:	9f 4f       	sbci	r25, 0xFF	; 255
 46a:	99 23       	and	r25, r25
 46c:	a9 f0       	breq	.+42     	; 0x498 <__floatsisf+0x40>
 46e:	f9 2f       	mov	r31, r25
 470:	96 e9       	ldi	r25, 0x96	; 150
 472:	bb 27       	eor	r27, r27
 474:	93 95       	inc	r25
 476:	f6 95       	lsr	r31
 478:	87 95       	ror	r24
 47a:	77 95       	ror	r23
 47c:	67 95       	ror	r22
 47e:	b7 95       	ror	r27
 480:	f1 11       	cpse	r31, r1
 482:	f8 cf       	rjmp	.-16     	; 0x474 <__floatsisf+0x1c>
 484:	fa f4       	brpl	.+62     	; 0x4c4 <__floatsisf+0x6c>
 486:	bb 0f       	add	r27, r27
 488:	11 f4       	brne	.+4      	; 0x48e <__floatsisf+0x36>
 48a:	60 ff       	sbrs	r22, 0
 48c:	1b c0       	rjmp	.+54     	; 0x4c4 <__floatsisf+0x6c>
 48e:	6f 5f       	subi	r22, 0xFF	; 255
 490:	7f 4f       	sbci	r23, 0xFF	; 255
 492:	8f 4f       	sbci	r24, 0xFF	; 255
 494:	9f 4f       	sbci	r25, 0xFF	; 255
 496:	16 c0       	rjmp	.+44     	; 0x4c4 <__floatsisf+0x6c>
 498:	88 23       	and	r24, r24
 49a:	11 f0       	breq	.+4      	; 0x4a0 <__floatsisf+0x48>
 49c:	96 e9       	ldi	r25, 0x96	; 150
 49e:	11 c0       	rjmp	.+34     	; 0x4c2 <__floatsisf+0x6a>
 4a0:	77 23       	and	r23, r23
 4a2:	21 f0       	breq	.+8      	; 0x4ac <__floatsisf+0x54>
 4a4:	9e e8       	ldi	r25, 0x8E	; 142
 4a6:	87 2f       	mov	r24, r23
 4a8:	76 2f       	mov	r23, r22
 4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <__floatsisf+0x5e>
 4ac:	66 23       	and	r22, r22
 4ae:	71 f0       	breq	.+28     	; 0x4cc <__floatsisf+0x74>
 4b0:	96 e8       	ldi	r25, 0x86	; 134
 4b2:	86 2f       	mov	r24, r22
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	2a f0       	brmi	.+10     	; 0x4c4 <__floatsisf+0x6c>
 4ba:	9a 95       	dec	r25
 4bc:	66 0f       	add	r22, r22
 4be:	77 1f       	adc	r23, r23
 4c0:	88 1f       	adc	r24, r24
 4c2:	da f7       	brpl	.-10     	; 0x4ba <__floatsisf+0x62>
 4c4:	88 0f       	add	r24, r24
 4c6:	96 95       	lsr	r25
 4c8:	87 95       	ror	r24
 4ca:	97 f9       	bld	r25, 7
 4cc:	08 95       	ret

000004ce <__fp_inf>:
 4ce:	97 f9       	bld	r25, 7
 4d0:	9f 67       	ori	r25, 0x7F	; 127
 4d2:	80 e8       	ldi	r24, 0x80	; 128
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	08 95       	ret

000004da <__fp_nan>:
 4da:	9f ef       	ldi	r25, 0xFF	; 255
 4dc:	80 ec       	ldi	r24, 0xC0	; 192
 4de:	08 95       	ret

000004e0 <__fp_pscA>:
 4e0:	00 24       	eor	r0, r0
 4e2:	0a 94       	dec	r0
 4e4:	16 16       	cp	r1, r22
 4e6:	17 06       	cpc	r1, r23
 4e8:	18 06       	cpc	r1, r24
 4ea:	09 06       	cpc	r0, r25
 4ec:	08 95       	ret

000004ee <__fp_pscB>:
 4ee:	00 24       	eor	r0, r0
 4f0:	0a 94       	dec	r0
 4f2:	12 16       	cp	r1, r18
 4f4:	13 06       	cpc	r1, r19
 4f6:	14 06       	cpc	r1, r20
 4f8:	05 06       	cpc	r0, r21
 4fa:	08 95       	ret

000004fc <__fp_round>:
 4fc:	09 2e       	mov	r0, r25
 4fe:	03 94       	inc	r0
 500:	00 0c       	add	r0, r0
 502:	11 f4       	brne	.+4      	; 0x508 <__fp_round+0xc>
 504:	88 23       	and	r24, r24
 506:	52 f0       	brmi	.+20     	; 0x51c <__fp_round+0x20>
 508:	bb 0f       	add	r27, r27
 50a:	40 f4       	brcc	.+16     	; 0x51c <__fp_round+0x20>
 50c:	bf 2b       	or	r27, r31
 50e:	11 f4       	brne	.+4      	; 0x514 <__fp_round+0x18>
 510:	60 ff       	sbrs	r22, 0
 512:	04 c0       	rjmp	.+8      	; 0x51c <__fp_round+0x20>
 514:	6f 5f       	subi	r22, 0xFF	; 255
 516:	7f 4f       	sbci	r23, 0xFF	; 255
 518:	8f 4f       	sbci	r24, 0xFF	; 255
 51a:	9f 4f       	sbci	r25, 0xFF	; 255
 51c:	08 95       	ret

0000051e <__fp_split3>:
 51e:	57 fd       	sbrc	r21, 7
 520:	90 58       	subi	r25, 0x80	; 128
 522:	44 0f       	add	r20, r20
 524:	55 1f       	adc	r21, r21
 526:	59 f0       	breq	.+22     	; 0x53e <__fp_splitA+0x10>
 528:	5f 3f       	cpi	r21, 0xFF	; 255
 52a:	71 f0       	breq	.+28     	; 0x548 <__fp_splitA+0x1a>
 52c:	47 95       	ror	r20

0000052e <__fp_splitA>:
 52e:	88 0f       	add	r24, r24
 530:	97 fb       	bst	r25, 7
 532:	99 1f       	adc	r25, r25
 534:	61 f0       	breq	.+24     	; 0x54e <__fp_splitA+0x20>
 536:	9f 3f       	cpi	r25, 0xFF	; 255
 538:	79 f0       	breq	.+30     	; 0x558 <__fp_splitA+0x2a>
 53a:	87 95       	ror	r24
 53c:	08 95       	ret
 53e:	12 16       	cp	r1, r18
 540:	13 06       	cpc	r1, r19
 542:	14 06       	cpc	r1, r20
 544:	55 1f       	adc	r21, r21
 546:	f2 cf       	rjmp	.-28     	; 0x52c <__fp_split3+0xe>
 548:	46 95       	lsr	r20
 54a:	f1 df       	rcall	.-30     	; 0x52e <__fp_splitA>
 54c:	08 c0       	rjmp	.+16     	; 0x55e <__fp_splitA+0x30>
 54e:	16 16       	cp	r1, r22
 550:	17 06       	cpc	r1, r23
 552:	18 06       	cpc	r1, r24
 554:	99 1f       	adc	r25, r25
 556:	f1 cf       	rjmp	.-30     	; 0x53a <__fp_splitA+0xc>
 558:	86 95       	lsr	r24
 55a:	71 05       	cpc	r23, r1
 55c:	61 05       	cpc	r22, r1
 55e:	08 94       	sec
 560:	08 95       	ret

00000562 <__fp_zero>:
 562:	e8 94       	clt

00000564 <__fp_szero>:
 564:	bb 27       	eor	r27, r27
 566:	66 27       	eor	r22, r22
 568:	77 27       	eor	r23, r23
 56a:	cb 01       	movw	r24, r22
 56c:	97 f9       	bld	r25, 7
 56e:	08 95       	ret

00000570 <__udivmodsi4>:
 570:	a1 e2       	ldi	r26, 0x21	; 33
 572:	1a 2e       	mov	r1, r26
 574:	aa 1b       	sub	r26, r26
 576:	bb 1b       	sub	r27, r27
 578:	fd 01       	movw	r30, r26
 57a:	0d c0       	rjmp	.+26     	; 0x596 <__udivmodsi4_ep>

0000057c <__udivmodsi4_loop>:
 57c:	aa 1f       	adc	r26, r26
 57e:	bb 1f       	adc	r27, r27
 580:	ee 1f       	adc	r30, r30
 582:	ff 1f       	adc	r31, r31
 584:	a2 17       	cp	r26, r18
 586:	b3 07       	cpc	r27, r19
 588:	e4 07       	cpc	r30, r20
 58a:	f5 07       	cpc	r31, r21
 58c:	20 f0       	brcs	.+8      	; 0x596 <__udivmodsi4_ep>
 58e:	a2 1b       	sub	r26, r18
 590:	b3 0b       	sbc	r27, r19
 592:	e4 0b       	sbc	r30, r20
 594:	f5 0b       	sbc	r31, r21

00000596 <__udivmodsi4_ep>:
 596:	66 1f       	adc	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 1f       	adc	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	1a 94       	dec	r1
 5a0:	69 f7       	brne	.-38     	; 0x57c <__udivmodsi4_loop>
 5a2:	60 95       	com	r22
 5a4:	70 95       	com	r23
 5a6:	80 95       	com	r24
 5a8:	90 95       	com	r25
 5aa:	9b 01       	movw	r18, r22
 5ac:	ac 01       	movw	r20, r24
 5ae:	bd 01       	movw	r22, r26
 5b0:	cf 01       	movw	r24, r30
 5b2:	08 95       	ret

000005b4 <_exit>:
 5b4:	f8 94       	cli

000005b6 <__stop_program>:
 5b6:	ff cf       	rjmp	.-2      	; 0x5b6 <__stop_program>
