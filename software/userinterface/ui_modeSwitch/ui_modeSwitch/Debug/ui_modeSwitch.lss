
ui_modeSwitch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  0000067c  00000710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000067c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080017a  0080017a  0000078a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000191a  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d82  00000000  00000000  00002246  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd2  00000000  00000000  00002fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  00003b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000728  00000000  00000000  00003e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bda  00000000  00000000  00004594  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000516e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec e7       	ldi	r30, 0x7C	; 124
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	aa 37       	cpi	r26, 0x7A	; 122
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	aa e7       	ldi	r26, 0x7A	; 122
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ab 38       	cpi	r26, 0x8B	; 139
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 02 02 	call	0x404	; 0x404 <main>
  ea:	0c 94 3c 03 	jmp	0x678	; 0x678 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <I2C_WRITESEQ>:

{

    wr_lcd_mode(0x02, 0);
	_delay_ms(5);
    _lcd_x = _lcd_y = 0;
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	7b 01       	movw	r14, r22
 100:	14 2f       	mov	r17, r20
 102:	88 0f       	add	r24, r24
 104:	0e 94 c5 02 	call	0x58a	; 0x58a <i2c_start>
 108:	81 11       	cpse	r24, r1
 10a:	12 c0       	rjmp	.+36     	; 0x130 <I2C_WRITESEQ+0x3e>
 10c:	11 23       	and	r17, r17
 10e:	91 f0       	breq	.+36     	; 0x134 <I2C_WRITESEQ+0x42>
 110:	e7 01       	movw	r28, r14
 112:	11 50       	subi	r17, 0x01	; 1
 114:	01 2f       	mov	r16, r17
 116:	10 e0       	ldi	r17, 0x00	; 0
 118:	0f 5f       	subi	r16, 0xFF	; 255
 11a:	1f 4f       	sbci	r17, 0xFF	; 255
 11c:	0e 0d       	add	r16, r14
 11e:	1f 1d       	adc	r17, r15
 120:	89 91       	ld	r24, Y+
 122:	0e 94 f5 02 	call	0x5ea	; 0x5ea <i2c_write>
 126:	c0 17       	cp	r28, r16
 128:	d1 07       	cpc	r29, r17
 12a:	d1 f7       	brne	.-12     	; 0x120 <I2C_WRITESEQ+0x2e>
 12c:	c0 e0       	ldi	r28, 0x00	; 0
 12e:	03 c0       	rjmp	.+6      	; 0x136 <I2C_WRITESEQ+0x44>
 130:	c1 e0       	ldi	r28, 0x01	; 1
 132:	01 c0       	rjmp	.+2      	; 0x136 <I2C_WRITESEQ+0x44>
 134:	c0 e0       	ldi	r28, 0x00	; 0
 136:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <i2c_stop>
 13a:	8c 2f       	mov	r24, r28
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	ff 90       	pop	r15
 146:	ef 90       	pop	r14
 148:	08 95       	ret

0000014a <wr_lcd_mode>:
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	00 d0       	rcall	.+0      	; 0x154 <wr_lcd_mode+0xa>
 154:	00 d0       	rcall	.+0      	; 0x156 <wr_lcd_mode+0xc>
 156:	1f 92       	push	r1
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	08 2f       	mov	r16, r24
 15e:	68 30       	cpi	r22, 0x08	; 8
 160:	71 f4       	brne	.+28     	; 0x17e <wr_lcd_mode+0x34>
 162:	81 11       	cpse	r24, r1
 164:	02 c0       	rjmp	.+4      	; 0x16a <wr_lcd_mode+0x20>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	01 c0       	rjmp	.+2      	; 0x16c <wr_lcd_mode+0x22>
 16a:	88 e0       	ldi	r24, 0x08	; 8
 16c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	71 e0       	ldi	r23, 0x01	; 1
 176:	87 e2       	ldi	r24, 0x27	; 39
 178:	0e 94 79 00 	call	0xf2	; 0xf2 <I2C_WRITESEQ>
 17c:	26 c0       	rjmp	.+76     	; 0x1ca <wr_lcd_mode+0x80>
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 182:	16 2f       	mov	r17, r22
 184:	18 2b       	or	r17, r24
 186:	19 83       	std	Y+1, r17	; 0x01
 188:	80 2f       	mov	r24, r16
 18a:	80 7f       	andi	r24, 0xF0	; 240
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	81 2b       	or	r24, r17
 190:	8a 83       	std	Y+2, r24	; 0x02
 192:	8b 7f       	andi	r24, 0xFB	; 251
 194:	8b 83       	std	Y+3, r24	; 0x03
 196:	20 e1       	ldi	r18, 0x10	; 16
 198:	02 9f       	mul	r16, r18
 19a:	c0 01       	movw	r24, r0
 19c:	11 24       	eor	r1, r1
 19e:	81 2b       	or	r24, r17
 1a0:	84 60       	ori	r24, 0x04	; 4
 1a2:	8c 83       	std	Y+4, r24	; 0x04
 1a4:	8b 7f       	andi	r24, 0xFB	; 251
 1a6:	8d 83       	std	Y+5, r24	; 0x05
 1a8:	45 e0       	ldi	r20, 0x05	; 5
 1aa:	be 01       	movw	r22, r28
 1ac:	6f 5f       	subi	r22, 0xFF	; 255
 1ae:	7f 4f       	sbci	r23, 0xFF	; 255
 1b0:	87 e2       	ldi	r24, 0x27	; 39
 1b2:	0e 94 79 00 	call	0xf2	; 0xf2 <I2C_WRITESEQ>
 1b6:	10 fd       	sbrc	r17, 0
 1b8:	08 c0       	rjmp	.+16     	; 0x1ca <wr_lcd_mode+0x80>
 1ba:	03 30       	cpi	r16, 0x03	; 3
 1bc:	30 f4       	brcc	.+12     	; 0x1ca <wr_lcd_mode+0x80>
 1be:	e3 ef       	ldi	r30, 0xF3	; 243
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <wr_lcd_mode+0x78>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <wr_lcd_mode+0x7e>
 1c8:	00 00       	nop
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <lcd_gotoxy>:
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	d8 2f       	mov	r29, r24
 1e4:	c6 2f       	mov	r28, r22
 1e6:	e6 2f       	mov	r30, r22
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	e9 5e       	subi	r30, 0xE9	; 233
 1ec:	fe 4f       	sbci	r31, 0xFE	; 254
 1ee:	80 81       	ld	r24, Z
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	8d 0f       	add	r24, r29
 1f4:	0e 94 a5 00 	call	0x14a	; 0x14a <wr_lcd_mode>
 1f8:	8d ee       	ldi	r24, 0xED	; 237
 1fa:	92 e0       	ldi	r25, 0x02	; 2
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_gotoxy+0x1e>
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_gotoxy+0x24>
 202:	00 00       	nop
 204:	d0 93 89 01 	sts	0x0189, r29	; 0x800189 <_lcd_x>
 208:	c0 93 8a 01 	sts	0x018A, r28	; 0x80018a <_lcd_y>
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <lcd_clrscr>:
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 a5 00 	call	0x14a	; 0x14a <wr_lcd_mode>
 21a:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <_lcd_y>
 21e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <_lcd_x>
 222:	08 95       	ret

00000224 <lcd_putc>:

}

void lcd_putc(char c)

{
 224:	cf 93       	push	r28
 226:	c8 2f       	mov	r28, r24

    if (_lcd_x>=_lcd_maxx || c == '\n')
 228:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <_lcd_x>
 22c:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <_lcd_maxx>
 230:	98 17       	cp	r25, r24
 232:	18 f4       	brcc	.+6      	; 0x23a <lcd_putc+0x16>
 234:	ca 30       	cpi	r28, 0x0A	; 10
 236:	59 f4       	brne	.+22     	; 0x24e <lcd_putc+0x2a>
 238:	1a c0       	rjmp	.+52     	; 0x26e <lcd_putc+0x4a>

    {

        lcd_gotoxy(0,++_lcd_y);
 23a:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <_lcd_y>
 23e:	6f 5f       	subi	r22, 0xFF	; 255
 240:	60 93 8a 01 	sts	0x018A, r22	; 0x80018a <_lcd_y>
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_gotoxy>

    }

    if (c != '\n') {
 24a:	ca 30       	cpi	r28, 0x0A	; 10
 24c:	c1 f0       	breq	.+48     	; 0x27e <lcd_putc+0x5a>

        ++_lcd_x;
 24e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <_lcd_x>
 252:	8f 5f       	subi	r24, 0xFF	; 255
 254:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <_lcd_x>

        wr_lcd_mode(c, 1);
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	8c 2f       	mov	r24, r28
 25c:	0e 94 a5 00 	call	0x14a	; 0x14a <wr_lcd_mode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	8d ee       	ldi	r24, 0xED	; 237
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_putc+0x40>
 268:	00 c0       	rjmp	.+0      	; 0x26a <lcd_putc+0x46>
 26a:	00 00       	nop
		_delay_ms(3);

    }

}
 26c:	08 c0       	rjmp	.+16     	; 0x27e <lcd_putc+0x5a>

    if (_lcd_x>=_lcd_maxx || c == '\n')

    {

        lcd_gotoxy(0,++_lcd_y);
 26e:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <_lcd_y>
 272:	6f 5f       	subi	r22, 0xFF	; 255
 274:	60 93 8a 01 	sts	0x018A, r22	; 0x80018a <_lcd_y>
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_gotoxy>
        wr_lcd_mode(c, 1);
		_delay_ms(3);

    }

}
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <lcd_puts>:

// write the string str located in SRAM to the LCD

void lcd_puts(const char *str)

{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	ec 01       	movw	r28, r24

    while (*str) lcd_putc(*str++);
 288:	88 81       	ld	r24, Y
 28a:	88 23       	and	r24, r24
 28c:	31 f0       	breq	.+12     	; 0x29a <lcd_puts+0x18>
 28e:	21 96       	adiw	r28, 0x01	; 1
 290:	0e 94 12 01 	call	0x224	; 0x224 <lcd_putc>
 294:	89 91       	ld	r24, Y+
 296:	81 11       	cpse	r24, r1
 298:	fb cf       	rjmp	.-10     	; 0x290 <lcd_puts+0xe>

}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <getNextMode>:
	for (uint8_t i = x1; i < x2; i++) {
		lcd_gotoxy(i,y);
		lcd_puts(" ");
	}
	lcd_gotoxy(x1,y);
}
 2a0:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <mode>
 2a4:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <modeLast>
 2a8:	8f 5f       	subi	r24, 0xFF	; 255
 2aa:	83 70       	andi	r24, 0x03	; 3
 2ac:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <mode>
 2b0:	08 95       	ret

000002b2 <getPreviousMode>:
 2b2:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <mode>
 2b6:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <modeLast>
 2ba:	81 50       	subi	r24, 0x01	; 1
 2bc:	83 70       	andi	r24, 0x03	; 3
 2be:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <mode>
 2c2:	08 95       	ret

000002c4 <setRotaryStatus>:
 2c4:	86 b1       	in	r24, 0x06	; 6
 2c6:	81 70       	andi	r24, 0x01	; 1
 2c8:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <aState>
 2cc:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <rotation>
 2d0:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <aQuiescent>
 2d4:	89 17       	cp	r24, r25
 2d6:	49 f0       	breq	.+18     	; 0x2ea <setRotaryStatus+0x26>
 2d8:	96 b1       	in	r25, 0x06	; 6
 2da:	92 70       	andi	r25, 0x02	; 2
 2dc:	98 13       	cpse	r25, r24
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <setRotaryStatus+0x20>
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <setRotaryStatus+0x22>
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <rotation>
 2ea:	32 9b       	sbis	0x06, 2	; 6
 2ec:	06 c0       	rjmp	.+12     	; 0x2fa <setRotaryStatus+0x36>
 2ee:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <setVal>
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	89 27       	eor	r24, r25
 2f6:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <setVal>
 2fa:	08 95       	ret

000002fc <clearScreen>:
 2fc:	0e 94 09 01 	call	0x212	; 0x212 <lcd_clrscr>
 300:	8f e3       	ldi	r24, 0x3F	; 63
 302:	9c e9       	ldi	r25, 0x9C	; 156
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <clearScreen+0x8>
 308:	00 c0       	rjmp	.+0      	; 0x30a <clearScreen+0xe>
 30a:	00 00       	nop
 30c:	08 95       	ret

0000030e <clearLine>:
 30e:	68 2f       	mov	r22, r24
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_gotoxy>
 316:	8b e1       	ldi	r24, 0x1B	; 27
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 41 01 	call	0x282	; 0x282 <lcd_puts>
 31e:	08 95       	ret

00000320 <displayRefresh>:

void displayRefresh(void) {
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
 328:	2a 97       	sbiw	r28, 0x0a	; 10
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
	char val[10];
	if (mode != modeLast) {
 334:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <mode>
 338:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <modeLast>
 33c:	98 17       	cp	r25, r24
 33e:	71 f0       	breq	.+28     	; 0x35c <displayRefresh+0x3c>
		clearScreen();
 340:	0e 94 7e 01 	call	0x2fc	; 0x2fc <clearScreen>
		lcd_puts(labels[mode]);
 344:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <mode>
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	ee 0f       	add	r30, r30
 34c:	ff 1f       	adc	r31, r31
 34e:	e1 5f       	subi	r30, 0xF1	; 241
 350:	fe 4f       	sbci	r31, 0xFE	; 254
 352:	80 81       	ld	r24, Z
 354:	91 81       	ldd	r25, Z+1	; 0x01
 356:	0e 94 41 01 	call	0x282	; 0x282 <lcd_puts>
 35a:	03 c0       	rjmp	.+6      	; 0x362 <displayRefresh+0x42>
	}
	else
	clearLine(1);
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 87 01 	call	0x30e	; 0x30e <clearLine>
	lcd_gotoxy(0,1);
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_gotoxy>
	if (mode == MODE_SIGNAL)
 36a:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <mode>
 36e:	81 11       	cpse	r24, r1
 370:	0c c0       	rjmp	.+24     	; 0x38a <displayRefresh+0x6a>
	lcd_puts(signals[signal]);
 372:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <__data_end>
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	ee 0f       	add	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	ef 5f       	subi	r30, 0xFF	; 255
 37e:	fe 4f       	sbci	r31, 0xFE	; 254
 380:	80 81       	ld	r24, Z
 382:	91 81       	ldd	r25, Z+1	; 0x01
 384:	0e 94 41 01 	call	0x282	; 0x282 <lcd_puts>
 388:	34 c0       	rjmp	.+104    	; 0x3f2 <displayRefresh+0xd2>
	else {
		if (mode == MODE_VOLTAGE)
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	51 f4       	brne	.+20     	; 0x3a2 <displayRefresh+0x82>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 38e:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <voltage>
 392:	4a e0       	ldi	r20, 0x0A	; 10
 394:	be 01       	movw	r22, r28
 396:	6f 5f       	subi	r22, 0xFF	; 255
 398:	7f 4f       	sbci	r23, 0xFF	; 255
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 07 03 	call	0x60e	; 0x60e <__itoa_ncheck>
 3a0:	19 c0       	rjmp	.+50     	; 0x3d4 <displayRefresh+0xb4>
		itoa(voltage,val,10);
		else if (mode == MODE_FREQUENCY)
 3a2:	82 30       	cpi	r24, 0x02	; 2
 3a4:	59 f4       	brne	.+22     	; 0x3bc <displayRefresh+0x9c>
 3a6:	4a e0       	ldi	r20, 0x0A	; 10
 3a8:	be 01       	movw	r22, r28
 3aa:	6f 5f       	subi	r22, 0xFF	; 255
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255
 3ae:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <frequency>
 3b2:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <frequency+0x1>
 3b6:	0e 94 07 03 	call	0x60e	; 0x60e <__itoa_ncheck>
 3ba:	0c c0       	rjmp	.+24     	; 0x3d4 <displayRefresh+0xb4>
		itoa(frequency,val,10);
		else if (mode == MODE_PHASE)
 3bc:	83 30       	cpi	r24, 0x03	; 3
 3be:	51 f4       	brne	.+20     	; 0x3d4 <displayRefresh+0xb4>
 3c0:	4a e0       	ldi	r20, 0x0A	; 10
 3c2:	be 01       	movw	r22, r28
 3c4:	6f 5f       	subi	r22, 0xFF	; 255
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255
 3c8:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <phase>
 3cc:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <phase+0x1>
 3d0:	0e 94 07 03 	call	0x60e	; 0x60e <__itoa_ncheck>
		itoa(phase,val,10);
		lcd_puts(val);
 3d4:	ce 01       	movw	r24, r28
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	0e 94 41 01 	call	0x282	; 0x282 <lcd_puts>
		lcd_puts(units[mode-1]);
 3dc:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <mode>
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	ee 0f       	add	r30, r30
 3e4:	ff 1f       	adc	r31, r31
 3e6:	e9 5f       	subi	r30, 0xF9	; 249
 3e8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ea:	80 81       	ld	r24, Z
 3ec:	91 81       	ldd	r25, Z+1	; 0x01
 3ee:	0e 94 41 01 	call	0x282	; 0x282 <lcd_puts>
	}
 3f2:	2a 96       	adiw	r28, 0x0a	; 10
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	de bf       	out	0x3e, r29	; 62
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	cd bf       	out	0x3d, r28	; 61
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <main>:
uint8_t signal = 0;



int main(void) {
	ROTARY_DDR &= ~((1<<ROTARY_A) | (1<<ROTARY_B) | (1<<ROTARY_BUTTON)); // encoder pins and button set as input
 404:	87 b1       	in	r24, 0x07	; 7
 406:	88 7f       	andi	r24, 0xF8	; 248
 408:	87 b9       	out	0x07, r24	; 7
	ROTARY_PORT |= (1<<ROTARY_A) | (1<<ROTARY_B); // set pull-up resistors on encoder pins.
 40a:	88 b1       	in	r24, 0x08	; 8
 40c:	83 60       	ori	r24, 0x03	; 3
 40e:	88 b9       	out	0x08, r24	; 8
	aQuiescent = ROTARY_PIN & (1<<ROTARY_A);
 410:	86 b1       	in	r24, 0x06	; 6
 412:	81 70       	andi	r24, 0x01	; 1
 414:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <aQuiescent>
    while (1) {
		setRotaryStatus();
 418:	0e 94 62 01 	call	0x2c4	; 0x2c4 <setRotaryStatus>
		if (setVal) {
 41c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <setVal>
 420:	88 23       	and	r24, r24
 422:	09 f4       	brne	.+2      	; 0x426 <main+0x22>
 424:	96 c0       	rjmp	.+300    	; 0x552 <main+0x14e>
			switch(mode) {
 426:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <mode>
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	e1 f0       	breq	.+56     	; 0x466 <main+0x62>
 42e:	30 f0       	brcs	.+12     	; 0x43c <main+0x38>
 430:	82 30       	cpi	r24, 0x02	; 2
 432:	91 f1       	breq	.+100    	; 0x498 <main+0x94>
 434:	83 30       	cpi	r24, 0x03	; 3
 436:	09 f4       	brne	.+2      	; 0x43a <main+0x36>
 438:	6b c0       	rjmp	.+214    	; 0x510 <main+0x10c>
 43a:	96 c0       	rjmp	.+300    	; 0x568 <main+0x164>
				case MODE_SIGNAL:
					if (rotation == CLOCKWISE)
 43c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <rotation>
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	39 f4       	brne	.+14     	; 0x452 <main+0x4e>
						signal = (signal+1)&3;
 444:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
 448:	8f 5f       	subi	r24, 0xFF	; 255
 44a:	83 70       	andi	r24, 0x03	; 3
 44c:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
 450:	90 c0       	rjmp	.+288    	; 0x572 <main+0x16e>
					else if (rotation == COUNTERCLOCKWISE)
 452:	82 30       	cpi	r24, 0x02	; 2
 454:	09 f0       	breq	.+2      	; 0x458 <main+0x54>
 456:	88 c0       	rjmp	.+272    	; 0x568 <main+0x164>
						signal = (signal-1)&3;
 458:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
 45c:	81 50       	subi	r24, 0x01	; 1
 45e:	83 70       	andi	r24, 0x03	; 3
 460:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
 464:	86 c0       	rjmp	.+268    	; 0x572 <main+0x16e>
					break;
				case MODE_VOLTAGE:
					if ((rotation == CLOCKWISE) && (voltage < V_MAX)) {
 466:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <rotation>
 46a:	81 30       	cpi	r24, 0x01	; 1
 46c:	49 f4       	brne	.+18     	; 0x480 <main+0x7c>
 46e:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <voltage>
 472:	84 31       	cpi	r24, 0x14	; 20
 474:	08 f0       	brcs	.+2      	; 0x478 <main+0x74>
 476:	7d c0       	rjmp	.+250    	; 0x572 <main+0x16e>
						voltage++;
 478:	8f 5f       	subi	r24, 0xFF	; 255
 47a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <voltage>
 47e:	79 c0       	rjmp	.+242    	; 0x572 <main+0x16e>
					}
					else if ((rotation == COUNTERCLOCKWISE) && (voltage > V_MIN)) {
 480:	82 30       	cpi	r24, 0x02	; 2
 482:	09 f0       	breq	.+2      	; 0x486 <main+0x82>
 484:	71 c0       	rjmp	.+226    	; 0x568 <main+0x164>
 486:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <voltage>
 48a:	88 23       	and	r24, r24
 48c:	09 f4       	brne	.+2      	; 0x490 <main+0x8c>
 48e:	71 c0       	rjmp	.+226    	; 0x572 <main+0x16e>
						voltage--;
 490:	81 50       	subi	r24, 0x01	; 1
 492:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <voltage>
 496:	6d c0       	rjmp	.+218    	; 0x572 <main+0x16e>
					}
					break;
				case MODE_FREQUENCY:
					if ((rotation == CLOCKWISE) && (frequency < FREQ_MAX))
 498:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <rotation>
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	e1 f4       	brne	.+56     	; 0x4d8 <main+0xd4>
 4a0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <frequency>
 4a4:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <frequency+0x1>
 4a8:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <frequency+0x2>
 4ac:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <frequency+0x3>
 4b0:	80 34       	cpi	r24, 0x40	; 64
 4b2:	22 e4       	ldi	r18, 0x42	; 66
 4b4:	92 07       	cpc	r25, r18
 4b6:	2f e0       	ldi	r18, 0x0F	; 15
 4b8:	a2 07       	cpc	r26, r18
 4ba:	b1 05       	cpc	r27, r1
 4bc:	08 f0       	brcs	.+2      	; 0x4c0 <main+0xbc>
 4be:	59 c0       	rjmp	.+178    	; 0x572 <main+0x16e>
						frequency++;
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	a1 1d       	adc	r26, r1
 4c4:	b1 1d       	adc	r27, r1
 4c6:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <frequency>
 4ca:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <frequency+0x1>
 4ce:	a0 93 80 01 	sts	0x0180, r26	; 0x800180 <frequency+0x2>
 4d2:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <frequency+0x3>
 4d6:	4d c0       	rjmp	.+154    	; 0x572 <main+0x16e>
					else if ((rotation == COUNTERCLOCKWISE) && (frequency > FREQ_MIN))
 4d8:	82 30       	cpi	r24, 0x02	; 2
 4da:	09 f0       	breq	.+2      	; 0x4de <main+0xda>
 4dc:	45 c0       	rjmp	.+138    	; 0x568 <main+0x164>
 4de:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <frequency>
 4e2:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <frequency+0x1>
 4e6:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <frequency+0x2>
 4ea:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <frequency+0x3>
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	91 05       	cpc	r25, r1
 4f2:	a1 05       	cpc	r26, r1
 4f4:	b1 05       	cpc	r27, r1
 4f6:	e8 f1       	brcs	.+122    	; 0x572 <main+0x16e>
						frequency--;
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	a1 09       	sbc	r26, r1
 4fc:	b1 09       	sbc	r27, r1
 4fe:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <frequency>
 502:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <frequency+0x1>
 506:	a0 93 80 01 	sts	0x0180, r26	; 0x800180 <frequency+0x2>
 50a:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <frequency+0x3>
 50e:	31 c0       	rjmp	.+98     	; 0x572 <main+0x16e>
					break;
				case MODE_PHASE:
					if ((rotation == CLOCKWISE) && (phase < PHASE_MAX))
 510:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <rotation>
 514:	81 30       	cpi	r24, 0x01	; 1
 516:	69 f4       	brne	.+26     	; 0x532 <main+0x12e>
 518:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <phase>
 51c:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <phase+0x1>
 520:	84 3b       	cpi	r24, 0xB4	; 180
 522:	91 05       	cpc	r25, r1
 524:	30 f5       	brcc	.+76     	; 0x572 <main+0x16e>
						phase++;
 526:	01 96       	adiw	r24, 0x01	; 1
 528:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <phase+0x1>
 52c:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <phase>
 530:	20 c0       	rjmp	.+64     	; 0x572 <main+0x16e>
					else if ((rotation == COUNTERCLOCKWISE) && (phase > PHASE_MIN))
 532:	82 30       	cpi	r24, 0x02	; 2
 534:	c9 f4       	brne	.+50     	; 0x568 <main+0x164>
 536:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <phase>
 53a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <phase+0x1>
 53e:	8d 34       	cpi	r24, 0x4D	; 77
 540:	2f ef       	ldi	r18, 0xFF	; 255
 542:	92 07       	cpc	r25, r18
 544:	b0 f0       	brcs	.+44     	; 0x572 <main+0x16e>
						phase--;
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <phase+0x1>
 54c:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <phase>
 550:	10 c0       	rjmp	.+32     	; 0x572 <main+0x16e>
					break;
			}
		}
		else {
			if (rotation == CLOCKWISE)
 552:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <rotation>
 556:	81 30       	cpi	r24, 0x01	; 1
 558:	19 f4       	brne	.+6      	; 0x560 <main+0x15c>
				getNextMode();
 55a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <getNextMode>
 55e:	04 c0       	rjmp	.+8      	; 0x568 <main+0x164>
			else if (rotation == COUNTERCLOCKWISE)
 560:	82 30       	cpi	r24, 0x02	; 2
 562:	11 f4       	brne	.+4      	; 0x568 <main+0x164>
				getPreviousMode();
 564:	0e 94 59 01 	call	0x2b2	; 0x2b2 <getPreviousMode>
		}
		// display mode and value with units
		if (rotation != NO_ROTATION) {
 568:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <rotation>
 56c:	88 23       	and	r24, r24
 56e:	09 f4       	brne	.+2      	; 0x572 <main+0x16e>
 570:	53 cf       	rjmp	.-346    	; 0x418 <main+0x14>
			displayRefresh();
 572:	0e 94 90 01 	call	0x320	; 0x320 <displayRefresh>
 576:	8f ef       	ldi	r24, 0xFF	; 255
 578:	90 e7       	ldi	r25, 0x70	; 112
 57a:	22 e0       	ldi	r18, 0x02	; 2
 57c:	81 50       	subi	r24, 0x01	; 1
 57e:	90 40       	sbci	r25, 0x00	; 0
 580:	20 40       	sbci	r18, 0x00	; 0
 582:	e1 f7       	brne	.-8      	; 0x57c <main+0x178>
 584:	00 c0       	rjmp	.+0      	; 0x586 <main+0x182>
 586:	00 00       	nop
 588:	47 cf       	rjmp	.-370    	; 0x418 <main+0x14>

0000058a <i2c_start>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 58a:	94 ea       	ldi	r25, 0xA4	; 164
 58c:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 590:	ec ed       	ldi	r30, 0xDC	; 220
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	90 81       	ld	r25, Z
 596:	99 23       	and	r25, r25
 598:	ec f7       	brge	.-6      	; 0x594 <i2c_start+0xa>
 59a:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 59e:	98 7f       	andi	r25, 0xF8	; 248
 5a0:	98 30       	cpi	r25, 0x08	; 8
 5a2:	11 f0       	breq	.+4      	; 0x5a8 <i2c_start+0x1e>
 5a4:	90 31       	cpi	r25, 0x10	; 16
 5a6:	a1 f4       	brne	.+40     	; 0x5d0 <i2c_start+0x46>
 5a8:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 5ac:	84 e8       	ldi	r24, 0x84	; 132
 5ae:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 5b2:	ec ed       	ldi	r30, 0xDC	; 220
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	88 23       	and	r24, r24
 5ba:	ec f7       	brge	.-6      	; 0x5b6 <i2c_start+0x2c>
 5bc:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 5c0:	98 7f       	andi	r25, 0xF8	; 248
 5c2:	98 31       	cpi	r25, 0x18	; 24
 5c4:	39 f0       	breq	.+14     	; 0x5d4 <i2c_start+0x4a>
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 34       	cpi	r25, 0x40	; 64
 5ca:	29 f4       	brne	.+10     	; 0x5d6 <i2c_start+0x4c>
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	08 95       	ret
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	08 95       	ret
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	08 95       	ret

000005d8 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 5d8:	84 e9       	ldi	r24, 0x94	; 148
 5da:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	
	// wait until stop condition is executed and bus released
	while(TWCR1 & (1<<TWSTO));
 5de:	ec ed       	ldi	r30, 0xDC	; 220
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	84 fd       	sbrc	r24, 4
 5e6:	fd cf       	rjmp	.-6      	; 0x5e2 <i2c_stop+0xa>

}/* i2c_stop */
 5e8:	08 95       	ret

000005ea <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR1 = data;
 5ea:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	TWCR1 = (1<<TWINT) | (1<<TWEN);
 5ee:	84 e8       	ldi	r24, 0x84	; 132
 5f0:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

	// wait until transmission completed
	while(!(TWCR1 & (1<<TWINT)));
 5f4:	ec ed       	ldi	r30, 0xDC	; 220
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	80 81       	ld	r24, Z
 5fa:	88 23       	and	r24, r24
 5fc:	ec f7       	brge	.-6      	; 0x5f8 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TWSR1 & 0xF8;
 5fe:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 602:	98 7f       	andi	r25, 0xF8	; 248
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	98 32       	cpi	r25, 0x28	; 40
 608:	09 f4       	brne	.+2      	; 0x60c <i2c_write+0x22>
 60a:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 60c:	08 95       	ret

0000060e <__itoa_ncheck>:
 60e:	bb 27       	eor	r27, r27
 610:	4a 30       	cpi	r20, 0x0A	; 10
 612:	31 f4       	brne	.+12     	; 0x620 <__itoa_ncheck+0x12>
 614:	99 23       	and	r25, r25
 616:	22 f4       	brpl	.+8      	; 0x620 <__itoa_ncheck+0x12>
 618:	bd e2       	ldi	r27, 0x2D	; 45
 61a:	90 95       	com	r25
 61c:	81 95       	neg	r24
 61e:	9f 4f       	sbci	r25, 0xFF	; 255
 620:	0c 94 13 03 	jmp	0x626	; 0x626 <__utoa_common>

00000624 <__utoa_ncheck>:
 624:	bb 27       	eor	r27, r27

00000626 <__utoa_common>:
 626:	fb 01       	movw	r30, r22
 628:	55 27       	eor	r21, r21
 62a:	aa 27       	eor	r26, r26
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	aa 1f       	adc	r26, r26
 632:	a4 17       	cp	r26, r20
 634:	10 f0       	brcs	.+4      	; 0x63a <__utoa_common+0x14>
 636:	a4 1b       	sub	r26, r20
 638:	83 95       	inc	r24
 63a:	50 51       	subi	r21, 0x10	; 16
 63c:	b9 f7       	brne	.-18     	; 0x62c <__utoa_common+0x6>
 63e:	a0 5d       	subi	r26, 0xD0	; 208
 640:	aa 33       	cpi	r26, 0x3A	; 58
 642:	08 f0       	brcs	.+2      	; 0x646 <__utoa_common+0x20>
 644:	a9 5d       	subi	r26, 0xD9	; 217
 646:	a1 93       	st	Z+, r26
 648:	00 97       	sbiw	r24, 0x00	; 0
 64a:	79 f7       	brne	.-34     	; 0x62a <__utoa_common+0x4>
 64c:	b1 11       	cpse	r27, r1
 64e:	b1 93       	st	Z+, r27
 650:	11 92       	st	Z+, r1
 652:	cb 01       	movw	r24, r22
 654:	0c 94 2c 03 	jmp	0x658	; 0x658 <strrev>

00000658 <strrev>:
 658:	dc 01       	movw	r26, r24
 65a:	fc 01       	movw	r30, r24
 65c:	67 2f       	mov	r22, r23
 65e:	71 91       	ld	r23, Z+
 660:	77 23       	and	r23, r23
 662:	e1 f7       	brne	.-8      	; 0x65c <strrev+0x4>
 664:	32 97       	sbiw	r30, 0x02	; 2
 666:	04 c0       	rjmp	.+8      	; 0x670 <strrev+0x18>
 668:	7c 91       	ld	r23, X
 66a:	6d 93       	st	X+, r22
 66c:	70 83       	st	Z, r23
 66e:	62 91       	ld	r22, -Z
 670:	ae 17       	cp	r26, r30
 672:	bf 07       	cpc	r27, r31
 674:	c8 f3       	brcs	.-14     	; 0x668 <strrev+0x10>
 676:	08 95       	ret

00000678 <_exit>:
 678:	f8 94       	cli

0000067a <__stop_program>:
 67a:	ff cf       	rjmp	.-2      	; 0x67a <__stop_program>
