
AD9833_signalgen_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cee  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ee  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000447  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000564  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000260  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	ae 30       	cpi	r26, 0x0E	; 14
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 83 00 	call	0x106	; 0x106 <main>
  d4:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <SPI_init>:
Input:    none
Returns:  none
**************************************************************************/
void SPI_init (void)
{
	SPI_DDR |= (1<<SPI_CS) | (1<<SPI_MOSI) | (1<<SPI_SCK); // set SCK,MOSI,CS as Fsync 
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	8c 62       	ori	r24, 0x2C	; 44
  e0:	84 b9       	out	0x04, r24	; 4
	SPI_PORT |= (1<<SPI_CS) | (1<<SPI_SCK); // SCK and CS high
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	84 62       	ori	r24, 0x24	; 36
  e6:	85 b9       	out	0x05, r24	; 5
	SPCR0 |= (1<<SPE) | (1<<MSTR) | (1<<CPOL); // Enable SPI // Set Master mode //	Set clk to inv.
  e8:	8c b5       	in	r24, 0x2c	; 44
  ea:	88 65       	ori	r24, 0x58	; 88
  ec:	8c bd       	out	0x2c, r24	; 44
  ee:	08 95       	ret

000000f0 <SPI_write16>:
{

	unsigned char MSdata = ((data>>8) & 0x00FF);  	//filter out MS
	unsigned char LSdata = (data & 0x00FF);			//filter out LS

	SPI_PORT &= ~(1<<SPI_CS);				// 	Fsync Low --> begin frame
  f0:	2a 98       	cbi	0x05, 2	; 5
	
	SPDR0 = MSdata;							// 	send First 8 MS of data
  f2:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR0 & (1<<SPIF)));			//	while busy
  f4:	0d b4       	in	r0, 0x2d	; 45
  f6:	07 fe       	sbrs	r0, 7
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <SPI_write16+0x4>

	SPDR0 = LSdata;							// 	send Last 8 LS of data
  fa:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR0 & (1<<SPIF)));			//	while busy
  fc:	0d b4       	in	r0, 0x2d	; 45
  fe:	07 fe       	sbrs	r0, 7
 100:	fd cf       	rjmp	.-6      	; 0xfc <SPI_write16+0xc>

	SPI_PORT |= (1<<SPI_CS);				// 	Fsync High --> End of frame
 102:	2a 9a       	sbi	0x05, 2	; 5
 104:	08 95       	ret

00000106 <main>:
uint16_t fMsb = 0;
uint16_t fLsb = 0;

int main(void)
{
	SPI_init();
 106:	0e 94 6e 00 	call	0xdc	; 0xdc <SPI_init>
	controlReg |= (1<<B28) | (1<<RESET) | (1<<SLEEP12) | (1<<OPBITEN) | (1<<DIV2);
 10a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <controlReg>
 10e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <controlReg+0x1>
 112:	88 66       	ori	r24, 0x68	; 104
 114:	91 62       	ori	r25, 0x21	; 33
 116:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <controlReg+0x1>
 11a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <controlReg>
	freqOut = 500;
 11e:	44 ef       	ldi	r20, 0xF4	; 244
 120:	51 e0       	ldi	r21, 0x01	; 1
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <freqOut>
 12a:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <freqOut+0x1>
 12e:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <freqOut+0x2>
 132:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <freqOut+0x3>
	freqReg = freqOut * 10.73741824;
 136:	48 ef       	ldi	r20, 0xF8	; 248
 138:	54 e1       	ldi	r21, 0x14	; 20
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <freqReg>
 142:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <freqReg+0x1>
 146:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <freqReg+0x2>
 14a:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <freqReg+0x3>
	fMsb = ((freqReg>>14) & 0x3FFF) | FREQ0_D_MASK;
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e4       	ldi	r19, 0x40	; 64
 152:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <fMsb+0x1>
 156:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <fMsb>
	fLsb = (freqReg & 0x3FFF) | FREQ0_D_MASK;
 15a:	28 ef       	ldi	r18, 0xF8	; 248
 15c:	34 e5       	ldi	r19, 0x54	; 84
 15e:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 162:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
	SPI_write16(controlReg);
 166:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_write16>
	SPI_write16(fLsb);
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 172:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_write16>
	SPI_write16(fMsb);
 176:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <fMsb>
 17a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <fMsb+0x1>
 17e:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_write16>
	SPI_write16(controlReg&(~(1<<RESET)));
 182:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <controlReg>
 186:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <controlReg+0x1>
 18a:	9e 7f       	andi	r25, 0xFE	; 254
 18c:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_write16>
/*	AD9833_init();*/
// 	SPI_write16(0b0010000101101000);
// 	SPI_write16(0b0101100010010011);
// 	SPI_write16(0b0100000000010000);
// 	SPI_write16(0b0000000001101000);
}
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	08 95       	ret

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
