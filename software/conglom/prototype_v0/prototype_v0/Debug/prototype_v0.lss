
prototype_v0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00000df4  00000e88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000df4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080017e  0080017e  00000f06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f9b  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f99  00000000  00000000  000030e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001092  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  00005110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082f  00000000  00000000  000054f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e0a  00000000  00000000  00005d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00006b31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 ef       	ldi	r30, 0xF4	; 244
  c8:	fd e0       	ldi	r31, 0x0D	; 13
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ae 37       	cpi	r26, 0x7E	; 126
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ae e7       	ldi	r26, 0x7E	; 126
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a0 39       	cpi	r26, 0x90	; 144
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 16 03 	call	0x62c	; 0x62c <main>
  ea:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <SPI_init>:

extern volatile uint8_t signal;

void SPI_init (void)
{
	SPI_DDR |= (1<<SPI_CS) | (1<<SPI_MOSI) | (1<<SPI_SCK); // set SCK,MOSI,CS as Fsync 
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	8c 62       	ori	r24, 0x2C	; 44
  f6:	84 b9       	out	0x04, r24	; 4
	SPI_PORT |= (1<<SPI_CS) | (1<<SPI_SCK); // SCK and CS high
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	84 62       	ori	r24, 0x24	; 36
  fc:	85 b9       	out	0x05, r24	; 5
	SPCR0 |= (1<<SPE) | (1<<MSTR) | (1<<CPOL); // Enable SPI // Set Master mode //	Set clk to inv.
  fe:	8c b5       	in	r24, 0x2c	; 44
 100:	88 65       	ori	r24, 0x58	; 88
 102:	8c bd       	out	0x2c, r24	; 44
 104:	08 95       	ret

00000106 <SPI_write16>:
{

	unsigned char MSdata = ((data>>8) & 0x00FF);  	//filter out MS
	unsigned char LSdata = (data & 0x00FF);			//filter out LS

	SPI_PORT &= ~(1<<SPI_CS);				// 	Fsync Low --> begin frame
 106:	2a 98       	cbi	0x05, 2	; 5
	
	SPDR0 = MSdata;							// 	send First 8 MS of data
 108:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR0 & (1<<SPIF)));			//	while busy
 10a:	0d b4       	in	r0, 0x2d	; 45
 10c:	07 fe       	sbrs	r0, 7
 10e:	fd cf       	rjmp	.-6      	; 0x10a <SPI_write16+0x4>

	SPDR0 = LSdata;							// 	send Last 8 LS of data
 110:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR0 & (1<<SPIF)));			//	while busy
 112:	0d b4       	in	r0, 0x2d	; 45
 114:	07 fe       	sbrs	r0, 7
 116:	fd cf       	rjmp	.-6      	; 0x112 <SPI_write16+0xc>

	SPI_PORT |= (1<<SPI_CS);				// 	Fsync High --> End of frame
 118:	2a 9a       	sbi	0x05, 2	; 5
 11a:	08 95       	ret

0000011c <AD9833_init>:
// 	phaseChange(0,0); // initial phase of 0 deg
	// idk if i did the math here right or if it even matters;
	// this init sequence is maybe more efficient or something
	// just uncomment the above if it doesnt work
	// ... hopefully the above works
	SPI_write16(INIT_RESET);
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 83 00 	call	0x106	; 0x106 <SPI_write16>
	SPI_write16(INIT_RESET_B28);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	91 e2       	ldi	r25, 0x21	; 33
 128:	0e 94 83 00 	call	0x106	; 0x106 <SPI_write16>
	SPI_write16(INIT_FREQ0_LSB);
 12c:	8d e4       	ldi	r24, 0x4D	; 77
 12e:	92 e6       	ldi	r25, 0x62	; 98
 130:	0e 94 83 00 	call	0x106	; 0x106 <SPI_write16>
	SPI_write16(INIT_FREQ0_MSB);
 134:	81 e4       	ldi	r24, 0x41	; 65
 136:	90 e4       	ldi	r25, 0x40	; 64
 138:	0e 94 83 00 	call	0x106	; 0x106 <SPI_write16>
	SPI_write16(INIT_PHASE0);
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 ec       	ldi	r25, 0xC0	; 192
 140:	0e 94 83 00 	call	0x106	; 0x106 <SPI_write16>
	SPI_write16(INIT_GO);
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 83 00 	call	0x106	; 0x106 <SPI_write16>
 14c:	08 95       	ret

0000014e <freqChange>:
}


void freqChange(uint32_t freqOut, uint8_t select)  // take base10 frequency and do frequency hop
{
 14e:	ff 92       	push	r15
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	f4 2e       	mov	r15, r20
	//freqReg = freq_out* 2^28/freq_mclk
	uint32_t freqReg = (freqOut * POW2_28)/MCLK;
 15a:	05 2e       	mov	r0, r21
 15c:	5c e1       	ldi	r21, 0x1C	; 28
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	88 1f       	adc	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	5a 95       	dec	r21
 168:	d1 f7       	brne	.-12     	; 0x15e <freqChange+0x10>
 16a:	50 2d       	mov	r21, r0
 16c:	20 e4       	ldi	r18, 0x40	; 64
 16e:	38 e7       	ldi	r19, 0x78	; 120
 170:	4d e7       	ldi	r20, 0x7D	; 125
 172:	51 e0       	ldi	r21, 0x01	; 1
 174:	0e 94 a1 06 	call	0xd42	; 0xd42 <__udivmodsi4>
	uint16_t regLs = (freqReg & BITS14_MASK);
 178:	e9 01       	movw	r28, r18
 17a:	df 73       	andi	r29, 0x3F	; 63
	uint16_t regMs = ((freqReg>>14) & BITS14_MASK);
 17c:	da 01       	movw	r26, r20
 17e:	c9 01       	movw	r24, r18
 180:	07 2e       	mov	r0, r23
 182:	7e e0       	ldi	r23, 0x0E	; 14
 184:	b6 95       	lsr	r27
 186:	a7 95       	ror	r26
 188:	97 95       	ror	r25
 18a:	87 95       	ror	r24
 18c:	7a 95       	dec	r23
 18e:	d1 f7       	brne	.-12     	; 0x184 <freqChange+0x36>
 190:	70 2d       	mov	r23, r0
 192:	8c 01       	movw	r16, r24
 194:	1f 73       	andi	r17, 0x3F	; 63
	controlReg |= (1<<B28) | (1<<RESET);
 196:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 19a:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 19e:	91 62       	ori	r25, 0x21	; 33
 1a0:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 1a4:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
	
	if (select == 0) {
 1a8:	f1 10       	cpse	r15, r1
 1aa:	0c c0       	rjmp	.+24     	; 0x1c4 <freqChange+0x76>
		regLs |= FREQ0_D_MASK;
 1ac:	d0 64       	ori	r29, 0x40	; 64
		regMs |= FREQ0_D_MASK;
 1ae:	10 64       	ori	r17, 0x40	; 64
		controlReg &= ~(1<<FSELECT);
 1b0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 1b4:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 1b8:	97 7f       	andi	r25, 0xF7	; 247
 1ba:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 1be:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
 1c2:	0e c0       	rjmp	.+28     	; 0x1e0 <freqChange+0x92>
	}
	if (select == 1) {
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	f8 12       	cpse	r15, r24
 1c8:	0b c0       	rjmp	.+22     	; 0x1e0 <freqChange+0x92>
		regLs |= FREQ1_D_MASK;
 1ca:	d0 68       	ori	r29, 0x80	; 128
		regMs |= FREQ1_D_MASK;
 1cc:	10 68       	ori	r17, 0x80	; 128
		controlReg |= (1<<FSELECT);
 1ce:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 1d2:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 1d6:	98 60       	ori	r25, 0x08	; 8
 1d8:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 1dc:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
	}
	
	SPI_write16(controlReg);
 1e0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 1e4:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 1e8:	0e 94 83 00 	call	0x106	; 0x106 <SPI_write16>
	SPI_write16(regLs);
 1ec:	ce 01       	movw	r24, r28
 1ee:	0e 94 83 00 	call	0x106	; 0x106 <SPI_write16>
	SPI_write16(regMs);
 1f2:	c8 01       	movw	r24, r16
 1f4:	0e 94 83 00 	call	0x106	; 0x106 <SPI_write16>
	controlReg &= ~(1<<RESET);
 1f8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 1fc:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 200:	9e 7f       	andi	r25, 0xFE	; 254
 202:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 206:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
	SPI_write16(controlReg);
 20a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 20e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 212:	0e 94 83 00 	call	0x106	; 0x106 <SPI_write16>
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	ff 90       	pop	r15
 220:	08 95       	ret

00000222 <phaseChange>:

void phaseChange(uint16_t phaseShift, uint8_t select) {
 222:	cf 93       	push	r28
 224:	c6 2f       	mov	r28, r22
	uint16_t phaseReg = (phaseShift*POW2_12) / (2*PI);
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	78 2f       	mov	r23, r24
 22c:	72 95       	swap	r23
 22e:	70 7f       	andi	r23, 0xF0	; 240
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 13 06 	call	0xc26	; 0xc26 <__floatunsisf>
 238:	2b ed       	ldi	r18, 0xDB	; 219
 23a:	3f e0       	ldi	r19, 0x0F	; 15
 23c:	49 ec       	ldi	r20, 0xC9	; 201
 23e:	50 e4       	ldi	r21, 0x40	; 64
 240:	0e 94 72 05 	call	0xae4	; 0xae4 <__divsf3>
 244:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__fixunssfsi>
 248:	ab 01       	movw	r20, r22
	controlReg |= (1<<RESET);
 24a:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <__data_end>
 24e:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <__data_end+0x1>
 252:	31 60       	ori	r19, 0x01	; 1
 254:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <__data_end+0x1>
 258:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <__data_end>
	
	if (select == 0) {
 25c:	c1 11       	cpse	r28, r1
 25e:	0b c0       	rjmp	.+22     	; 0x276 <phaseChange+0x54>
		phaseReg |= PHASE0_D_MASK;
 260:	50 6c       	ori	r21, 0xC0	; 192
		controlReg &= ~(1<<PSELECT);
 262:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <__data_end>
 266:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <__data_end+0x1>
 26a:	3b 7f       	andi	r19, 0xFB	; 251
 26c:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <__data_end+0x1>
 270:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <__data_end>
 274:	0d c0       	rjmp	.+26     	; 0x290 <phaseChange+0x6e>
	}
	if (select == 1) {
 276:	c1 30       	cpi	r28, 0x01	; 1
 278:	59 f4       	brne	.+22     	; 0x290 <phaseChange+0x6e>
		phaseReg |= PHASE1_D_MASK;
 27a:	ab 01       	movw	r20, r22
 27c:	50 6e       	ori	r21, 0xE0	; 224
		controlReg |= (1<<PSELECT);
 27e:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <__data_end>
 282:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <__data_end+0x1>
 286:	34 60       	ori	r19, 0x04	; 4
 288:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <__data_end+0x1>
 28c:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <__data_end>
	}
	
	SPI_write16(phaseReg);
 290:	ca 01       	movw	r24, r20
 292:	0e 94 83 00 	call	0x106	; 0x106 <SPI_write16>
	controlReg &= ~(1<<RESET);
 296:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 29a:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 29e:	9e 7f       	andi	r25, 0xFE	; 254
 2a0:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 2a4:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
	
}
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <sineOut>:

void sineOut(void) {
	controlReg |= (1<<RESET);
 2ac:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 2b0:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 2b4:	91 60       	ori	r25, 0x01	; 1
 2b6:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 2ba:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
	controlReg &= ~((1<< SLEEP12) | (1<<OPBITEN) | (1<<MODE));
 2be:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 2c2:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 2c6:	8d 79       	andi	r24, 0x9D	; 157
 2c8:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 2cc:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
	SPI_write16(controlReg);
 2d0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 2d4:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 2d8:	0e 94 83 00 	call	0x106	; 0x106 <SPI_write16>
	controlReg &= ~(1<<RESET);
 2dc:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 2e0:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 2e4:	9e 7f       	andi	r25, 0xFE	; 254
 2e6:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 2ea:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
	SPI_write16(controlReg);
 2ee:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 2f2:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 2f6:	0e 94 83 00 	call	0x106	; 0x106 <SPI_write16>
 2fa:	08 95       	ret

000002fc <cosineOut>:
}

void cosineOut(uint8_t select) {
 2fc:	cf 93       	push	r28
 2fe:	c8 2f       	mov	r28, r24
	sineOut();
 300:	0e 94 56 01 	call	0x2ac	; 0x2ac <sineOut>
	phaseChange(90,select);
 304:	6c 2f       	mov	r22, r28
 306:	8a e5       	ldi	r24, 0x5A	; 90
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 11 01 	call	0x222	; 0x222 <phaseChange>
}
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <triangleOut>:

void triangleOut(void) {
	controlReg |= (1<<RESET) | (1<<MODE);
 312:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 316:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 31a:	82 60       	ori	r24, 0x02	; 2
 31c:	91 60       	ori	r25, 0x01	; 1
 31e:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 322:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
	controlReg &= ~((1<< SLEEP12) | (1<<OPBITEN));
 326:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 32a:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 32e:	8f 79       	andi	r24, 0x9F	; 159
 330:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 334:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
	SPI_write16(controlReg);
 338:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 33c:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 340:	0e 94 83 00 	call	0x106	; 0x106 <SPI_write16>
	controlReg &= ~(1<<RESET);
 344:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 348:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 34c:	9e 7f       	andi	r25, 0xFE	; 254
 34e:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 352:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
	SPI_write16(controlReg);
 356:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 35a:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 35e:	0e 94 83 00 	call	0x106	; 0x106 <SPI_write16>
 362:	08 95       	ret

00000364 <squareOut>:
}

void squareOut(void) {
	controlReg |= (1<<RESET) | (1<<SLEEP12) | (1<<OPBITEN) | (1<<DIV2);
 364:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 368:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 36c:	88 66       	ori	r24, 0x68	; 104
 36e:	91 60       	ori	r25, 0x01	; 1
 370:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 374:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
	controlReg &= ~(1<<MODE);
 378:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 37c:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 380:	8d 7f       	andi	r24, 0xFD	; 253
 382:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 386:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
	SPI_write16(controlReg);
 38a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 38e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 392:	0e 94 83 00 	call	0x106	; 0x106 <SPI_write16>
	controlReg &= ~(1<<RESET);
 396:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 39a:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 39e:	9e 7f       	andi	r25, 0xFE	; 254
 3a0:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 3a4:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
	SPI_write16(controlReg);
 3a8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 3ac:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 3b0:	0e 94 83 00 	call	0x106	; 0x106 <SPI_write16>
 3b4:	08 95       	ret

000003b6 <setSignalOut>:
}

void setSignalOut(void) {
	switch (signal) {
 3b6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <signal>
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	49 f0       	breq	.+18     	; 0x3d0 <setSignalOut+0x1a>
 3be:	28 f0       	brcs	.+10     	; 0x3ca <setSignalOut+0x14>
 3c0:	82 30       	cpi	r24, 0x02	; 2
 3c2:	51 f0       	breq	.+20     	; 0x3d8 <setSignalOut+0x22>
 3c4:	83 30       	cpi	r24, 0x03	; 3
 3c6:	59 f0       	breq	.+22     	; 0x3de <setSignalOut+0x28>
 3c8:	08 95       	ret
		case SIGNAL_SIN:
			sineOut();
 3ca:	0e 94 56 01 	call	0x2ac	; 0x2ac <sineOut>
			break;
 3ce:	08 95       	ret
		case SIGNAL_COS:
			cosineOut(0);
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <cosineOut>
			break;
 3d6:	08 95       	ret
		case SIGNAL_SQ:
			squareOut();
 3d8:	0e 94 b2 01 	call	0x364	; 0x364 <squareOut>
			break;
 3dc:	08 95       	ret
		case SIGNAL_TRI:
			triangleOut();
 3de:	0e 94 89 01 	call	0x312	; 0x312 <triangleOut>
 3e2:	08 95       	ret

000003e4 <I2C_WRITESEQ>:

void lcd_data(unsigned char data)

{

    wr_lcd_mode(data, 1);
 3e4:	ef 92       	push	r14
 3e6:	ff 92       	push	r15
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	7b 01       	movw	r14, r22
 3f2:	14 2f       	mov	r17, r20
 3f4:	88 0f       	add	r24, r24
 3f6:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <i2c_start>
 3fa:	81 11       	cpse	r24, r1
 3fc:	12 c0       	rjmp	.+36     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3fe:	11 23       	and	r17, r17
 400:	91 f0       	breq	.+36     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 402:	e7 01       	movw	r28, r14
 404:	11 50       	subi	r17, 0x01	; 1
 406:	01 2f       	mov	r16, r17
 408:	10 e0       	ldi	r17, 0x00	; 0
 40a:	0f 5f       	subi	r16, 0xFF	; 255
 40c:	1f 4f       	sbci	r17, 0xFF	; 255
 40e:	0e 0d       	add	r16, r14
 410:	1f 1d       	adc	r17, r15
 412:	89 91       	ld	r24, Y+
 414:	0e 94 aa 04 	call	0x954	; 0x954 <i2c_write>
 418:	c0 17       	cp	r28, r16
 41a:	d1 07       	cpc	r29, r17
 41c:	d1 f7       	brne	.-12     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41e:	c0 e0       	ldi	r28, 0x00	; 0
 420:	03 c0       	rjmp	.+6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 422:	c1 e0       	ldi	r28, 0x01	; 1
 424:	01 c0       	rjmp	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 426:	c0 e0       	ldi	r28, 0x00	; 0
 428:	0e 94 a1 04 	call	0x942	; 0x942 <i2c_stop>
 42c:	8c 2f       	mov	r24, r28
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	ff 90       	pop	r15
 438:	ef 90       	pop	r14
 43a:	08 95       	ret

0000043c <wr_lcd_mode>:
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	00 d0       	rcall	.+0      	; 0x446 <wr_lcd_mode+0xa>
 446:	00 d0       	rcall	.+0      	; 0x448 <wr_lcd_mode+0xc>
 448:	1f 92       	push	r1
 44a:	cd b7       	in	r28, 0x3d	; 61
 44c:	de b7       	in	r29, 0x3e	; 62
 44e:	08 2f       	mov	r16, r24
 450:	68 30       	cpi	r22, 0x08	; 8
 452:	71 f4       	brne	.+28     	; 0x470 <wr_lcd_mode+0x34>
 454:	81 11       	cpse	r24, r1
 456:	02 c0       	rjmp	.+4      	; 0x45c <wr_lcd_mode+0x20>
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	01 c0       	rjmp	.+2      	; 0x45e <wr_lcd_mode+0x22>
 45c:	88 e0       	ldi	r24, 0x08	; 8
 45e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	71 e0       	ldi	r23, 0x01	; 1
 468:	87 e2       	ldi	r24, 0x27	; 39
 46a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <I2C_WRITESEQ>
 46e:	26 c0       	rjmp	.+76     	; 0x4bc <wr_lcd_mode+0x80>
 470:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 474:	16 2f       	mov	r17, r22
 476:	18 2b       	or	r17, r24
 478:	19 83       	std	Y+1, r17	; 0x01
 47a:	80 2f       	mov	r24, r16
 47c:	80 7f       	andi	r24, 0xF0	; 240
 47e:	84 60       	ori	r24, 0x04	; 4
 480:	81 2b       	or	r24, r17
 482:	8a 83       	std	Y+2, r24	; 0x02
 484:	8b 7f       	andi	r24, 0xFB	; 251
 486:	8b 83       	std	Y+3, r24	; 0x03
 488:	20 e1       	ldi	r18, 0x10	; 16
 48a:	02 9f       	mul	r16, r18
 48c:	c0 01       	movw	r24, r0
 48e:	11 24       	eor	r1, r1
 490:	81 2b       	or	r24, r17
 492:	84 60       	ori	r24, 0x04	; 4
 494:	8c 83       	std	Y+4, r24	; 0x04
 496:	8b 7f       	andi	r24, 0xFB	; 251
 498:	8d 83       	std	Y+5, r24	; 0x05
 49a:	45 e0       	ldi	r20, 0x05	; 5
 49c:	be 01       	movw	r22, r28
 49e:	6f 5f       	subi	r22, 0xFF	; 255
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	87 e2       	ldi	r24, 0x27	; 39
 4a4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <I2C_WRITESEQ>
 4a8:	10 fd       	sbrc	r17, 0
 4aa:	08 c0       	rjmp	.+16     	; 0x4bc <wr_lcd_mode+0x80>
 4ac:	03 30       	cpi	r16, 0x03	; 3
 4ae:	30 f4       	brcc	.+12     	; 0x4bc <wr_lcd_mode+0x80>
 4b0:	e3 ef       	ldi	r30, 0xF3	; 243
 4b2:	f1 e0       	ldi	r31, 0x01	; 1
 4b4:	31 97       	sbiw	r30, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <wr_lcd_mode+0x78>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <wr_lcd_mode+0x7e>
 4ba:	00 00       	nop
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	0f 90       	pop	r0
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	1f 91       	pop	r17
 4cc:	0f 91       	pop	r16
 4ce:	08 95       	ret

000004d0 <lcd_gotoxy>:
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	d8 2f       	mov	r29, r24
 4d6:	c6 2f       	mov	r28, r22
 4d8:	e6 2f       	mov	r30, r22
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	e2 5e       	subi	r30, 0xE2	; 226
 4de:	fe 4f       	sbci	r31, 0xFE	; 254
 4e0:	80 81       	ld	r24, Z
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	8d 0f       	add	r24, r29
 4e6:	0e 94 1e 02 	call	0x43c	; 0x43c <wr_lcd_mode>
 4ea:	8d ee       	ldi	r24, 0xED	; 237
 4ec:	92 e0       	ldi	r25, 0x02	; 2
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <lcd_gotoxy+0x1e>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <lcd_gotoxy+0x24>
 4f4:	00 00       	nop
 4f6:	d0 93 8e 01 	sts	0x018E, r29	; 0x80018e <_lcd_x>
 4fa:	c0 93 8f 01 	sts	0x018F, r28	; 0x80018f <_lcd_y>
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <lcd_clrscr>:
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 1e 02 	call	0x43c	; 0x43c <wr_lcd_mode>
 50c:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <_lcd_y>
 510:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <_lcd_x>
 514:	08 95       	ret

00000516 <lcd_putc>:
 516:	cf 93       	push	r28
 518:	c8 2f       	mov	r28, r24
 51a:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <_lcd_x>
 51e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_lcd_maxx>
 522:	98 17       	cp	r25, r24
 524:	18 f4       	brcc	.+6      	; 0x52c <lcd_putc+0x16>
 526:	ca 30       	cpi	r28, 0x0A	; 10
 528:	59 f4       	brne	.+22     	; 0x540 <lcd_putc+0x2a>
 52a:	1a c0       	rjmp	.+52     	; 0x560 <lcd_putc+0x4a>
 52c:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <_lcd_y>
 530:	6f 5f       	subi	r22, 0xFF	; 255
 532:	60 93 8f 01 	sts	0x018F, r22	; 0x80018f <_lcd_y>
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	0e 94 68 02 	call	0x4d0	; 0x4d0 <lcd_gotoxy>
 53c:	ca 30       	cpi	r28, 0x0A	; 10
 53e:	c1 f0       	breq	.+48     	; 0x570 <lcd_putc+0x5a>
 540:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <_lcd_x>
 544:	8f 5f       	subi	r24, 0xFF	; 255
 546:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <_lcd_x>
 54a:	61 e0       	ldi	r22, 0x01	; 1
 54c:	8c 2f       	mov	r24, r28
 54e:	0e 94 1e 02 	call	0x43c	; 0x43c <wr_lcd_mode>
 552:	8d ee       	ldi	r24, 0xED	; 237
 554:	92 e0       	ldi	r25, 0x02	; 2
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <lcd_putc+0x40>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <lcd_putc+0x46>
 55c:	00 00       	nop
 55e:	08 c0       	rjmp	.+16     	; 0x570 <lcd_putc+0x5a>
 560:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <_lcd_y>
 564:	6f 5f       	subi	r22, 0xFF	; 255
 566:	60 93 8f 01 	sts	0x018F, r22	; 0x80018f <_lcd_y>
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <lcd_gotoxy>
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <lcd_puts>:
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	ec 01       	movw	r28, r24
 57a:	88 81       	ld	r24, Y
 57c:	88 23       	and	r24, r24
 57e:	31 f0       	breq	.+12     	; 0x58c <lcd_puts+0x18>
 580:	21 96       	adiw	r28, 0x01	; 1
 582:	0e 94 8b 02 	call	0x516	; 0x516 <lcd_putc>
 586:	89 91       	ld	r24, Y+
 588:	81 11       	cpse	r24, r1
 58a:	fb cf       	rjmp	.-10     	; 0x582 <lcd_puts+0xe>
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	08 95       	ret

00000592 <lcd_init>:

// initialize the LCD controller

void lcd_init(unsigned char command)

{
 592:	df 92       	push	r13
 594:	ef 92       	push	r14
 596:	ff 92       	push	r15
 598:	0f 93       	push	r16
 59a:	1f 93       	push	r17
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
 5a0:	00 d0       	rcall	.+0      	; 0x5a2 <lcd_init+0x10>
 5a2:	00 d0       	rcall	.+0      	; 0x5a4 <lcd_init+0x12>
 5a4:	00 d0       	rcall	.+0      	; 0x5a6 <lcd_init+0x14>
 5a6:	cd b7       	in	r28, 0x3d	; 61
 5a8:	de b7       	in	r29, 0x3e	; 62
 5aa:	d8 2e       	mov	r13, r24

    // High-Nibble von Byte 8 = Display Control:

    // 1DCB****  D: Disp on/off; C: Cursor on/off  B: blink on/off

    char init_sequenz[] = { 0x33, 0x32, 0x28, 0x0C, 0x06, 0x01 };
 5ac:	86 e0       	ldi	r24, 0x06	; 6
 5ae:	e8 e1       	ldi	r30, 0x18	; 24
 5b0:	f1 e0       	ldi	r31, 0x01	; 1
 5b2:	de 01       	movw	r26, r28
 5b4:	11 96       	adiw	r26, 0x01	; 1
 5b6:	01 90       	ld	r0, Z+
 5b8:	0d 92       	st	X+, r0
 5ba:	8a 95       	dec	r24
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <lcd_init+0x24>

    _lcd_maxx = LCD_DISP_LENGTH;
 5be:	84 e1       	ldi	r24, 0x14	; 20
 5c0:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <_lcd_maxx>

   // _base_y[2] = _base_y[0] + _lcd_maxx;

    //_base_y[3] = _base_y[1] + _lcd_maxx;

    I2C_INIT();
 5c4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c8:	8b e4       	ldi	r24, 0x4B	; 75
 5ca:	9d e1       	ldi	r25, 0x1D	; 29
 5cc:	01 97       	sbiw	r24, 0x01	; 1
 5ce:	f1 f7       	brne	.-4      	; 0x5cc <lcd_init+0x3a>
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <lcd_init+0x40>
 5d2:	00 00       	nop
 5d4:	8e 01       	movw	r16, r28
 5d6:	0f 5f       	subi	r16, 0xFF	; 255
 5d8:	1f 4f       	sbci	r17, 0xFF	; 255
 5da:	7e 01       	movw	r14, r28
 5dc:	97 e0       	ldi	r25, 0x07	; 7
 5de:	e9 0e       	add	r14, r25
 5e0:	f1 1c       	adc	r15, r1

    _delay_ms(30);               // 30 ms Delay nach power-up

    for (i = 0; i < sizeof(init_sequenz); i++) {

        wr_lcd_mode(init_sequenz[i], 0);
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	f8 01       	movw	r30, r16
 5e6:	81 91       	ld	r24, Z+
 5e8:	8f 01       	movw	r16, r30
 5ea:	0e 94 1e 02 	call	0x43c	; 0x43c <wr_lcd_mode>
 5ee:	81 ee       	ldi	r24, 0xE1	; 225
 5f0:	94 e0       	ldi	r25, 0x04	; 4
 5f2:	01 97       	sbiw	r24, 0x01	; 1
 5f4:	f1 f7       	brne	.-4      	; 0x5f2 <lcd_init+0x60>
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <lcd_init+0x66>
 5f8:	00 00       	nop

    I2C_INIT();

    _delay_ms(30);               // 30 ms Delay nach power-up

    for (i = 0; i < sizeof(init_sequenz); i++) {
 5fa:	0e 15       	cp	r16, r14
 5fc:	1f 05       	cpc	r17, r15
 5fe:	89 f7       	brne	.-30     	; 0x5e2 <lcd_init+0x50>

        _delay_ms(5);

    }

	wr_lcd_mode(command, 0);
 600:	60 e0       	ldi	r22, 0x00	; 0
 602:	8d 2d       	mov	r24, r13
 604:	0e 94 1e 02 	call	0x43c	; 0x43c <wr_lcd_mode>

}
 608:	26 96       	adiw	r28, 0x06	; 6
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	f8 94       	cli
 60e:	de bf       	out	0x3e, r29	; 62
 610:	0f be       	out	0x3f, r0	; 63
 612:	cd bf       	out	0x3d, r28	; 61
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	1f 91       	pop	r17
 61a:	0f 91       	pop	r16
 61c:	ff 90       	pop	r15
 61e:	ef 90       	pop	r14
 620:	df 90       	pop	r13
 622:	08 95       	ret

00000624 <lcd_backlight>:

void lcd_backlight(char on)

{

    wr_lcd_mode(on, 8);
 624:	68 e0       	ldi	r22, 0x08	; 8
 626:	0e 94 1e 02 	call	0x43c	; 0x43c <wr_lcd_mode>
 62a:	08 95       	ret

0000062c <main>:
extern volatile uint16_t controlReg;



int main(void) {
	uint8_t signalLast = signal;
 62c:	10 91 85 01 	lds	r17, 0x0185	; 0x800185 <signal>
	uint32_t freqLast = frequency;
 630:	c0 90 89 01 	lds	r12, 0x0189	; 0x800189 <frequency>
 634:	d0 90 8a 01 	lds	r13, 0x018A	; 0x80018a <frequency+0x1>
 638:	e0 90 8b 01 	lds	r14, 0x018B	; 0x80018b <frequency+0x2>
 63c:	f0 90 8c 01 	lds	r15, 0x018C	; 0x80018c <frequency+0x3>
	uint16_t phaseLast = phase;
 640:	c0 91 87 01 	lds	r28, 0x0187	; 0x800187 <phase>
 644:	d0 91 88 01 	lds	r29, 0x0188	; 0x800188 <phase+0x1>
	aQuiescent = ROTARY_PIN & (1<<ROTARY_A);
 648:	86 b1       	in	r24, 0x06	; 6
 64a:	81 70       	andi	r24, 0x01	; 1
 64c:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <aQuiescent>
	uiInit();
 650:	0e 94 4c 05 	call	0xa98	; 0xa98 <uiInit>
	SPI_init();
 654:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_init>
	AD9833_init();
 658:	0e 94 8e 00 	call	0x11c	; 0x11c <AD9833_init>
    while (1) {
		setRotaryStatus();
 65c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <setRotaryStatus>
		if (setVal) {
 660:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <setVal>
 664:	88 23       	and	r24, r24
 666:	09 f4       	brne	.+2      	; 0x66a <main+0x3e>
 668:	b6 c0       	rjmp	.+364    	; 0x7d6 <main+0x1aa>
			switch(mode) {
 66a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <mode>
 66e:	81 30       	cpi	r24, 0x01	; 1
 670:	f1 f0       	breq	.+60     	; 0x6ae <main+0x82>
 672:	30 f0       	brcs	.+12     	; 0x680 <main+0x54>
 674:	82 30       	cpi	r24, 0x02	; 2
 676:	c9 f1       	breq	.+114    	; 0x6ea <main+0xbe>
 678:	83 30       	cpi	r24, 0x03	; 3
 67a:	09 f4       	brne	.+2      	; 0x67e <main+0x52>
 67c:	81 c0       	rjmp	.+258    	; 0x780 <main+0x154>
 67e:	e3 c0       	rjmp	.+454    	; 0x846 <main+0x21a>
				case MODE_SIGNAL:
					if (rotation == CLOCKWISE)
 680:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rotation>
 684:	81 30       	cpi	r24, 0x01	; 1
 686:	39 f4       	brne	.+14     	; 0x696 <main+0x6a>
						signal = (signal+1)&3;
 688:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <signal>
 68c:	8f 5f       	subi	r24, 0xFF	; 255
 68e:	83 70       	andi	r24, 0x03	; 3
 690:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <signal>
 694:	d8 c0       	rjmp	.+432    	; 0x846 <main+0x21a>
					else if (rotation == COUNTERCLOCKWISE)
 696:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rotation>
 69a:	82 30       	cpi	r24, 0x02	; 2
 69c:	09 f0       	breq	.+2      	; 0x6a0 <main+0x74>
 69e:	d3 c0       	rjmp	.+422    	; 0x846 <main+0x21a>
						signal = (signal-1)&3;
 6a0:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <signal>
 6a4:	81 50       	subi	r24, 0x01	; 1
 6a6:	83 70       	andi	r24, 0x03	; 3
 6a8:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <signal>
 6ac:	cc c0       	rjmp	.+408    	; 0x846 <main+0x21a>
					break;
				case MODE_VOLTAGE:
					if ((rotation == CLOCKWISE) && (voltage < V_MAX)) {
 6ae:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rotation>
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	51 f4       	brne	.+20     	; 0x6ca <main+0x9e>
 6b6:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <voltage>
 6ba:	84 31       	cpi	r24, 0x14	; 20
 6bc:	34 f4       	brge	.+12     	; 0x6ca <main+0x9e>
						voltage++;
 6be:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <voltage>
 6c2:	8f 5f       	subi	r24, 0xFF	; 255
 6c4:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <voltage>
 6c8:	be c0       	rjmp	.+380    	; 0x846 <main+0x21a>
					}
					else if ((rotation == COUNTERCLOCKWISE) && (voltage > V_MIN)) {
 6ca:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rotation>
 6ce:	82 30       	cpi	r24, 0x02	; 2
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <main+0xa8>
 6d2:	b9 c0       	rjmp	.+370    	; 0x846 <main+0x21a>
 6d4:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <voltage>
 6d8:	8d 3e       	cpi	r24, 0xED	; 237
 6da:	0c f4       	brge	.+2      	; 0x6de <main+0xb2>
 6dc:	b4 c0       	rjmp	.+360    	; 0x846 <main+0x21a>
						voltage--;
 6de:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <voltage>
 6e2:	81 50       	subi	r24, 0x01	; 1
 6e4:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <voltage>
 6e8:	ae c0       	rjmp	.+348    	; 0x846 <main+0x21a>
					}
					break;
				case MODE_FREQUENCY:
					if ((rotation == CLOCKWISE) && (frequency < FREQ_MAX))
 6ea:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rotation>
 6ee:	81 30       	cpi	r24, 0x01	; 1
 6f0:	09 f5       	brne	.+66     	; 0x734 <main+0x108>
 6f2:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <frequency>
 6f6:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <frequency+0x1>
 6fa:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <frequency+0x2>
 6fe:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <frequency+0x3>
 702:	80 32       	cpi	r24, 0x20	; 32
 704:	9c 4b       	sbci	r25, 0xBC	; 188
 706:	ae 4b       	sbci	r26, 0xBE	; 190
 708:	b1 05       	cpc	r27, r1
 70a:	a0 f4       	brcc	.+40     	; 0x734 <main+0x108>
						frequency++;
 70c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <frequency>
 710:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <frequency+0x1>
 714:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <frequency+0x2>
 718:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <frequency+0x3>
 71c:	01 96       	adiw	r24, 0x01	; 1
 71e:	a1 1d       	adc	r26, r1
 720:	b1 1d       	adc	r27, r1
 722:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <frequency>
 726:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <frequency+0x1>
 72a:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <frequency+0x2>
 72e:	b0 93 8c 01 	sts	0x018C, r27	; 0x80018c <frequency+0x3>
 732:	89 c0       	rjmp	.+274    	; 0x846 <main+0x21a>
					else if ((rotation == COUNTERCLOCKWISE) && (frequency > FREQ_MIN))
 734:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rotation>
 738:	82 30       	cpi	r24, 0x02	; 2
 73a:	09 f0       	breq	.+2      	; 0x73e <main+0x112>
 73c:	84 c0       	rjmp	.+264    	; 0x846 <main+0x21a>
 73e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <frequency>
 742:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <frequency+0x1>
 746:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <frequency+0x2>
 74a:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <frequency+0x3>
 74e:	02 97       	sbiw	r24, 0x02	; 2
 750:	a1 05       	cpc	r26, r1
 752:	b1 05       	cpc	r27, r1
 754:	08 f4       	brcc	.+2      	; 0x758 <main+0x12c>
 756:	77 c0       	rjmp	.+238    	; 0x846 <main+0x21a>
						frequency--;
 758:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <frequency>
 75c:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <frequency+0x1>
 760:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <frequency+0x2>
 764:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <frequency+0x3>
 768:	01 97       	sbiw	r24, 0x01	; 1
 76a:	a1 09       	sbc	r26, r1
 76c:	b1 09       	sbc	r27, r1
 76e:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <frequency>
 772:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <frequency+0x1>
 776:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <frequency+0x2>
 77a:	b0 93 8c 01 	sts	0x018C, r27	; 0x80018c <frequency+0x3>
 77e:	63 c0       	rjmp	.+198    	; 0x846 <main+0x21a>
					break;
				case MODE_PHASE:
					if ((rotation == CLOCKWISE) && (phase < PHASE_MAX))
 780:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rotation>
 784:	81 30       	cpi	r24, 0x01	; 1
 786:	89 f4       	brne	.+34     	; 0x7aa <main+0x17e>
 788:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <phase>
 78c:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <phase+0x1>
 790:	88 36       	cpi	r24, 0x68	; 104
 792:	91 40       	sbci	r25, 0x01	; 1
 794:	50 f4       	brcc	.+20     	; 0x7aa <main+0x17e>
						phase++;
 796:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <phase>
 79a:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <phase+0x1>
 79e:	01 96       	adiw	r24, 0x01	; 1
 7a0:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <phase+0x1>
 7a4:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <phase>
 7a8:	4e c0       	rjmp	.+156    	; 0x846 <main+0x21a>
					else if ((rotation == COUNTERCLOCKWISE) && (phase > PHASE_MIN))
 7aa:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rotation>
 7ae:	82 30       	cpi	r24, 0x02	; 2
 7b0:	09 f0       	breq	.+2      	; 0x7b4 <main+0x188>
 7b2:	49 c0       	rjmp	.+146    	; 0x846 <main+0x21a>
 7b4:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <phase>
 7b8:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <phase+0x1>
 7bc:	89 2b       	or	r24, r25
 7be:	09 f4       	brne	.+2      	; 0x7c2 <main+0x196>
 7c0:	42 c0       	rjmp	.+132    	; 0x846 <main+0x21a>
						phase--;
 7c2:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <phase>
 7c6:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <phase+0x1>
 7ca:	01 97       	sbiw	r24, 0x01	; 1
 7cc:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <phase+0x1>
 7d0:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <phase>
 7d4:	38 c0       	rjmp	.+112    	; 0x846 <main+0x21a>
		else {
			/* DOES THIS GO HERE */
			/* Goal is to let user cycle through choices
			   and only change the signal output when the button
			   was pressed */
			if (signal != signalLast)
 7d6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <signal>
 7da:	18 13       	cpse	r17, r24
				setSignalOut();
 7dc:	0e 94 db 01 	call	0x3b6	; 0x3b6 <setSignalOut>
			if (frequency != freqLast)
 7e0:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <frequency>
 7e4:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <frequency+0x1>
 7e8:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <frequency+0x2>
 7ec:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <frequency+0x3>
 7f0:	c8 16       	cp	r12, r24
 7f2:	d9 06       	cpc	r13, r25
 7f4:	ea 06       	cpc	r14, r26
 7f6:	fb 06       	cpc	r15, r27
 7f8:	59 f0       	breq	.+22     	; 0x810 <main+0x1e4>
				freqChange(frequency,0);
 7fa:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <frequency>
 7fe:	70 91 8a 01 	lds	r23, 0x018A	; 0x80018a <frequency+0x1>
 802:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <frequency+0x2>
 806:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <frequency+0x3>
 80a:	40 e0       	ldi	r20, 0x00	; 0
 80c:	0e 94 a7 00 	call	0x14e	; 0x14e <freqChange>
			if (phase != phaseLast)
 810:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <phase>
 814:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <phase+0x1>
 818:	c8 17       	cp	r28, r24
 81a:	d9 07       	cpc	r29, r25
 81c:	39 f0       	breq	.+14     	; 0x82c <main+0x200>
				phaseChange(phase,0);
 81e:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <phase>
 822:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <phase+0x1>
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	0e 94 11 01 	call	0x222	; 0x222 <phaseChange>
			if (rotation == CLOCKWISE)
 82c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rotation>
 830:	81 30       	cpi	r24, 0x01	; 1
 832:	19 f4       	brne	.+6      	; 0x83a <main+0x20e>
				getNextMode();
 834:	0e 94 3e 04 	call	0x87c	; 0x87c <getNextMode>
 838:	06 c0       	rjmp	.+12     	; 0x846 <main+0x21a>
			else if (rotation == COUNTERCLOCKWISE)
 83a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rotation>
 83e:	82 30       	cpi	r24, 0x02	; 2
 840:	11 f4       	brne	.+4      	; 0x846 <main+0x21a>
				getPreviousMode();
 842:	0e 94 49 04 	call	0x892	; 0x892 <getPreviousMode>
		}
		// display mode and value with units
		if (rotation != NO_ROTATION)
 846:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rotation>
 84a:	81 11       	cpse	r24, r1
			displayRefresh();
 84c:	0e 94 ce 04 	call	0x99c	; 0x99c <displayRefresh>
		signalLast = signal;
 850:	10 91 85 01 	lds	r17, 0x0185	; 0x800185 <signal>
		freqLast = frequency;
 854:	c0 90 89 01 	lds	r12, 0x0189	; 0x800189 <frequency>
 858:	d0 90 8a 01 	lds	r13, 0x018A	; 0x80018a <frequency+0x1>
 85c:	e0 90 8b 01 	lds	r14, 0x018B	; 0x80018b <frequency+0x2>
 860:	f0 90 8c 01 	lds	r15, 0x018C	; 0x80018c <frequency+0x3>
		phaseLast = phase;
 864:	c0 91 87 01 	lds	r28, 0x0187	; 0x800187 <phase>
 868:	d0 91 88 01 	lds	r29, 0x0188	; 0x800188 <phase+0x1>
	}
 86c:	f7 ce       	rjmp	.-530    	; 0x65c <main+0x30>

0000086e <rotaryInit>:
volatile uint8_t aQuiescent = 0;
volatile uint8_t aState = 0;
volatile uint8_t rotation = 0;

void rotaryInit(void) {
	ROTARY_DDR &= ~((1<<ROTARY_A) | (1<<ROTARY_B) | (1<<ROTARY_BUTTON)); // encoder pins and button set as input
 86e:	87 b1       	in	r24, 0x07	; 7
 870:	88 7f       	andi	r24, 0xF8	; 248
 872:	87 b9       	out	0x07, r24	; 7
	ROTARY_PORT |= (1<<ROTARY_A) | (1<<ROTARY_B); // set pull-up resistors on encoder pins.
 874:	88 b1       	in	r24, 0x08	; 8
 876:	83 60       	ori	r24, 0x03	; 3
 878:	88 b9       	out	0x08, r24	; 8
 87a:	08 95       	ret

0000087c <getNextMode>:
}

void getNextMode(void) {
	modeLast = mode;
 87c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <mode>
 880:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <modeLast>
	mode = (mode+1)&3;
 884:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <mode>
 888:	8f 5f       	subi	r24, 0xFF	; 255
 88a:	83 70       	andi	r24, 0x03	; 3
 88c:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <mode>
 890:	08 95       	ret

00000892 <getPreviousMode>:
}

void getPreviousMode(void) {
	modeLast = mode;
 892:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <mode>
 896:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <modeLast>
	mode = (mode-1)&3;
 89a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <mode>
 89e:	81 50       	subi	r24, 0x01	; 1
 8a0:	83 70       	andi	r24, 0x03	; 3
 8a2:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <mode>
 8a6:	08 95       	ret

000008a8 <setRotaryStatus>:
}

void setRotaryStatus(void) {
	aState = ROTARY_PIN & (1<<ROTARY_A);
 8a8:	86 b1       	in	r24, 0x06	; 6
 8aa:	81 70       	andi	r24, 0x01	; 1
 8ac:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <aState>
	rotation = NO_ROTATION;
 8b0:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <rotation>
	if (aState != aQuiescent)
 8b4:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <aState>
 8b8:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <aQuiescent>
 8bc:	98 17       	cp	r25, r24
 8be:	59 f0       	breq	.+22     	; 0x8d6 <setRotaryStatus+0x2e>
		rotation = (ROTARY_PIN & (1<<ROTARY_B)) != aState ? COUNTERCLOCKWISE : CLOCKWISE;
 8c0:	86 b1       	in	r24, 0x06	; 6
 8c2:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <aState>
 8c6:	82 70       	andi	r24, 0x02	; 2
 8c8:	89 13       	cpse	r24, r25
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <setRotaryStatus+0x28>
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <setRotaryStatus+0x2a>
 8d0:	82 e0       	ldi	r24, 0x02	; 2
 8d2:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <rotation>
	if (ROTARY_PIN & (1<<ROTARY_BUTTON))
 8d6:	32 9b       	sbis	0x06, 2	; 6
 8d8:	06 c0       	rjmp	.+12     	; 0x8e6 <setRotaryStatus+0x3e>
		setVal ^= SET_VAL_FLAG;
 8da:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <setVal>
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	89 27       	eor	r24, r25
 8e2:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <setVal>
 8e6:	08 95       	ret

000008e8 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 8e8:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 8ec:	88 e4       	ldi	r24, 0x48	; 72
 8ee:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 8f2:	08 95       	ret

000008f4 <i2c_start>:
 8f4:	94 ea       	ldi	r25, 0xA4	; 164
 8f6:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 8fa:	ec ed       	ldi	r30, 0xDC	; 220
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	90 81       	ld	r25, Z
 900:	99 23       	and	r25, r25
 902:	ec f7       	brge	.-6      	; 0x8fe <i2c_start+0xa>
 904:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 908:	98 7f       	andi	r25, 0xF8	; 248
 90a:	98 30       	cpi	r25, 0x08	; 8
 90c:	11 f0       	breq	.+4      	; 0x912 <__stack+0x13>
 90e:	90 31       	cpi	r25, 0x10	; 16
 910:	a1 f4       	brne	.+40     	; 0x93a <__stack+0x3b>
 912:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 916:	84 e8       	ldi	r24, 0x84	; 132
 918:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 91c:	ec ed       	ldi	r30, 0xDC	; 220
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	80 81       	ld	r24, Z
 922:	88 23       	and	r24, r24
 924:	ec f7       	brge	.-6      	; 0x920 <__stack+0x21>
 926:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 92a:	98 7f       	andi	r25, 0xF8	; 248
 92c:	98 31       	cpi	r25, 0x18	; 24
 92e:	39 f0       	breq	.+14     	; 0x93e <__stack+0x3f>
 930:	81 e0       	ldi	r24, 0x01	; 1
 932:	90 34       	cpi	r25, 0x40	; 64
 934:	29 f4       	brne	.+10     	; 0x940 <__stack+0x41>
 936:	80 e0       	ldi	r24, 0x00	; 0
 938:	08 95       	ret
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	08 95       	ret
 93e:	80 e0       	ldi	r24, 0x00	; 0
 940:	08 95       	ret

00000942 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 942:	84 e9       	ldi	r24, 0x94	; 148
 944:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	
	// wait until stop condition is executed and bus released
	while(TWCR1 & (1<<TWSTO));
 948:	ec ed       	ldi	r30, 0xDC	; 220
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	80 81       	ld	r24, Z
 94e:	84 fd       	sbrc	r24, 4
 950:	fd cf       	rjmp	.-6      	; 0x94c <i2c_stop+0xa>

}/* i2c_stop */
 952:	08 95       	ret

00000954 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR1 = data;
 954:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	TWCR1 = (1<<TWINT) | (1<<TWEN);
 958:	84 e8       	ldi	r24, 0x84	; 132
 95a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

	// wait until transmission completed
	while(!(TWCR1 & (1<<TWINT)));
 95e:	ec ed       	ldi	r30, 0xDC	; 220
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	80 81       	ld	r24, Z
 964:	88 23       	and	r24, r24
 966:	ec f7       	brge	.-6      	; 0x962 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TWSR1 & 0xF8;
 968:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 96c:	98 7f       	andi	r25, 0xF8	; 248
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	98 32       	cpi	r25, 0x28	; 40
 972:	09 f4       	brne	.+2      	; 0x976 <i2c_write+0x22>
 974:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 976:	08 95       	ret

00000978 <clearScreen>:
	for (uint8_t i = x1; i < x2; i++) {
		lcd_gotoxy(i,y);
		lcd_puts(" ");
	}
	lcd_gotoxy(x1,y);
}
 978:	0e 94 82 02 	call	0x504	; 0x504 <lcd_clrscr>
 97c:	8f e3       	ldi	r24, 0x3F	; 63
 97e:	9c e9       	ldi	r25, 0x9C	; 156
 980:	01 97       	sbiw	r24, 0x01	; 1
 982:	f1 f7       	brne	.-4      	; 0x980 <clearScreen+0x8>
 984:	00 c0       	rjmp	.+0      	; 0x986 <clearScreen+0xe>
 986:	00 00       	nop
 988:	08 95       	ret

0000098a <clearLine>:
 98a:	68 2f       	mov	r22, r24
 98c:	80 e0       	ldi	r24, 0x00	; 0
 98e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <lcd_gotoxy>
 992:	82 e2       	ldi	r24, 0x22	; 34
 994:	91 e0       	ldi	r25, 0x01	; 1
 996:	0e 94 ba 02 	call	0x574	; 0x574 <lcd_puts>
 99a:	08 95       	ret

0000099c <displayRefresh>:

void displayRefresh(void) {
 99c:	cf 93       	push	r28
 99e:	df 93       	push	r29
 9a0:	cd b7       	in	r28, 0x3d	; 61
 9a2:	de b7       	in	r29, 0x3e	; 62
 9a4:	2a 97       	sbiw	r28, 0x0a	; 10
 9a6:	0f b6       	in	r0, 0x3f	; 63
 9a8:	f8 94       	cli
 9aa:	de bf       	out	0x3e, r29	; 62
 9ac:	0f be       	out	0x3f, r0	; 63
 9ae:	cd bf       	out	0x3d, r28	; 61
	char val[10];
	if (mode != modeLast) {
 9b0:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <mode>
 9b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <modeLast>
 9b8:	98 17       	cp	r25, r24
 9ba:	71 f0       	breq	.+28     	; 0x9d8 <displayRefresh+0x3c>
		clearScreen();
 9bc:	0e 94 bc 04 	call	0x978	; 0x978 <clearScreen>
		lcd_puts(labels[mode]);
 9c0:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <mode>
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	ee 0f       	add	r30, r30
 9c8:	ff 1f       	adc	r31, r31
 9ca:	e0 5f       	subi	r30, 0xF0	; 240
 9cc:	fe 4f       	sbci	r31, 0xFE	; 254
 9ce:	80 81       	ld	r24, Z
 9d0:	91 81       	ldd	r25, Z+1	; 0x01
 9d2:	0e 94 ba 02 	call	0x574	; 0x574 <lcd_puts>
 9d6:	03 c0       	rjmp	.+6      	; 0x9de <displayRefresh+0x42>
	}
	else
		clearLine(1);
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	0e 94 c5 04 	call	0x98a	; 0x98a <clearLine>
	lcd_gotoxy(0,1);
 9de:	61 e0       	ldi	r22, 0x01	; 1
 9e0:	80 e0       	ldi	r24, 0x00	; 0
 9e2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <lcd_gotoxy>
	if (mode == MODE_SIGNAL)
 9e6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <mode>
 9ea:	81 11       	cpse	r24, r1
 9ec:	0c c0       	rjmp	.+24     	; 0xa06 <displayRefresh+0x6a>
		lcd_puts(signals[signal]);
 9ee:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <signal>
 9f2:	f0 e0       	ldi	r31, 0x00	; 0
 9f4:	ee 0f       	add	r30, r30
 9f6:	ff 1f       	adc	r31, r31
 9f8:	ee 5f       	subi	r30, 0xFE	; 254
 9fa:	fe 4f       	sbci	r31, 0xFE	; 254
 9fc:	80 81       	ld	r24, Z
 9fe:	91 81       	ldd	r25, Z+1	; 0x01
 a00:	0e 94 ba 02 	call	0x574	; 0x574 <lcd_puts>
 a04:	40 c0       	rjmp	.+128    	; 0xa86 <displayRefresh+0xea>
	else {
		if (mode == MODE_VOLTAGE)
 a06:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <mode>
 a0a:	81 30       	cpi	r24, 0x01	; 1
 a0c:	61 f4       	brne	.+24     	; 0xa26 <displayRefresh+0x8a>
			itoa(voltage,val,10);
 a0e:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <voltage>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 a12:	4a e0       	ldi	r20, 0x0A	; 10
 a14:	be 01       	movw	r22, r28
 a16:	6f 5f       	subi	r22, 0xFF	; 255
 a18:	7f 4f       	sbci	r23, 0xFF	; 255
 a1a:	08 2e       	mov	r0, r24
 a1c:	00 0c       	add	r0, r0
 a1e:	99 0b       	sbc	r25, r25
 a20:	0e 94 c3 06 	call	0xd86	; 0xd86 <__itoa_ncheck>
 a24:	21 c0       	rjmp	.+66     	; 0xa68 <displayRefresh+0xcc>
		else if (mode == MODE_FREQUENCY)
 a26:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <mode>
 a2a:	82 30       	cpi	r24, 0x02	; 2
 a2c:	79 f4       	brne	.+30     	; 0xa4c <displayRefresh+0xb0>
			itoa(frequency,val,10);
 a2e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <frequency>
 a32:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <frequency+0x1>
 a36:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <frequency+0x2>
 a3a:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <frequency+0x3>
 a3e:	4a e0       	ldi	r20, 0x0A	; 10
 a40:	be 01       	movw	r22, r28
 a42:	6f 5f       	subi	r22, 0xFF	; 255
 a44:	7f 4f       	sbci	r23, 0xFF	; 255
 a46:	0e 94 c3 06 	call	0xd86	; 0xd86 <__itoa_ncheck>
 a4a:	0e c0       	rjmp	.+28     	; 0xa68 <displayRefresh+0xcc>
		else if (mode == MODE_PHASE)
 a4c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <mode>
 a50:	83 30       	cpi	r24, 0x03	; 3
 a52:	51 f4       	brne	.+20     	; 0xa68 <displayRefresh+0xcc>
			itoa(phase,val,10);
 a54:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <phase>
 a58:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <phase+0x1>
 a5c:	4a e0       	ldi	r20, 0x0A	; 10
 a5e:	be 01       	movw	r22, r28
 a60:	6f 5f       	subi	r22, 0xFF	; 255
 a62:	7f 4f       	sbci	r23, 0xFF	; 255
 a64:	0e 94 c3 06 	call	0xd86	; 0xd86 <__itoa_ncheck>
		lcd_puts(val);
 a68:	ce 01       	movw	r24, r28
 a6a:	01 96       	adiw	r24, 0x01	; 1
 a6c:	0e 94 ba 02 	call	0x574	; 0x574 <lcd_puts>
		lcd_puts(units[mode-1]);
 a70:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <mode>
 a74:	f0 e0       	ldi	r31, 0x00	; 0
 a76:	ee 0f       	add	r30, r30
 a78:	ff 1f       	adc	r31, r31
 a7a:	e8 5f       	subi	r30, 0xF8	; 248
 a7c:	fe 4f       	sbci	r31, 0xFE	; 254
 a7e:	80 81       	ld	r24, Z
 a80:	91 81       	ldd	r25, Z+1	; 0x01
 a82:	0e 94 ba 02 	call	0x574	; 0x574 <lcd_puts>
	}
	val[0] = '\0';
 a86:	2a 96       	adiw	r28, 0x0a	; 10
 a88:	0f b6       	in	r0, 0x3f	; 63
 a8a:	f8 94       	cli
 a8c:	de bf       	out	0x3e, r29	; 62
 a8e:	0f be       	out	0x3f, r0	; 63
 a90:	cd bf       	out	0x3d, r28	; 61
 a92:	df 91       	pop	r29
 a94:	cf 91       	pop	r28
 a96:	08 95       	ret

00000a98 <uiInit>:

extern volatile uint8_t mode;
extern volatile uint8_t modeLast;

void uiInit(void) {
	rotaryInit();
 a98:	0e 94 37 04 	call	0x86e	; 0x86e <rotaryInit>
	LCD_I2C_DDR &= ~((1<<LCD_I2C_SCL) | (1<<LCD_I2C_SDA));
 a9c:	8d b1       	in	r24, 0x0d	; 13
 a9e:	8c 7f       	andi	r24, 0xFC	; 252
 aa0:	8d b9       	out	0x0d, r24	; 13
	LCD_I2C_PORT |= (1<<LCD_I2C_SCL) | (1<<LCD_I2C_SDA);
 aa2:	8e b1       	in	r24, 0x0e	; 14
 aa4:	83 60       	ori	r24, 0x03	; 3
 aa6:	8e b9       	out	0x0e, r24	; 14
	lcd_init(LCD_ON_DISPLAY);
 aa8:	82 e0       	ldi	r24, 0x02	; 2
 aaa:	0e 94 c9 02 	call	0x592	; 0x592 <lcd_init>
	lcd_backlight(0);
 aae:	80 e0       	ldi	r24, 0x00	; 0
 ab0:	0e 94 12 03 	call	0x624	; 0x624 <lcd_backlight>
 ab4:	2f ef       	ldi	r18, 0xFF	; 255
 ab6:	89 e6       	ldi	r24, 0x69	; 105
 ab8:	98 e1       	ldi	r25, 0x18	; 24
 aba:	21 50       	subi	r18, 0x01	; 1
 abc:	80 40       	sbci	r24, 0x00	; 0
 abe:	90 40       	sbci	r25, 0x00	; 0
 ac0:	e1 f7       	brne	.-8      	; 0xaba <uiInit+0x22>
 ac2:	00 c0       	rjmp	.+0      	; 0xac4 <uiInit+0x2c>
 ac4:	00 00       	nop
	_delay_ms(500);
	lcd_backlight(1);
 ac6:	81 e0       	ldi	r24, 0x01	; 1
 ac8:	0e 94 12 03 	call	0x624	; 0x624 <lcd_backlight>
 acc:	2f ef       	ldi	r18, 0xFF	; 255
 ace:	89 e6       	ldi	r24, 0x69	; 105
 ad0:	98 e1       	ldi	r25, 0x18	; 24
 ad2:	21 50       	subi	r18, 0x01	; 1
 ad4:	80 40       	sbci	r24, 0x00	; 0
 ad6:	90 40       	sbci	r25, 0x00	; 0
 ad8:	e1 f7       	brne	.-8      	; 0xad2 <uiInit+0x3a>
 ada:	00 c0       	rjmp	.+0      	; 0xadc <uiInit+0x44>
 adc:	00 00       	nop
	_delay_ms(500);
	displayRefresh();
 ade:	0e 94 ce 04 	call	0x99c	; 0x99c <displayRefresh>
 ae2:	08 95       	ret

00000ae4 <__divsf3>:
 ae4:	0e 94 86 05 	call	0xb0c	; 0xb0c <__divsf3x>
 ae8:	0c 94 67 06 	jmp	0xcce	; 0xcce <__fp_round>
 aec:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fp_pscB>
 af0:	58 f0       	brcs	.+22     	; 0xb08 <__divsf3+0x24>
 af2:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fp_pscA>
 af6:	40 f0       	brcs	.+16     	; 0xb08 <__divsf3+0x24>
 af8:	29 f4       	brne	.+10     	; 0xb04 <__divsf3+0x20>
 afa:	5f 3f       	cpi	r21, 0xFF	; 255
 afc:	29 f0       	breq	.+10     	; 0xb08 <__divsf3+0x24>
 afe:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__fp_inf>
 b02:	51 11       	cpse	r21, r1
 b04:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_szero>
 b08:	0c 94 56 06 	jmp	0xcac	; 0xcac <__fp_nan>

00000b0c <__divsf3x>:
 b0c:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__fp_split3>
 b10:	68 f3       	brcs	.-38     	; 0xaec <__divsf3+0x8>

00000b12 <__divsf3_pse>:
 b12:	99 23       	and	r25, r25
 b14:	b1 f3       	breq	.-20     	; 0xb02 <__divsf3+0x1e>
 b16:	55 23       	and	r21, r21
 b18:	91 f3       	breq	.-28     	; 0xafe <__divsf3+0x1a>
 b1a:	95 1b       	sub	r25, r21
 b1c:	55 0b       	sbc	r21, r21
 b1e:	bb 27       	eor	r27, r27
 b20:	aa 27       	eor	r26, r26
 b22:	62 17       	cp	r22, r18
 b24:	73 07       	cpc	r23, r19
 b26:	84 07       	cpc	r24, r20
 b28:	38 f0       	brcs	.+14     	; 0xb38 <__divsf3_pse+0x26>
 b2a:	9f 5f       	subi	r25, 0xFF	; 255
 b2c:	5f 4f       	sbci	r21, 0xFF	; 255
 b2e:	22 0f       	add	r18, r18
 b30:	33 1f       	adc	r19, r19
 b32:	44 1f       	adc	r20, r20
 b34:	aa 1f       	adc	r26, r26
 b36:	a9 f3       	breq	.-22     	; 0xb22 <__divsf3_pse+0x10>
 b38:	35 d0       	rcall	.+106    	; 0xba4 <__divsf3_pse+0x92>
 b3a:	0e 2e       	mov	r0, r30
 b3c:	3a f0       	brmi	.+14     	; 0xb4c <__divsf3_pse+0x3a>
 b3e:	e0 e8       	ldi	r30, 0x80	; 128
 b40:	32 d0       	rcall	.+100    	; 0xba6 <__divsf3_pse+0x94>
 b42:	91 50       	subi	r25, 0x01	; 1
 b44:	50 40       	sbci	r21, 0x00	; 0
 b46:	e6 95       	lsr	r30
 b48:	00 1c       	adc	r0, r0
 b4a:	ca f7       	brpl	.-14     	; 0xb3e <__divsf3_pse+0x2c>
 b4c:	2b d0       	rcall	.+86     	; 0xba4 <__divsf3_pse+0x92>
 b4e:	fe 2f       	mov	r31, r30
 b50:	29 d0       	rcall	.+82     	; 0xba4 <__divsf3_pse+0x92>
 b52:	66 0f       	add	r22, r22
 b54:	77 1f       	adc	r23, r23
 b56:	88 1f       	adc	r24, r24
 b58:	bb 1f       	adc	r27, r27
 b5a:	26 17       	cp	r18, r22
 b5c:	37 07       	cpc	r19, r23
 b5e:	48 07       	cpc	r20, r24
 b60:	ab 07       	cpc	r26, r27
 b62:	b0 e8       	ldi	r27, 0x80	; 128
 b64:	09 f0       	breq	.+2      	; 0xb68 <__divsf3_pse+0x56>
 b66:	bb 0b       	sbc	r27, r27
 b68:	80 2d       	mov	r24, r0
 b6a:	bf 01       	movw	r22, r30
 b6c:	ff 27       	eor	r31, r31
 b6e:	93 58       	subi	r25, 0x83	; 131
 b70:	5f 4f       	sbci	r21, 0xFF	; 255
 b72:	3a f0       	brmi	.+14     	; 0xb82 <__divsf3_pse+0x70>
 b74:	9e 3f       	cpi	r25, 0xFE	; 254
 b76:	51 05       	cpc	r21, r1
 b78:	78 f0       	brcs	.+30     	; 0xb98 <__divsf3_pse+0x86>
 b7a:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__fp_inf>
 b7e:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_szero>
 b82:	5f 3f       	cpi	r21, 0xFF	; 255
 b84:	e4 f3       	brlt	.-8      	; 0xb7e <__divsf3_pse+0x6c>
 b86:	98 3e       	cpi	r25, 0xE8	; 232
 b88:	d4 f3       	brlt	.-12     	; 0xb7e <__divsf3_pse+0x6c>
 b8a:	86 95       	lsr	r24
 b8c:	77 95       	ror	r23
 b8e:	67 95       	ror	r22
 b90:	b7 95       	ror	r27
 b92:	f7 95       	ror	r31
 b94:	9f 5f       	subi	r25, 0xFF	; 255
 b96:	c9 f7       	brne	.-14     	; 0xb8a <__divsf3_pse+0x78>
 b98:	88 0f       	add	r24, r24
 b9a:	91 1d       	adc	r25, r1
 b9c:	96 95       	lsr	r25
 b9e:	87 95       	ror	r24
 ba0:	97 f9       	bld	r25, 7
 ba2:	08 95       	ret
 ba4:	e1 e0       	ldi	r30, 0x01	; 1
 ba6:	66 0f       	add	r22, r22
 ba8:	77 1f       	adc	r23, r23
 baa:	88 1f       	adc	r24, r24
 bac:	bb 1f       	adc	r27, r27
 bae:	62 17       	cp	r22, r18
 bb0:	73 07       	cpc	r23, r19
 bb2:	84 07       	cpc	r24, r20
 bb4:	ba 07       	cpc	r27, r26
 bb6:	20 f0       	brcs	.+8      	; 0xbc0 <__divsf3_pse+0xae>
 bb8:	62 1b       	sub	r22, r18
 bba:	73 0b       	sbc	r23, r19
 bbc:	84 0b       	sbc	r24, r20
 bbe:	ba 0b       	sbc	r27, r26
 bc0:	ee 1f       	adc	r30, r30
 bc2:	88 f7       	brcc	.-30     	; 0xba6 <__divsf3_pse+0x94>
 bc4:	e0 95       	com	r30
 bc6:	08 95       	ret

00000bc8 <__fixunssfsi>:
 bc8:	0e 94 80 06 	call	0xd00	; 0xd00 <__fp_splitA>
 bcc:	88 f0       	brcs	.+34     	; 0xbf0 <__fixunssfsi+0x28>
 bce:	9f 57       	subi	r25, 0x7F	; 127
 bd0:	98 f0       	brcs	.+38     	; 0xbf8 <__fixunssfsi+0x30>
 bd2:	b9 2f       	mov	r27, r25
 bd4:	99 27       	eor	r25, r25
 bd6:	b7 51       	subi	r27, 0x17	; 23
 bd8:	b0 f0       	brcs	.+44     	; 0xc06 <__fixunssfsi+0x3e>
 bda:	e1 f0       	breq	.+56     	; 0xc14 <__fixunssfsi+0x4c>
 bdc:	66 0f       	add	r22, r22
 bde:	77 1f       	adc	r23, r23
 be0:	88 1f       	adc	r24, r24
 be2:	99 1f       	adc	r25, r25
 be4:	1a f0       	brmi	.+6      	; 0xbec <__fixunssfsi+0x24>
 be6:	ba 95       	dec	r27
 be8:	c9 f7       	brne	.-14     	; 0xbdc <__fixunssfsi+0x14>
 bea:	14 c0       	rjmp	.+40     	; 0xc14 <__fixunssfsi+0x4c>
 bec:	b1 30       	cpi	r27, 0x01	; 1
 bee:	91 f0       	breq	.+36     	; 0xc14 <__fixunssfsi+0x4c>
 bf0:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_zero>
 bf4:	b1 e0       	ldi	r27, 0x01	; 1
 bf6:	08 95       	ret
 bf8:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__fp_zero>
 bfc:	67 2f       	mov	r22, r23
 bfe:	78 2f       	mov	r23, r24
 c00:	88 27       	eor	r24, r24
 c02:	b8 5f       	subi	r27, 0xF8	; 248
 c04:	39 f0       	breq	.+14     	; 0xc14 <__fixunssfsi+0x4c>
 c06:	b9 3f       	cpi	r27, 0xF9	; 249
 c08:	cc f3       	brlt	.-14     	; 0xbfc <__fixunssfsi+0x34>
 c0a:	86 95       	lsr	r24
 c0c:	77 95       	ror	r23
 c0e:	67 95       	ror	r22
 c10:	b3 95       	inc	r27
 c12:	d9 f7       	brne	.-10     	; 0xc0a <__fixunssfsi+0x42>
 c14:	3e f4       	brtc	.+14     	; 0xc24 <__fixunssfsi+0x5c>
 c16:	90 95       	com	r25
 c18:	80 95       	com	r24
 c1a:	70 95       	com	r23
 c1c:	61 95       	neg	r22
 c1e:	7f 4f       	sbci	r23, 0xFF	; 255
 c20:	8f 4f       	sbci	r24, 0xFF	; 255
 c22:	9f 4f       	sbci	r25, 0xFF	; 255
 c24:	08 95       	ret

00000c26 <__floatunsisf>:
 c26:	e8 94       	clt
 c28:	09 c0       	rjmp	.+18     	; 0xc3c <__floatsisf+0x12>

00000c2a <__floatsisf>:
 c2a:	97 fb       	bst	r25, 7
 c2c:	3e f4       	brtc	.+14     	; 0xc3c <__floatsisf+0x12>
 c2e:	90 95       	com	r25
 c30:	80 95       	com	r24
 c32:	70 95       	com	r23
 c34:	61 95       	neg	r22
 c36:	7f 4f       	sbci	r23, 0xFF	; 255
 c38:	8f 4f       	sbci	r24, 0xFF	; 255
 c3a:	9f 4f       	sbci	r25, 0xFF	; 255
 c3c:	99 23       	and	r25, r25
 c3e:	a9 f0       	breq	.+42     	; 0xc6a <__floatsisf+0x40>
 c40:	f9 2f       	mov	r31, r25
 c42:	96 e9       	ldi	r25, 0x96	; 150
 c44:	bb 27       	eor	r27, r27
 c46:	93 95       	inc	r25
 c48:	f6 95       	lsr	r31
 c4a:	87 95       	ror	r24
 c4c:	77 95       	ror	r23
 c4e:	67 95       	ror	r22
 c50:	b7 95       	ror	r27
 c52:	f1 11       	cpse	r31, r1
 c54:	f8 cf       	rjmp	.-16     	; 0xc46 <__floatsisf+0x1c>
 c56:	fa f4       	brpl	.+62     	; 0xc96 <__floatsisf+0x6c>
 c58:	bb 0f       	add	r27, r27
 c5a:	11 f4       	brne	.+4      	; 0xc60 <__floatsisf+0x36>
 c5c:	60 ff       	sbrs	r22, 0
 c5e:	1b c0       	rjmp	.+54     	; 0xc96 <__floatsisf+0x6c>
 c60:	6f 5f       	subi	r22, 0xFF	; 255
 c62:	7f 4f       	sbci	r23, 0xFF	; 255
 c64:	8f 4f       	sbci	r24, 0xFF	; 255
 c66:	9f 4f       	sbci	r25, 0xFF	; 255
 c68:	16 c0       	rjmp	.+44     	; 0xc96 <__floatsisf+0x6c>
 c6a:	88 23       	and	r24, r24
 c6c:	11 f0       	breq	.+4      	; 0xc72 <__floatsisf+0x48>
 c6e:	96 e9       	ldi	r25, 0x96	; 150
 c70:	11 c0       	rjmp	.+34     	; 0xc94 <__floatsisf+0x6a>
 c72:	77 23       	and	r23, r23
 c74:	21 f0       	breq	.+8      	; 0xc7e <__floatsisf+0x54>
 c76:	9e e8       	ldi	r25, 0x8E	; 142
 c78:	87 2f       	mov	r24, r23
 c7a:	76 2f       	mov	r23, r22
 c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__floatsisf+0x5e>
 c7e:	66 23       	and	r22, r22
 c80:	71 f0       	breq	.+28     	; 0xc9e <__floatsisf+0x74>
 c82:	96 e8       	ldi	r25, 0x86	; 134
 c84:	86 2f       	mov	r24, r22
 c86:	70 e0       	ldi	r23, 0x00	; 0
 c88:	60 e0       	ldi	r22, 0x00	; 0
 c8a:	2a f0       	brmi	.+10     	; 0xc96 <__floatsisf+0x6c>
 c8c:	9a 95       	dec	r25
 c8e:	66 0f       	add	r22, r22
 c90:	77 1f       	adc	r23, r23
 c92:	88 1f       	adc	r24, r24
 c94:	da f7       	brpl	.-10     	; 0xc8c <__floatsisf+0x62>
 c96:	88 0f       	add	r24, r24
 c98:	96 95       	lsr	r25
 c9a:	87 95       	ror	r24
 c9c:	97 f9       	bld	r25, 7
 c9e:	08 95       	ret

00000ca0 <__fp_inf>:
 ca0:	97 f9       	bld	r25, 7
 ca2:	9f 67       	ori	r25, 0x7F	; 127
 ca4:	80 e8       	ldi	r24, 0x80	; 128
 ca6:	70 e0       	ldi	r23, 0x00	; 0
 ca8:	60 e0       	ldi	r22, 0x00	; 0
 caa:	08 95       	ret

00000cac <__fp_nan>:
 cac:	9f ef       	ldi	r25, 0xFF	; 255
 cae:	80 ec       	ldi	r24, 0xC0	; 192
 cb0:	08 95       	ret

00000cb2 <__fp_pscA>:
 cb2:	00 24       	eor	r0, r0
 cb4:	0a 94       	dec	r0
 cb6:	16 16       	cp	r1, r22
 cb8:	17 06       	cpc	r1, r23
 cba:	18 06       	cpc	r1, r24
 cbc:	09 06       	cpc	r0, r25
 cbe:	08 95       	ret

00000cc0 <__fp_pscB>:
 cc0:	00 24       	eor	r0, r0
 cc2:	0a 94       	dec	r0
 cc4:	12 16       	cp	r1, r18
 cc6:	13 06       	cpc	r1, r19
 cc8:	14 06       	cpc	r1, r20
 cca:	05 06       	cpc	r0, r21
 ccc:	08 95       	ret

00000cce <__fp_round>:
 cce:	09 2e       	mov	r0, r25
 cd0:	03 94       	inc	r0
 cd2:	00 0c       	add	r0, r0
 cd4:	11 f4       	brne	.+4      	; 0xcda <__fp_round+0xc>
 cd6:	88 23       	and	r24, r24
 cd8:	52 f0       	brmi	.+20     	; 0xcee <__fp_round+0x20>
 cda:	bb 0f       	add	r27, r27
 cdc:	40 f4       	brcc	.+16     	; 0xcee <__fp_round+0x20>
 cde:	bf 2b       	or	r27, r31
 ce0:	11 f4       	brne	.+4      	; 0xce6 <__fp_round+0x18>
 ce2:	60 ff       	sbrs	r22, 0
 ce4:	04 c0       	rjmp	.+8      	; 0xcee <__fp_round+0x20>
 ce6:	6f 5f       	subi	r22, 0xFF	; 255
 ce8:	7f 4f       	sbci	r23, 0xFF	; 255
 cea:	8f 4f       	sbci	r24, 0xFF	; 255
 cec:	9f 4f       	sbci	r25, 0xFF	; 255
 cee:	08 95       	ret

00000cf0 <__fp_split3>:
 cf0:	57 fd       	sbrc	r21, 7
 cf2:	90 58       	subi	r25, 0x80	; 128
 cf4:	44 0f       	add	r20, r20
 cf6:	55 1f       	adc	r21, r21
 cf8:	59 f0       	breq	.+22     	; 0xd10 <__fp_splitA+0x10>
 cfa:	5f 3f       	cpi	r21, 0xFF	; 255
 cfc:	71 f0       	breq	.+28     	; 0xd1a <__fp_splitA+0x1a>
 cfe:	47 95       	ror	r20

00000d00 <__fp_splitA>:
 d00:	88 0f       	add	r24, r24
 d02:	97 fb       	bst	r25, 7
 d04:	99 1f       	adc	r25, r25
 d06:	61 f0       	breq	.+24     	; 0xd20 <__fp_splitA+0x20>
 d08:	9f 3f       	cpi	r25, 0xFF	; 255
 d0a:	79 f0       	breq	.+30     	; 0xd2a <__fp_splitA+0x2a>
 d0c:	87 95       	ror	r24
 d0e:	08 95       	ret
 d10:	12 16       	cp	r1, r18
 d12:	13 06       	cpc	r1, r19
 d14:	14 06       	cpc	r1, r20
 d16:	55 1f       	adc	r21, r21
 d18:	f2 cf       	rjmp	.-28     	; 0xcfe <__fp_split3+0xe>
 d1a:	46 95       	lsr	r20
 d1c:	f1 df       	rcall	.-30     	; 0xd00 <__fp_splitA>
 d1e:	08 c0       	rjmp	.+16     	; 0xd30 <__fp_splitA+0x30>
 d20:	16 16       	cp	r1, r22
 d22:	17 06       	cpc	r1, r23
 d24:	18 06       	cpc	r1, r24
 d26:	99 1f       	adc	r25, r25
 d28:	f1 cf       	rjmp	.-30     	; 0xd0c <__fp_splitA+0xc>
 d2a:	86 95       	lsr	r24
 d2c:	71 05       	cpc	r23, r1
 d2e:	61 05       	cpc	r22, r1
 d30:	08 94       	sec
 d32:	08 95       	ret

00000d34 <__fp_zero>:
 d34:	e8 94       	clt

00000d36 <__fp_szero>:
 d36:	bb 27       	eor	r27, r27
 d38:	66 27       	eor	r22, r22
 d3a:	77 27       	eor	r23, r23
 d3c:	cb 01       	movw	r24, r22
 d3e:	97 f9       	bld	r25, 7
 d40:	08 95       	ret

00000d42 <__udivmodsi4>:
 d42:	a1 e2       	ldi	r26, 0x21	; 33
 d44:	1a 2e       	mov	r1, r26
 d46:	aa 1b       	sub	r26, r26
 d48:	bb 1b       	sub	r27, r27
 d4a:	fd 01       	movw	r30, r26
 d4c:	0d c0       	rjmp	.+26     	; 0xd68 <__udivmodsi4_ep>

00000d4e <__udivmodsi4_loop>:
 d4e:	aa 1f       	adc	r26, r26
 d50:	bb 1f       	adc	r27, r27
 d52:	ee 1f       	adc	r30, r30
 d54:	ff 1f       	adc	r31, r31
 d56:	a2 17       	cp	r26, r18
 d58:	b3 07       	cpc	r27, r19
 d5a:	e4 07       	cpc	r30, r20
 d5c:	f5 07       	cpc	r31, r21
 d5e:	20 f0       	brcs	.+8      	; 0xd68 <__udivmodsi4_ep>
 d60:	a2 1b       	sub	r26, r18
 d62:	b3 0b       	sbc	r27, r19
 d64:	e4 0b       	sbc	r30, r20
 d66:	f5 0b       	sbc	r31, r21

00000d68 <__udivmodsi4_ep>:
 d68:	66 1f       	adc	r22, r22
 d6a:	77 1f       	adc	r23, r23
 d6c:	88 1f       	adc	r24, r24
 d6e:	99 1f       	adc	r25, r25
 d70:	1a 94       	dec	r1
 d72:	69 f7       	brne	.-38     	; 0xd4e <__udivmodsi4_loop>
 d74:	60 95       	com	r22
 d76:	70 95       	com	r23
 d78:	80 95       	com	r24
 d7a:	90 95       	com	r25
 d7c:	9b 01       	movw	r18, r22
 d7e:	ac 01       	movw	r20, r24
 d80:	bd 01       	movw	r22, r26
 d82:	cf 01       	movw	r24, r30
 d84:	08 95       	ret

00000d86 <__itoa_ncheck>:
 d86:	bb 27       	eor	r27, r27
 d88:	4a 30       	cpi	r20, 0x0A	; 10
 d8a:	31 f4       	brne	.+12     	; 0xd98 <__itoa_ncheck+0x12>
 d8c:	99 23       	and	r25, r25
 d8e:	22 f4       	brpl	.+8      	; 0xd98 <__itoa_ncheck+0x12>
 d90:	bd e2       	ldi	r27, 0x2D	; 45
 d92:	90 95       	com	r25
 d94:	81 95       	neg	r24
 d96:	9f 4f       	sbci	r25, 0xFF	; 255
 d98:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__utoa_common>

00000d9c <__utoa_ncheck>:
 d9c:	bb 27       	eor	r27, r27

00000d9e <__utoa_common>:
 d9e:	fb 01       	movw	r30, r22
 da0:	55 27       	eor	r21, r21
 da2:	aa 27       	eor	r26, r26
 da4:	88 0f       	add	r24, r24
 da6:	99 1f       	adc	r25, r25
 da8:	aa 1f       	adc	r26, r26
 daa:	a4 17       	cp	r26, r20
 dac:	10 f0       	brcs	.+4      	; 0xdb2 <__utoa_common+0x14>
 dae:	a4 1b       	sub	r26, r20
 db0:	83 95       	inc	r24
 db2:	50 51       	subi	r21, 0x10	; 16
 db4:	b9 f7       	brne	.-18     	; 0xda4 <__utoa_common+0x6>
 db6:	a0 5d       	subi	r26, 0xD0	; 208
 db8:	aa 33       	cpi	r26, 0x3A	; 58
 dba:	08 f0       	brcs	.+2      	; 0xdbe <__utoa_common+0x20>
 dbc:	a9 5d       	subi	r26, 0xD9	; 217
 dbe:	a1 93       	st	Z+, r26
 dc0:	00 97       	sbiw	r24, 0x00	; 0
 dc2:	79 f7       	brne	.-34     	; 0xda2 <__utoa_common+0x4>
 dc4:	b1 11       	cpse	r27, r1
 dc6:	b1 93       	st	Z+, r27
 dc8:	11 92       	st	Z+, r1
 dca:	cb 01       	movw	r24, r22
 dcc:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <strrev>

00000dd0 <strrev>:
 dd0:	dc 01       	movw	r26, r24
 dd2:	fc 01       	movw	r30, r24
 dd4:	67 2f       	mov	r22, r23
 dd6:	71 91       	ld	r23, Z+
 dd8:	77 23       	and	r23, r23
 dda:	e1 f7       	brne	.-8      	; 0xdd4 <strrev+0x4>
 ddc:	32 97       	sbiw	r30, 0x02	; 2
 dde:	04 c0       	rjmp	.+8      	; 0xde8 <strrev+0x18>
 de0:	7c 91       	ld	r23, X
 de2:	6d 93       	st	X+, r22
 de4:	70 83       	st	Z, r23
 de6:	62 91       	ld	r22, -Z
 de8:	ae 17       	cp	r26, r30
 dea:	bf 07       	cpc	r27, r31
 dec:	c8 f3       	brcs	.-14     	; 0xde0 <strrev+0x10>
 dee:	08 95       	ret

00000df0 <_exit>:
 df0:	f8 94       	cli

00000df2 <__stop_program>:
 df2:	ff cf       	rjmp	.-2      	; 0xdf2 <__stop_program>
