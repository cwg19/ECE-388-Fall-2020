
prototype_v0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00002240  000022d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002240  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800172  00800172  00002346  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002346  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000023e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ae9  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e87  00000000  00000000  000040c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015d4  00000000  00000000  00004f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000064c  00000000  00000000  00006520  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084b  00000000  00000000  00006b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c6e  00000000  00000000  000073b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00008025  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 24 08 	jmp	0x1048	; 0x1048 <__vector_16>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e0 e4       	ldi	r30, 0x40	; 64
      c8:	f2 e2       	ldi	r31, 0x22	; 34
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a2 37       	cpi	r26, 0x72	; 114
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	a2 e7       	ldi	r26, 0x72	; 114
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a8 37       	cpi	r26, 0x78	; 120
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <main>
      ea:	0c 94 1e 11 	jmp	0x223c	; 0x223c <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <AD9833_init>:
#include "spi.h"

static volatile uint16_t controlReg = 0;

void AD9833_init (void)
{
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
// 	phaseChange(0,0); // initial phase of 0 deg
	// idk if i did the math here right or if it even matters;
	// this init sequence is maybe more efficient or something
	// just uncomment the above if it doesnt work
	// ... hopefully the above works
	SPI_write16(INIT_RESET);
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SPI_write16>
	SPI_write16(INIT_RESET_B28);
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	91 e2       	ldi	r25, 0x21	; 33
     106:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SPI_write16>
	SPI_write16(INIT_FREQ0_LSB);
     10a:	8d e4       	ldi	r24, 0x4D	; 77
     10c:	92 e6       	ldi	r25, 0x62	; 98
     10e:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SPI_write16>
	SPI_write16(INIT_FREQ0_MSB);
     112:	81 e4       	ldi	r24, 0x41	; 65
     114:	90 e4       	ldi	r25, 0x40	; 64
     116:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SPI_write16>
	SPI_write16(INIT_PHASE0);
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	90 ec       	ldi	r25, 0xC0	; 192
     11e:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SPI_write16>
	SPI_write16(INIT_GO);
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SPI_write16>
}
     12a:	00 00       	nop
     12c:	df 91       	pop	r29
     12e:	cf 91       	pop	r28
     130:	08 95       	ret

00000132 <freqChange>:


void freqChange(uint32_t freqOut, uint8_t select)  // take base10 frequency and do frequency hop
{
     132:	af 92       	push	r10
     134:	bf 92       	push	r11
     136:	cf 92       	push	r12
     138:	df 92       	push	r13
     13a:	ef 92       	push	r14
     13c:	ff 92       	push	r15
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	61 97       	sbiw	r28, 0x11	; 17
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	f8 94       	cli
     150:	de bf       	out	0x3e, r29	; 62
     152:	0f be       	out	0x3f, r0	; 63
     154:	cd bf       	out	0x3d, r28	; 61
     156:	6d 87       	std	Y+13, r22	; 0x0d
     158:	7e 87       	std	Y+14, r23	; 0x0e
     15a:	8f 87       	std	Y+15, r24	; 0x0f
     15c:	98 8b       	std	Y+16, r25	; 0x10
     15e:	49 8b       	std	Y+17, r20	; 0x11
	uint64_t freqReg = 0;
     160:	1d 82       	std	Y+5, r1	; 0x05
     162:	1e 82       	std	Y+6, r1	; 0x06
     164:	1f 82       	std	Y+7, r1	; 0x07
     166:	18 86       	std	Y+8, r1	; 0x08
     168:	19 86       	std	Y+9, r1	; 0x09
     16a:	1a 86       	std	Y+10, r1	; 0x0a
     16c:	1b 86       	std	Y+11, r1	; 0x0b
     16e:	1c 86       	std	Y+12, r1	; 0x0c
	if (freqOut > FREQ_MAX) freqOut = FREQ_MAX;
     170:	8d 85       	ldd	r24, Y+13	; 0x0d
     172:	9e 85       	ldd	r25, Y+14	; 0x0e
     174:	af 85       	ldd	r26, Y+15	; 0x0f
     176:	b8 89       	ldd	r27, Y+16	; 0x10
     178:	81 32       	cpi	r24, 0x21	; 33
     17a:	9c 4b       	sbci	r25, 0xBC	; 188
     17c:	ae 4b       	sbci	r26, 0xBE	; 190
     17e:	b1 05       	cpc	r27, r1
     180:	48 f0       	brcs	.+18     	; 0x194 <freqChange+0x62>
     182:	80 e2       	ldi	r24, 0x20	; 32
     184:	9c eb       	ldi	r25, 0xBC	; 188
     186:	ae eb       	ldi	r26, 0xBE	; 190
     188:	b0 e0       	ldi	r27, 0x00	; 0
     18a:	8d 87       	std	Y+13, r24	; 0x0d
     18c:	9e 87       	std	Y+14, r25	; 0x0e
     18e:	af 87       	std	Y+15, r26	; 0x0f
     190:	b8 8b       	std	Y+16, r27	; 0x10
     192:	10 c0       	rjmp	.+32     	; 0x1b4 <freqChange+0x82>
	else if (freqOut < FREQ_MIN) freqOut = FREQ_MIN;
     194:	8d 85       	ldd	r24, Y+13	; 0x0d
     196:	9e 85       	ldd	r25, Y+14	; 0x0e
     198:	af 85       	ldd	r26, Y+15	; 0x0f
     19a:	b8 89       	ldd	r27, Y+16	; 0x10
     19c:	89 2b       	or	r24, r25
     19e:	8a 2b       	or	r24, r26
     1a0:	8b 2b       	or	r24, r27
     1a2:	41 f4       	brne	.+16     	; 0x1b4 <freqChange+0x82>
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	a0 e0       	ldi	r26, 0x00	; 0
     1aa:	b0 e0       	ldi	r27, 0x00	; 0
     1ac:	8d 87       	std	Y+13, r24	; 0x0d
     1ae:	9e 87       	std	Y+14, r25	; 0x0e
     1b0:	af 87       	std	Y+15, r26	; 0x0f
     1b2:	b8 8b       	std	Y+16, r27	; 0x10
	//freqReg = freq_out* 2^28/freq_mclk
	freqReg = freqOut * 10.73741824; // maybe doesnt need to be 64 bits, but freq changing wasn't working last
     1b4:	6d 85       	ldd	r22, Y+13	; 0x0d
     1b6:	7e 85       	ldd	r23, Y+14	; 0x0e
     1b8:	8f 85       	ldd	r24, Y+15	; 0x0f
     1ba:	98 89       	ldd	r25, Y+16	; 0x10
     1bc:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__floatunsisf>
     1c0:	dc 01       	movw	r26, r24
     1c2:	cb 01       	movw	r24, r22
     1c4:	27 e7       	ldi	r18, 0x77	; 119
     1c6:	3c ec       	ldi	r19, 0xCC	; 204
     1c8:	4b e2       	ldi	r20, 0x2B	; 43
     1ca:	51 e4       	ldi	r21, 0x41	; 65
     1cc:	bc 01       	movw	r22, r24
     1ce:	cd 01       	movw	r24, r26
     1d0:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     1d4:	dc 01       	movw	r26, r24
     1d6:	cb 01       	movw	r24, r22
     1d8:	bc 01       	movw	r22, r24
     1da:	cd 01       	movw	r24, r26
     1dc:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__fixunssfdi>
     1e0:	a2 2e       	mov	r10, r18
     1e2:	b3 2e       	mov	r11, r19
     1e4:	c4 2e       	mov	r12, r20
     1e6:	d5 2e       	mov	r13, r21
     1e8:	e6 2e       	mov	r14, r22
     1ea:	f7 2e       	mov	r15, r23
     1ec:	08 2f       	mov	r16, r24
     1ee:	19 2f       	mov	r17, r25
     1f0:	ad 82       	std	Y+5, r10	; 0x05
     1f2:	be 82       	std	Y+6, r11	; 0x06
     1f4:	cf 82       	std	Y+7, r12	; 0x07
     1f6:	d8 86       	std	Y+8, r13	; 0x08
     1f8:	e9 86       	std	Y+9, r14	; 0x09
     1fa:	fa 86       	std	Y+10, r15	; 0x0a
     1fc:	0b 87       	std	Y+11, r16	; 0x0b
     1fe:	1c 87       	std	Y+12, r17	; 0x0c
	uint16_t regLs = (freqReg & BITS14_MASK);
     200:	8d 81       	ldd	r24, Y+5	; 0x05
     202:	9e 81       	ldd	r25, Y+6	; 0x06
     204:	9f 73       	andi	r25, 0x3F	; 63
     206:	9a 83       	std	Y+2, r25	; 0x02
     208:	89 83       	std	Y+1, r24	; 0x01
	uint16_t regMs = ((freqReg>>14) & BITS14_MASK);
     20a:	2d 81       	ldd	r18, Y+5	; 0x05
     20c:	3e 81       	ldd	r19, Y+6	; 0x06
     20e:	4f 81       	ldd	r20, Y+7	; 0x07
     210:	58 85       	ldd	r21, Y+8	; 0x08
     212:	69 85       	ldd	r22, Y+9	; 0x09
     214:	7a 85       	ldd	r23, Y+10	; 0x0a
     216:	8b 85       	ldd	r24, Y+11	; 0x0b
     218:	9c 85       	ldd	r25, Y+12	; 0x0c
     21a:	0e e0       	ldi	r16, 0x0E	; 14
     21c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__lshrdi3>
     220:	a2 2e       	mov	r10, r18
     222:	b3 2e       	mov	r11, r19
     224:	c4 2e       	mov	r12, r20
     226:	d5 2e       	mov	r13, r21
     228:	e6 2e       	mov	r14, r22
     22a:	f7 2e       	mov	r15, r23
     22c:	08 2f       	mov	r16, r24
     22e:	19 2f       	mov	r17, r25
     230:	c5 01       	movw	r24, r10
     232:	9f 73       	andi	r25, 0x3F	; 63
     234:	9c 83       	std	Y+4, r25	; 0x04
     236:	8b 83       	std	Y+3, r24	; 0x03
	controlReg |= (1<<B28) | (1<<RESET);
     238:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     23c:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     240:	91 62       	ori	r25, 0x21	; 33
     242:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     246:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
	// 1,127,428
	if (select == 0) {
     24a:	89 89       	ldd	r24, Y+17	; 0x11
     24c:	88 23       	and	r24, r24
     24e:	a1 f4       	brne	.+40     	; 0x278 <freqChange+0x146>
		regLs |= FREQ0_D_MASK;
     250:	89 81       	ldd	r24, Y+1	; 0x01
     252:	9a 81       	ldd	r25, Y+2	; 0x02
     254:	90 64       	ori	r25, 0x40	; 64
     256:	9a 83       	std	Y+2, r25	; 0x02
     258:	89 83       	std	Y+1, r24	; 0x01
		regMs |= FREQ0_D_MASK;
     25a:	8b 81       	ldd	r24, Y+3	; 0x03
     25c:	9c 81       	ldd	r25, Y+4	; 0x04
     25e:	90 64       	ori	r25, 0x40	; 64
     260:	9c 83       	std	Y+4, r25	; 0x04
     262:	8b 83       	std	Y+3, r24	; 0x03
		controlReg &= ~(1<<FSELECT);
     264:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     268:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     26c:	97 7f       	andi	r25, 0xF7	; 247
     26e:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     272:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
     276:	16 c0       	rjmp	.+44     	; 0x2a4 <freqChange+0x172>
	}
	else if (select == 1) {
     278:	89 89       	ldd	r24, Y+17	; 0x11
     27a:	81 30       	cpi	r24, 0x01	; 1
     27c:	99 f4       	brne	.+38     	; 0x2a4 <freqChange+0x172>
		regLs |= FREQ1_D_MASK;
     27e:	89 81       	ldd	r24, Y+1	; 0x01
     280:	9a 81       	ldd	r25, Y+2	; 0x02
     282:	90 68       	ori	r25, 0x80	; 128
     284:	9a 83       	std	Y+2, r25	; 0x02
     286:	89 83       	std	Y+1, r24	; 0x01
		regMs |= FREQ1_D_MASK;
     288:	8b 81       	ldd	r24, Y+3	; 0x03
     28a:	9c 81       	ldd	r25, Y+4	; 0x04
     28c:	90 68       	ori	r25, 0x80	; 128
     28e:	9c 83       	std	Y+4, r25	; 0x04
     290:	8b 83       	std	Y+3, r24	; 0x03
		controlReg |= (1<<FSELECT);
     292:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     296:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     29a:	98 60       	ori	r25, 0x08	; 8
     29c:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     2a0:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
	}
	
	SPI_write16(controlReg);
     2a4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     2a8:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     2ac:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SPI_write16>
	SPI_write16(regLs);
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	9a 81       	ldd	r25, Y+2	; 0x02
     2b4:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SPI_write16>
	SPI_write16(regMs);
     2b8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ba:	9c 81       	ldd	r25, Y+4	; 0x04
     2bc:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SPI_write16>
	controlReg &= ~((1<<B28) | (1<<RESET));
     2c0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     2c4:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     2c8:	9e 7d       	andi	r25, 0xDE	; 222
     2ca:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     2ce:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
	SPI_write16(controlReg);
     2d2:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     2d6:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     2da:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SPI_write16>
	
}
     2de:	00 00       	nop
     2e0:	61 96       	adiw	r28, 0x11	; 17
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	cd bf       	out	0x3d, r28	; 61
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	ff 90       	pop	r15
     2f6:	ef 90       	pop	r14
     2f8:	df 90       	pop	r13
     2fa:	cf 90       	pop	r12
     2fc:	bf 90       	pop	r11
     2fe:	af 90       	pop	r10
     300:	08 95       	ret

00000302 <phaseChange>:

void phaseChange(uint16_t phaseShift, uint8_t select) {
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	00 d0       	rcall	.+0      	; 0x308 <phaseChange+0x6>
     308:	00 d0       	rcall	.+0      	; 0x30a <phaseChange+0x8>
     30a:	1f 92       	push	r1
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	9c 83       	std	Y+4, r25	; 0x04
     312:	8b 83       	std	Y+3, r24	; 0x03
     314:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t phaseReg = (phaseShift*POW2_12) / (2*PI);
     316:	8b 81       	ldd	r24, Y+3	; 0x03
     318:	9c 81       	ldd	r25, Y+4	; 0x04
     31a:	98 2f       	mov	r25, r24
     31c:	88 27       	eor	r24, r24
     31e:	92 95       	swap	r25
     320:	90 7f       	andi	r25, 0xF0	; 240
     322:	cc 01       	movw	r24, r24
     324:	a0 e0       	ldi	r26, 0x00	; 0
     326:	b0 e0       	ldi	r27, 0x00	; 0
     328:	bc 01       	movw	r22, r24
     32a:	cd 01       	movw	r24, r26
     32c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__floatunsisf>
     330:	dc 01       	movw	r26, r24
     332:	cb 01       	movw	r24, r22
     334:	2b ed       	ldi	r18, 0xDB	; 219
     336:	3f e0       	ldi	r19, 0x0F	; 15
     338:	49 ec       	ldi	r20, 0xC9	; 201
     33a:	50 e4       	ldi	r21, 0x40	; 64
     33c:	bc 01       	movw	r22, r24
     33e:	cd 01       	movw	r24, r26
     340:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divsf3>
     344:	dc 01       	movw	r26, r24
     346:	cb 01       	movw	r24, r22
     348:	bc 01       	movw	r22, r24
     34a:	cd 01       	movw	r24, r26
     34c:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__fixunssfsi>
     350:	dc 01       	movw	r26, r24
     352:	cb 01       	movw	r24, r22
     354:	9a 83       	std	Y+2, r25	; 0x02
     356:	89 83       	std	Y+1, r24	; 0x01
	controlReg |= (1<<RESET);
     358:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     35c:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     360:	91 60       	ori	r25, 0x01	; 1
     362:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     366:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
	
	if (select == 0) {
     36a:	8d 81       	ldd	r24, Y+5	; 0x05
     36c:	88 23       	and	r24, r24
     36e:	71 f4       	brne	.+28     	; 0x38c <phaseChange+0x8a>
		phaseReg |= PHASE0_D_MASK;
     370:	89 81       	ldd	r24, Y+1	; 0x01
     372:	9a 81       	ldd	r25, Y+2	; 0x02
     374:	90 6c       	ori	r25, 0xC0	; 192
     376:	9a 83       	std	Y+2, r25	; 0x02
     378:	89 83       	std	Y+1, r24	; 0x01
		controlReg &= ~(1<<PSELECT);
     37a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     37e:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     382:	9b 7f       	andi	r25, 0xFB	; 251
     384:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     388:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
	}
	if (select == 1) {
     38c:	8d 81       	ldd	r24, Y+5	; 0x05
     38e:	81 30       	cpi	r24, 0x01	; 1
     390:	71 f4       	brne	.+28     	; 0x3ae <phaseChange+0xac>
		phaseReg |= PHASE1_D_MASK;
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	9a 81       	ldd	r25, Y+2	; 0x02
     396:	90 6e       	ori	r25, 0xE0	; 224
     398:	9a 83       	std	Y+2, r25	; 0x02
     39a:	89 83       	std	Y+1, r24	; 0x01
		controlReg |= (1<<PSELECT);
     39c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     3a0:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     3a4:	94 60       	ori	r25, 0x04	; 4
     3a6:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     3aa:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
	}
	
	SPI_write16(phaseReg);
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	9a 81       	ldd	r25, Y+2	; 0x02
     3b2:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SPI_write16>
	controlReg &= ~(1<<RESET);
     3b6:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     3ba:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     3be:	9e 7f       	andi	r25, 0xFE	; 254
     3c0:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     3c4:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
	
}
     3c8:	00 00       	nop
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret

000003da <sineOut>:

void sineOut(void) {
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
	controlReg |= (1<<RESET);
     3e2:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     3e6:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     3ea:	91 60       	ori	r25, 0x01	; 1
     3ec:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     3f0:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
	controlReg &= ~((1<< SLEEP12) | (1<<OPBITEN) | (1<<MODE));
     3f4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     3f8:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     3fc:	8d 79       	andi	r24, 0x9D	; 157
     3fe:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     402:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
	SPI_write16(controlReg);
     406:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     40a:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     40e:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SPI_write16>
	controlReg &= ~(1<<RESET);
     412:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     416:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     41a:	9e 7f       	andi	r25, 0xFE	; 254
     41c:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     420:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
	SPI_write16(controlReg);
     424:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     428:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     42c:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SPI_write16>
}
     430:	00 00       	nop
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <cosineOut>:

void cosineOut(uint8_t select) {
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	1f 92       	push	r1
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	89 83       	std	Y+1, r24	; 0x01
	sineOut();
     444:	0e 94 ed 01 	call	0x3da	; 0x3da <sineOut>
	phaseChange(90,select);
     448:	69 81       	ldd	r22, Y+1	; 0x01
     44a:	8a e5       	ldi	r24, 0x5A	; 90
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 81 01 	call	0x302	; 0x302 <phaseChange>
}
     452:	00 00       	nop
     454:	0f 90       	pop	r0
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <triangleOut>:

void triangleOut(void) {
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
	controlReg |= (1<<RESET) | (1<<MODE);
     464:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     468:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     46c:	82 60       	ori	r24, 0x02	; 2
     46e:	91 60       	ori	r25, 0x01	; 1
     470:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     474:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
	controlReg &= ~((1<< SLEEP12) | (1<<OPBITEN));
     478:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     47c:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     480:	8f 79       	andi	r24, 0x9F	; 159
     482:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     486:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
	SPI_write16(controlReg);
     48a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     48e:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     492:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SPI_write16>
	controlReg &= ~(1<<RESET);
     496:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     49a:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     49e:	9e 7f       	andi	r25, 0xFE	; 254
     4a0:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     4a4:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
	SPI_write16(controlReg);
     4a8:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     4ac:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     4b0:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SPI_write16>
}
     4b4:	00 00       	nop
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <squareOut>:

void squareOut(void) {
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
	controlReg |= (1<<RESET) | (1<<SLEEP12) | (1<<OPBITEN) | (1<<DIV2);
     4c4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     4c8:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     4cc:	88 66       	ori	r24, 0x68	; 104
     4ce:	91 60       	ori	r25, 0x01	; 1
     4d0:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     4d4:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
	controlReg &= ~(1<<MODE);
     4d8:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     4dc:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     4e0:	8d 7f       	andi	r24, 0xFD	; 253
     4e2:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     4e6:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
	SPI_write16(controlReg);
     4ea:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     4ee:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     4f2:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SPI_write16>
	controlReg &= ~(1<<RESET);
     4f6:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     4fa:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     4fe:	9e 7f       	andi	r25, 0xFE	; 254
     500:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
     504:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
	SPI_write16(controlReg);
     508:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     50c:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
     510:	0e 94 72 08 	call	0x10e4	; 0x10e4 <SPI_write16>
}
     514:	00 00       	nop
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <setSignalOut>:

void setSignalOut(uint8_t sigMode) {
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	1f 92       	push	r1
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	89 83       	std	Y+1, r24	; 0x01
	switch (sigMode) {
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	88 2f       	mov	r24, r24
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	81 30       	cpi	r24, 0x01	; 1
     530:	91 05       	cpc	r25, r1
     532:	79 f0       	breq	.+30     	; 0x552 <setSignalOut+0x36>
     534:	82 30       	cpi	r24, 0x02	; 2
     536:	91 05       	cpc	r25, r1
     538:	1c f4       	brge	.+6      	; 0x540 <setSignalOut+0x24>
     53a:	89 2b       	or	r24, r25
     53c:	39 f0       	breq	.+14     	; 0x54c <setSignalOut+0x30>
			break;
		case SIGNAL_TRI:
			triangleOut();
			break;
	}
     53e:	13 c0       	rjmp	.+38     	; 0x566 <setSignalOut+0x4a>
	controlReg &= ~(1<<RESET);
	SPI_write16(controlReg);
}

void setSignalOut(uint8_t sigMode) {
	switch (sigMode) {
     540:	82 30       	cpi	r24, 0x02	; 2
     542:	91 05       	cpc	r25, r1
     544:	51 f0       	breq	.+20     	; 0x55a <setSignalOut+0x3e>
     546:	03 97       	sbiw	r24, 0x03	; 3
     548:	59 f0       	breq	.+22     	; 0x560 <setSignalOut+0x44>
			break;
		case SIGNAL_TRI:
			triangleOut();
			break;
	}
     54a:	0d c0       	rjmp	.+26     	; 0x566 <setSignalOut+0x4a>
}

void setSignalOut(uint8_t sigMode) {
	switch (sigMode) {
		case SIGNAL_SIN:
			sineOut();
     54c:	0e 94 ed 01 	call	0x3da	; 0x3da <sineOut>
			break;
     550:	0a c0       	rjmp	.+20     	; 0x566 <setSignalOut+0x4a>
		case SIGNAL_COS:
			cosineOut(0);
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	0e 94 1c 02 	call	0x438	; 0x438 <cosineOut>
			break;
     558:	06 c0       	rjmp	.+12     	; 0x566 <setSignalOut+0x4a>
		case SIGNAL_SQ:
			squareOut();
     55a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <squareOut>
			break;
     55e:	03 c0       	rjmp	.+6      	; 0x566 <setSignalOut+0x4a>
		case SIGNAL_TRI:
			triangleOut();
     560:	0e 94 2e 02 	call	0x45c	; 0x45c <triangleOut>
			break;
     564:	00 00       	nop
	}
     566:	00 00       	nop
     568:	0f 90       	pop	r0
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	08 95       	ret

00000570 <I2C_WRITESEQ>:

{

    wr_lcd_mode(data, 1);

}
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	00 d0       	rcall	.+0      	; 0x576 <I2C_WRITESEQ+0x6>
     576:	00 d0       	rcall	.+0      	; 0x578 <I2C_WRITESEQ+0x8>
     578:	00 d0       	rcall	.+0      	; 0x57a <I2C_WRITESEQ+0xa>
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	8b 83       	std	Y+3, r24	; 0x03
     580:	7d 83       	std	Y+5, r23	; 0x05
     582:	6c 83       	std	Y+4, r22	; 0x04
     584:	4e 83       	std	Y+6, r20	; 0x06
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	89 83       	std	Y+1, r24	; 0x01
     58a:	8b 81       	ldd	r24, Y+3	; 0x03
     58c:	88 0f       	add	r24, r24
     58e:	0e 94 c4 08 	call	0x1188	; 0x1188 <i2c_start>
     592:	88 23       	and	r24, r24
     594:	a9 f4       	brne	.+42     	; 0x5c0 <I2C_WRITESEQ+0x50>
     596:	1a 82       	std	Y+2, r1	; 0x02
     598:	0e c0       	rjmp	.+28     	; 0x5b6 <I2C_WRITESEQ+0x46>
     59a:	8a 81       	ldd	r24, Y+2	; 0x02
     59c:	88 2f       	mov	r24, r24
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	2c 81       	ldd	r18, Y+4	; 0x04
     5a2:	3d 81       	ldd	r19, Y+5	; 0x05
     5a4:	82 0f       	add	r24, r18
     5a6:	93 1f       	adc	r25, r19
     5a8:	fc 01       	movw	r30, r24
     5aa:	80 81       	ld	r24, Z
     5ac:	0e 94 21 09 	call	0x1242	; 0x1242 <i2c_write>
     5b0:	8a 81       	ldd	r24, Y+2	; 0x02
     5b2:	8f 5f       	subi	r24, 0xFF	; 255
     5b4:	8a 83       	std	Y+2, r24	; 0x02
     5b6:	9a 81       	ldd	r25, Y+2	; 0x02
     5b8:	8e 81       	ldd	r24, Y+6	; 0x06
     5ba:	98 17       	cp	r25, r24
     5bc:	70 f3       	brcs	.-36     	; 0x59a <I2C_WRITESEQ+0x2a>
     5be:	19 82       	std	Y+1, r1	; 0x01
     5c0:	0e 94 09 09 	call	0x1212	; 0x1212 <i2c_stop>
     5c4:	89 81       	ldd	r24, Y+1	; 0x01
     5c6:	26 96       	adiw	r28, 0x06	; 6
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	08 95       	ret

000005d8 <wr_lcd_mode>:
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	66 97       	sbiw	r28, 0x16	; 22
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	de bf       	out	0x3e, r29	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	cd bf       	out	0x3d, r28	; 61
     5ec:	8d 8b       	std	Y+21, r24	; 0x15
     5ee:	6e 8b       	std	Y+22, r22	; 0x16
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	89 83       	std	Y+1, r24	; 0x01
     5f4:	8e 89       	ldd	r24, Y+22	; 0x16
     5f6:	88 30       	cpi	r24, 0x08	; 8
     5f8:	79 f4       	brne	.+30     	; 0x618 <wr_lcd_mode+0x40>
     5fa:	8d 89       	ldd	r24, Y+21	; 0x15
     5fc:	88 23       	and	r24, r24
     5fe:	11 f0       	breq	.+4      	; 0x604 <wr_lcd_mode+0x2c>
     600:	88 e0       	ldi	r24, 0x08	; 8
     602:	01 c0       	rjmp	.+2      	; 0x606 <wr_lcd_mode+0x2e>
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <backlight.1943>
     60a:	41 e0       	ldi	r20, 0x01	; 1
     60c:	64 e0       	ldi	r22, 0x04	; 4
     60e:	71 e0       	ldi	r23, 0x01	; 1
     610:	87 e2       	ldi	r24, 0x27	; 39
     612:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_WRITESEQ>
     616:	a9 c0       	rjmp	.+338    	; 0x76a <wr_lcd_mode+0x192>
     618:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <backlight.1943>
     61c:	9e 89       	ldd	r25, Y+22	; 0x16
     61e:	89 2b       	or	r24, r25
     620:	8e 8b       	std	Y+22, r24	; 0x16
     622:	8e 89       	ldd	r24, Y+22	; 0x16
     624:	88 8b       	std	Y+16, r24	; 0x10
     626:	8d 89       	ldd	r24, Y+21	; 0x15
     628:	98 2f       	mov	r25, r24
     62a:	90 7f       	andi	r25, 0xF0	; 240
     62c:	8e 89       	ldd	r24, Y+22	; 0x16
     62e:	89 2b       	or	r24, r25
     630:	84 60       	ori	r24, 0x04	; 4
     632:	89 8b       	std	Y+17, r24	; 0x11
     634:	89 89       	ldd	r24, Y+17	; 0x11
     636:	8b 7f       	andi	r24, 0xFB	; 251
     638:	8a 8b       	std	Y+18, r24	; 0x12
     63a:	8d 89       	ldd	r24, Y+21	; 0x15
     63c:	88 2f       	mov	r24, r24
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	82 95       	swap	r24
     642:	92 95       	swap	r25
     644:	90 7f       	andi	r25, 0xF0	; 240
     646:	98 27       	eor	r25, r24
     648:	80 7f       	andi	r24, 0xF0	; 240
     64a:	98 27       	eor	r25, r24
     64c:	98 2f       	mov	r25, r24
     64e:	8e 89       	ldd	r24, Y+22	; 0x16
     650:	89 2b       	or	r24, r25
     652:	84 60       	ori	r24, 0x04	; 4
     654:	8b 8b       	std	Y+19, r24	; 0x13
     656:	8b 89       	ldd	r24, Y+19	; 0x13
     658:	8b 7f       	andi	r24, 0xFB	; 251
     65a:	8c 8b       	std	Y+20, r24	; 0x14
     65c:	ce 01       	movw	r24, r28
     65e:	40 96       	adiw	r24, 0x10	; 16
     660:	45 e0       	ldi	r20, 0x05	; 5
     662:	bc 01       	movw	r22, r24
     664:	87 e2       	ldi	r24, 0x27	; 39
     666:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_WRITESEQ>
     66a:	89 83       	std	Y+1, r24	; 0x01
     66c:	8e 89       	ldd	r24, Y+22	; 0x16
     66e:	88 2f       	mov	r24, r24
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	81 70       	andi	r24, 0x01	; 1
     674:	99 27       	eor	r25, r25
     676:	89 2b       	or	r24, r25
     678:	09 f0       	breq	.+2      	; 0x67c <wr_lcd_mode+0xa4>
     67a:	76 c0       	rjmp	.+236    	; 0x768 <wr_lcd_mode+0x190>
     67c:	8d 89       	ldd	r24, Y+21	; 0x15
     67e:	83 30       	cpi	r24, 0x03	; 3
     680:	08 f0       	brcs	.+2      	; 0x684 <wr_lcd_mode+0xac>
     682:	72 c0       	rjmp	.+228    	; 0x768 <wr_lcd_mode+0x190>
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	a0 e0       	ldi	r26, 0x00	; 0
     68a:	b0 e4       	ldi	r27, 0x40	; 64
     68c:	8a 83       	std	Y+2, r24	; 0x02
     68e:	9b 83       	std	Y+3, r25	; 0x03
     690:	ac 83       	std	Y+4, r26	; 0x04
     692:	bd 83       	std	Y+5, r27	; 0x05
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	4a e7       	ldi	r20, 0x7A	; 122
     69a:	53 e4       	ldi	r21, 0x43	; 67
     69c:	6a 81       	ldd	r22, Y+2	; 0x02
     69e:	7b 81       	ldd	r23, Y+3	; 0x03
     6a0:	8c 81       	ldd	r24, Y+4	; 0x04
     6a2:	9d 81       	ldd	r25, Y+5	; 0x05
     6a4:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     6a8:	dc 01       	movw	r26, r24
     6aa:	cb 01       	movw	r24, r22
     6ac:	8e 83       	std	Y+6, r24	; 0x06
     6ae:	9f 83       	std	Y+7, r25	; 0x07
     6b0:	a8 87       	std	Y+8, r26	; 0x08
     6b2:	b9 87       	std	Y+9, r27	; 0x09
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	40 e8       	ldi	r20, 0x80	; 128
     6ba:	5f e3       	ldi	r21, 0x3F	; 63
     6bc:	6e 81       	ldd	r22, Y+6	; 0x06
     6be:	7f 81       	ldd	r23, Y+7	; 0x07
     6c0:	88 85       	ldd	r24, Y+8	; 0x08
     6c2:	99 85       	ldd	r25, Y+9	; 0x09
     6c4:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__cmpsf2>
     6c8:	88 23       	and	r24, r24
     6ca:	2c f4       	brge	.+10     	; 0x6d6 <wr_lcd_mode+0xfe>
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	9b 87       	std	Y+11, r25	; 0x0b
     6d2:	8a 87       	std	Y+10, r24	; 0x0a
     6d4:	3f c0       	rjmp	.+126    	; 0x754 <wr_lcd_mode+0x17c>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	3f ef       	ldi	r19, 0xFF	; 255
     6da:	4f e7       	ldi	r20, 0x7F	; 127
     6dc:	57 e4       	ldi	r21, 0x47	; 71
     6de:	6e 81       	ldd	r22, Y+6	; 0x06
     6e0:	7f 81       	ldd	r23, Y+7	; 0x07
     6e2:	88 85       	ldd	r24, Y+8	; 0x08
     6e4:	99 85       	ldd	r25, Y+9	; 0x09
     6e6:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__gesf2>
     6ea:	18 16       	cp	r1, r24
     6ec:	4c f5       	brge	.+82     	; 0x740 <wr_lcd_mode+0x168>
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	40 e2       	ldi	r20, 0x20	; 32
     6f4:	51 e4       	ldi	r21, 0x41	; 65
     6f6:	6a 81       	ldd	r22, Y+2	; 0x02
     6f8:	7b 81       	ldd	r23, Y+3	; 0x03
     6fa:	8c 81       	ldd	r24, Y+4	; 0x04
     6fc:	9d 81       	ldd	r25, Y+5	; 0x05
     6fe:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     702:	dc 01       	movw	r26, r24
     704:	cb 01       	movw	r24, r22
     706:	bc 01       	movw	r22, r24
     708:	cd 01       	movw	r24, r26
     70a:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__fixunssfsi>
     70e:	dc 01       	movw	r26, r24
     710:	cb 01       	movw	r24, r22
     712:	9b 87       	std	Y+11, r25	; 0x0b
     714:	8a 87       	std	Y+10, r24	; 0x0a
     716:	0f c0       	rjmp	.+30     	; 0x736 <wr_lcd_mode+0x15e>
     718:	89 e1       	ldi	r24, 0x19	; 25
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	9d 87       	std	Y+13, r25	; 0x0d
     71e:	8c 87       	std	Y+12, r24	; 0x0c
     720:	8c 85       	ldd	r24, Y+12	; 0x0c
     722:	9d 85       	ldd	r25, Y+13	; 0x0d
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	f1 f7       	brne	.-4      	; 0x724 <wr_lcd_mode+0x14c>
     728:	9d 87       	std	Y+13, r25	; 0x0d
     72a:	8c 87       	std	Y+12, r24	; 0x0c
     72c:	8a 85       	ldd	r24, Y+10	; 0x0a
     72e:	9b 85       	ldd	r25, Y+11	; 0x0b
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	9b 87       	std	Y+11, r25	; 0x0b
     734:	8a 87       	std	Y+10, r24	; 0x0a
     736:	8a 85       	ldd	r24, Y+10	; 0x0a
     738:	9b 85       	ldd	r25, Y+11	; 0x0b
     73a:	89 2b       	or	r24, r25
     73c:	69 f7       	brne	.-38     	; 0x718 <wr_lcd_mode+0x140>
     73e:	14 c0       	rjmp	.+40     	; 0x768 <wr_lcd_mode+0x190>
     740:	6e 81       	ldd	r22, Y+6	; 0x06
     742:	7f 81       	ldd	r23, Y+7	; 0x07
     744:	88 85       	ldd	r24, Y+8	; 0x08
     746:	99 85       	ldd	r25, Y+9	; 0x09
     748:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__fixunssfsi>
     74c:	dc 01       	movw	r26, r24
     74e:	cb 01       	movw	r24, r22
     750:	9b 87       	std	Y+11, r25	; 0x0b
     752:	8a 87       	std	Y+10, r24	; 0x0a
     754:	8a 85       	ldd	r24, Y+10	; 0x0a
     756:	9b 85       	ldd	r25, Y+11	; 0x0b
     758:	9f 87       	std	Y+15, r25	; 0x0f
     75a:	8e 87       	std	Y+14, r24	; 0x0e
     75c:	8e 85       	ldd	r24, Y+14	; 0x0e
     75e:	9f 85       	ldd	r25, Y+15	; 0x0f
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	f1 f7       	brne	.-4      	; 0x760 <wr_lcd_mode+0x188>
     764:	9f 87       	std	Y+15, r25	; 0x0f
     766:	8e 87       	std	Y+14, r24	; 0x0e
     768:	89 81       	ldd	r24, Y+1	; 0x01
     76a:	66 96       	adiw	r28, 0x16	; 22
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	de bf       	out	0x3e, r29	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	cd bf       	out	0x3d, r28	; 61
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <lcd_gotoxy>:
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	60 97       	sbiw	r28, 0x10	; 16
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	8f 87       	std	Y+15, r24	; 0x0f
     792:	68 8b       	std	Y+16, r22	; 0x10
     794:	88 89       	ldd	r24, Y+16	; 0x10
     796:	88 2f       	mov	r24, r24
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	80 50       	subi	r24, 0x00	; 0
     79c:	9f 4f       	sbci	r25, 0xFF	; 255
     79e:	fc 01       	movw	r30, r24
     7a0:	90 81       	ld	r25, Z
     7a2:	8f 85       	ldd	r24, Y+15	; 0x0f
     7a4:	89 0f       	add	r24, r25
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <wr_lcd_mode>
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	a0 e4       	ldi	r26, 0x40	; 64
     7b2:	b0 e4       	ldi	r27, 0x40	; 64
     7b4:	89 83       	std	Y+1, r24	; 0x01
     7b6:	9a 83       	std	Y+2, r25	; 0x02
     7b8:	ab 83       	std	Y+3, r26	; 0x03
     7ba:	bc 83       	std	Y+4, r27	; 0x04
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	4a e7       	ldi	r20, 0x7A	; 122
     7c2:	53 e4       	ldi	r21, 0x43	; 67
     7c4:	69 81       	ldd	r22, Y+1	; 0x01
     7c6:	7a 81       	ldd	r23, Y+2	; 0x02
     7c8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ca:	9c 81       	ldd	r25, Y+4	; 0x04
     7cc:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     7d0:	dc 01       	movw	r26, r24
     7d2:	cb 01       	movw	r24, r22
     7d4:	8d 83       	std	Y+5, r24	; 0x05
     7d6:	9e 83       	std	Y+6, r25	; 0x06
     7d8:	af 83       	std	Y+7, r26	; 0x07
     7da:	b8 87       	std	Y+8, r27	; 0x08
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e8       	ldi	r20, 0x80	; 128
     7e2:	5f e3       	ldi	r21, 0x3F	; 63
     7e4:	6d 81       	ldd	r22, Y+5	; 0x05
     7e6:	7e 81       	ldd	r23, Y+6	; 0x06
     7e8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ea:	98 85       	ldd	r25, Y+8	; 0x08
     7ec:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__cmpsf2>
     7f0:	88 23       	and	r24, r24
     7f2:	2c f4       	brge	.+10     	; 0x7fe <lcd_gotoxy+0x82>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	9a 87       	std	Y+10, r25	; 0x0a
     7fa:	89 87       	std	Y+9, r24	; 0x09
     7fc:	3f c0       	rjmp	.+126    	; 0x87c <lcd_gotoxy+0x100>
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	3f ef       	ldi	r19, 0xFF	; 255
     802:	4f e7       	ldi	r20, 0x7F	; 127
     804:	57 e4       	ldi	r21, 0x47	; 71
     806:	6d 81       	ldd	r22, Y+5	; 0x05
     808:	7e 81       	ldd	r23, Y+6	; 0x06
     80a:	8f 81       	ldd	r24, Y+7	; 0x07
     80c:	98 85       	ldd	r25, Y+8	; 0x08
     80e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__gesf2>
     812:	18 16       	cp	r1, r24
     814:	4c f5       	brge	.+82     	; 0x868 <lcd_gotoxy+0xec>
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e2       	ldi	r20, 0x20	; 32
     81c:	51 e4       	ldi	r21, 0x41	; 65
     81e:	69 81       	ldd	r22, Y+1	; 0x01
     820:	7a 81       	ldd	r23, Y+2	; 0x02
     822:	8b 81       	ldd	r24, Y+3	; 0x03
     824:	9c 81       	ldd	r25, Y+4	; 0x04
     826:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     82a:	dc 01       	movw	r26, r24
     82c:	cb 01       	movw	r24, r22
     82e:	bc 01       	movw	r22, r24
     830:	cd 01       	movw	r24, r26
     832:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__fixunssfsi>
     836:	dc 01       	movw	r26, r24
     838:	cb 01       	movw	r24, r22
     83a:	9a 87       	std	Y+10, r25	; 0x0a
     83c:	89 87       	std	Y+9, r24	; 0x09
     83e:	0f c0       	rjmp	.+30     	; 0x85e <lcd_gotoxy+0xe2>
     840:	89 e1       	ldi	r24, 0x19	; 25
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	9c 87       	std	Y+12, r25	; 0x0c
     846:	8b 87       	std	Y+11, r24	; 0x0b
     848:	8b 85       	ldd	r24, Y+11	; 0x0b
     84a:	9c 85       	ldd	r25, Y+12	; 0x0c
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	f1 f7       	brne	.-4      	; 0x84c <lcd_gotoxy+0xd0>
     850:	9c 87       	std	Y+12, r25	; 0x0c
     852:	8b 87       	std	Y+11, r24	; 0x0b
     854:	89 85       	ldd	r24, Y+9	; 0x09
     856:	9a 85       	ldd	r25, Y+10	; 0x0a
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	9a 87       	std	Y+10, r25	; 0x0a
     85c:	89 87       	std	Y+9, r24	; 0x09
     85e:	89 85       	ldd	r24, Y+9	; 0x09
     860:	9a 85       	ldd	r25, Y+10	; 0x0a
     862:	89 2b       	or	r24, r25
     864:	69 f7       	brne	.-38     	; 0x840 <lcd_gotoxy+0xc4>
     866:	14 c0       	rjmp	.+40     	; 0x890 <lcd_gotoxy+0x114>
     868:	6d 81       	ldd	r22, Y+5	; 0x05
     86a:	7e 81       	ldd	r23, Y+6	; 0x06
     86c:	8f 81       	ldd	r24, Y+7	; 0x07
     86e:	98 85       	ldd	r25, Y+8	; 0x08
     870:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__fixunssfsi>
     874:	dc 01       	movw	r26, r24
     876:	cb 01       	movw	r24, r22
     878:	9a 87       	std	Y+10, r25	; 0x0a
     87a:	89 87       	std	Y+9, r24	; 0x09
     87c:	89 85       	ldd	r24, Y+9	; 0x09
     87e:	9a 85       	ldd	r25, Y+10	; 0x0a
     880:	9e 87       	std	Y+14, r25	; 0x0e
     882:	8d 87       	std	Y+13, r24	; 0x0d
     884:	8d 85       	ldd	r24, Y+13	; 0x0d
     886:	9e 85       	ldd	r25, Y+14	; 0x0e
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	f1 f7       	brne	.-4      	; 0x888 <lcd_gotoxy+0x10c>
     88c:	9e 87       	std	Y+14, r25	; 0x0e
     88e:	8d 87       	std	Y+13, r24	; 0x0d
     890:	8f 85       	ldd	r24, Y+15	; 0x0f
     892:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <_lcd_x>
     896:	88 89       	ldd	r24, Y+16	; 0x10
     898:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <_lcd_y>
     89c:	00 00       	nop
     89e:	60 96       	adiw	r28, 0x10	; 16
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <lcd_clrscr>:
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <wr_lcd_mode>
     8c0:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <_lcd_y>
     8c4:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <_lcd_y>
     8c8:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <_lcd_x>
     8cc:	00 00       	nop
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <lcd_putc>:
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	2f 97       	sbiw	r28, 0x0f	; 15
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	8f 87       	std	Y+15, r24	; 0x0f
     8ea:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <_lcd_x>
     8ee:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <_lcd_maxx>
     8f2:	98 17       	cp	r25, r24
     8f4:	18 f4       	brcc	.+6      	; 0x8fc <lcd_putc+0x28>
     8f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     8f8:	8a 30       	cpi	r24, 0x0A	; 10
     8fa:	59 f4       	brne	.+22     	; 0x912 <__stack+0x13>
     8fc:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <_lcd_y>
     900:	8f 5f       	subi	r24, 0xFF	; 255
     902:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <_lcd_y>
     906:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <_lcd_y>
     90a:	68 2f       	mov	r22, r24
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	0e 94 be 03 	call	0x77c	; 0x77c <lcd_gotoxy>
     912:	8f 85       	ldd	r24, Y+15	; 0x0f
     914:	8a 30       	cpi	r24, 0x0A	; 10
     916:	09 f4       	brne	.+2      	; 0x91a <__stack+0x1b>
     918:	7b c0       	rjmp	.+246    	; 0xa10 <__stack+0x111>
     91a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <_lcd_x>
     91e:	8f 5f       	subi	r24, 0xFF	; 255
     920:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <_lcd_x>
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	8f 85       	ldd	r24, Y+15	; 0x0f
     928:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <wr_lcd_mode>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	a0 e4       	ldi	r26, 0x40	; 64
     932:	b0 e4       	ldi	r27, 0x40	; 64
     934:	89 83       	std	Y+1, r24	; 0x01
     936:	9a 83       	std	Y+2, r25	; 0x02
     938:	ab 83       	std	Y+3, r26	; 0x03
     93a:	bc 83       	std	Y+4, r27	; 0x04
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	4a e7       	ldi	r20, 0x7A	; 122
     942:	53 e4       	ldi	r21, 0x43	; 67
     944:	69 81       	ldd	r22, Y+1	; 0x01
     946:	7a 81       	ldd	r23, Y+2	; 0x02
     948:	8b 81       	ldd	r24, Y+3	; 0x03
     94a:	9c 81       	ldd	r25, Y+4	; 0x04
     94c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     950:	dc 01       	movw	r26, r24
     952:	cb 01       	movw	r24, r22
     954:	8d 83       	std	Y+5, r24	; 0x05
     956:	9e 83       	std	Y+6, r25	; 0x06
     958:	af 83       	std	Y+7, r26	; 0x07
     95a:	b8 87       	std	Y+8, r27	; 0x08
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	40 e8       	ldi	r20, 0x80	; 128
     962:	5f e3       	ldi	r21, 0x3F	; 63
     964:	6d 81       	ldd	r22, Y+5	; 0x05
     966:	7e 81       	ldd	r23, Y+6	; 0x06
     968:	8f 81       	ldd	r24, Y+7	; 0x07
     96a:	98 85       	ldd	r25, Y+8	; 0x08
     96c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__cmpsf2>
     970:	88 23       	and	r24, r24
     972:	2c f4       	brge	.+10     	; 0x97e <__stack+0x7f>
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	9a 87       	std	Y+10, r25	; 0x0a
     97a:	89 87       	std	Y+9, r24	; 0x09
     97c:	3f c0       	rjmp	.+126    	; 0x9fc <__stack+0xfd>
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	3f ef       	ldi	r19, 0xFF	; 255
     982:	4f e7       	ldi	r20, 0x7F	; 127
     984:	57 e4       	ldi	r21, 0x47	; 71
     986:	6d 81       	ldd	r22, Y+5	; 0x05
     988:	7e 81       	ldd	r23, Y+6	; 0x06
     98a:	8f 81       	ldd	r24, Y+7	; 0x07
     98c:	98 85       	ldd	r25, Y+8	; 0x08
     98e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__gesf2>
     992:	18 16       	cp	r1, r24
     994:	4c f5       	brge	.+82     	; 0x9e8 <__stack+0xe9>
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	40 e2       	ldi	r20, 0x20	; 32
     99c:	51 e4       	ldi	r21, 0x41	; 65
     99e:	69 81       	ldd	r22, Y+1	; 0x01
     9a0:	7a 81       	ldd	r23, Y+2	; 0x02
     9a2:	8b 81       	ldd	r24, Y+3	; 0x03
     9a4:	9c 81       	ldd	r25, Y+4	; 0x04
     9a6:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	bc 01       	movw	r22, r24
     9b0:	cd 01       	movw	r24, r26
     9b2:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__fixunssfsi>
     9b6:	dc 01       	movw	r26, r24
     9b8:	cb 01       	movw	r24, r22
     9ba:	9a 87       	std	Y+10, r25	; 0x0a
     9bc:	89 87       	std	Y+9, r24	; 0x09
     9be:	0f c0       	rjmp	.+30     	; 0x9de <__stack+0xdf>
     9c0:	89 e1       	ldi	r24, 0x19	; 25
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	9c 87       	std	Y+12, r25	; 0x0c
     9c6:	8b 87       	std	Y+11, r24	; 0x0b
     9c8:	8b 85       	ldd	r24, Y+11	; 0x0b
     9ca:	9c 85       	ldd	r25, Y+12	; 0x0c
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <__stack+0xcd>
     9d0:	9c 87       	std	Y+12, r25	; 0x0c
     9d2:	8b 87       	std	Y+11, r24	; 0x0b
     9d4:	89 85       	ldd	r24, Y+9	; 0x09
     9d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	9a 87       	std	Y+10, r25	; 0x0a
     9dc:	89 87       	std	Y+9, r24	; 0x09
     9de:	89 85       	ldd	r24, Y+9	; 0x09
     9e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9e2:	89 2b       	or	r24, r25
     9e4:	69 f7       	brne	.-38     	; 0x9c0 <__stack+0xc1>
     9e6:	14 c0       	rjmp	.+40     	; 0xa10 <__stack+0x111>
     9e8:	6d 81       	ldd	r22, Y+5	; 0x05
     9ea:	7e 81       	ldd	r23, Y+6	; 0x06
     9ec:	8f 81       	ldd	r24, Y+7	; 0x07
     9ee:	98 85       	ldd	r25, Y+8	; 0x08
     9f0:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__fixunssfsi>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	9a 87       	std	Y+10, r25	; 0x0a
     9fa:	89 87       	std	Y+9, r24	; 0x09
     9fc:	89 85       	ldd	r24, Y+9	; 0x09
     9fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     a00:	9e 87       	std	Y+14, r25	; 0x0e
     a02:	8d 87       	std	Y+13, r24	; 0x0d
     a04:	8d 85       	ldd	r24, Y+13	; 0x0d
     a06:	9e 85       	ldd	r25, Y+14	; 0x0e
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <__stack+0x109>
     a0c:	9e 87       	std	Y+14, r25	; 0x0e
     a0e:	8d 87       	std	Y+13, r24	; 0x0d
     a10:	00 00       	nop
     a12:	2f 96       	adiw	r28, 0x0f	; 15
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	f8 94       	cli
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	cd bf       	out	0x3d, r28	; 61
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <lcd_puts>:
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	00 d0       	rcall	.+0      	; 0xa2a <lcd_puts+0x6>
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
     a2e:	9a 83       	std	Y+2, r25	; 0x02
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	0b c0       	rjmp	.+22     	; 0xa4a <lcd_puts+0x26>
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	9a 81       	ldd	r25, Y+2	; 0x02
     a38:	9c 01       	movw	r18, r24
     a3a:	2f 5f       	subi	r18, 0xFF	; 255
     a3c:	3f 4f       	sbci	r19, 0xFF	; 255
     a3e:	3a 83       	std	Y+2, r19	; 0x02
     a40:	29 83       	std	Y+1, r18	; 0x01
     a42:	fc 01       	movw	r30, r24
     a44:	80 81       	ld	r24, Z
     a46:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <lcd_putc>
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
     a4c:	9a 81       	ldd	r25, Y+2	; 0x02
     a4e:	fc 01       	movw	r30, r24
     a50:	80 81       	ld	r24, Z
     a52:	88 23       	and	r24, r24
     a54:	79 f7       	brne	.-34     	; 0xa34 <lcd_puts+0x10>
     a56:	00 00       	nop
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <lcd_init>:

// initialize the LCD controller

void lcd_init(unsigned char command)

{
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
     a6a:	a4 97       	sbiw	r28, 0x24	; 36
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	cd bf       	out	0x3d, r28	; 61
     a76:	8c a3       	std	Y+36, r24	; 0x24

    // High-Nibble von Byte 8 = Display Control:

    // 1DCB****  D: Disp on/off; C: Cursor on/off  B: blink on/off

    char init_sequenz[] = { 0x33, 0x32, 0x28, 0x0C, 0x06, 0x01 };
     a78:	86 e0       	ldi	r24, 0x06	; 6
     a7a:	eb e1       	ldi	r30, 0x1B	; 27
     a7c:	f1 e0       	ldi	r31, 0x01	; 1
     a7e:	de 01       	movw	r26, r28
     a80:	5e 96       	adiw	r26, 0x1e	; 30
     a82:	01 90       	ld	r0, Z+
     a84:	0d 92       	st	X+, r0
     a86:	8a 95       	dec	r24
     a88:	e1 f7       	brne	.-8      	; 0xa82 <lcd_init+0x20>

    _lcd_maxx = LCD_DISP_LENGTH;
     a8a:	80 e1       	ldi	r24, 0x10	; 16
     a8c:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <_lcd_maxx>

   // _base_y[2] = _base_y[0] + _lcd_maxx;

    //_base_y[3] = _base_y[1] + _lcd_maxx;

    I2C_INIT();
     a90:	0e 94 b3 08 	call	0x1166	; 0x1166 <i2c_init>
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	a0 ef       	ldi	r26, 0xF0	; 240
     a9a:	b1 e4       	ldi	r27, 0x41	; 65
     a9c:	8e 83       	std	Y+6, r24	; 0x06
     a9e:	9f 83       	std	Y+7, r25	; 0x07
     aa0:	a8 87       	std	Y+8, r26	; 0x08
     aa2:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	4a e7       	ldi	r20, 0x7A	; 122
     aaa:	53 e4       	ldi	r21, 0x43	; 67
     aac:	6e 81       	ldd	r22, Y+6	; 0x06
     aae:	7f 81       	ldd	r23, Y+7	; 0x07
     ab0:	88 85       	ldd	r24, Y+8	; 0x08
     ab2:	99 85       	ldd	r25, Y+9	; 0x09
     ab4:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     ab8:	dc 01       	movw	r26, r24
     aba:	cb 01       	movw	r24, r22
     abc:	8a 87       	std	Y+10, r24	; 0x0a
     abe:	9b 87       	std	Y+11, r25	; 0x0b
     ac0:	ac 87       	std	Y+12, r26	; 0x0c
     ac2:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	40 e8       	ldi	r20, 0x80	; 128
     aca:	5f e3       	ldi	r21, 0x3F	; 63
     acc:	6a 85       	ldd	r22, Y+10	; 0x0a
     ace:	7b 85       	ldd	r23, Y+11	; 0x0b
     ad0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ad2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ad4:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__cmpsf2>
     ad8:	88 23       	and	r24, r24
     ada:	2c f4       	brge	.+10     	; 0xae6 <lcd_init+0x84>
		__ticks = 1;
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	9f 87       	std	Y+15, r25	; 0x0f
     ae2:	8e 87       	std	Y+14, r24	; 0x0e
     ae4:	3f c0       	rjmp	.+126    	; 0xb64 <lcd_init+0x102>
	else if (__tmp > 65535)
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	3f ef       	ldi	r19, 0xFF	; 255
     aea:	4f e7       	ldi	r20, 0x7F	; 127
     aec:	57 e4       	ldi	r21, 0x47	; 71
     aee:	6a 85       	ldd	r22, Y+10	; 0x0a
     af0:	7b 85       	ldd	r23, Y+11	; 0x0b
     af2:	8c 85       	ldd	r24, Y+12	; 0x0c
     af4:	9d 85       	ldd	r25, Y+13	; 0x0d
     af6:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__gesf2>
     afa:	18 16       	cp	r1, r24
     afc:	4c f5       	brge	.+82     	; 0xb50 <lcd_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	40 e2       	ldi	r20, 0x20	; 32
     b04:	51 e4       	ldi	r21, 0x41	; 65
     b06:	6e 81       	ldd	r22, Y+6	; 0x06
     b08:	7f 81       	ldd	r23, Y+7	; 0x07
     b0a:	88 85       	ldd	r24, Y+8	; 0x08
     b0c:	99 85       	ldd	r25, Y+9	; 0x09
     b0e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     b12:	dc 01       	movw	r26, r24
     b14:	cb 01       	movw	r24, r22
     b16:	bc 01       	movw	r22, r24
     b18:	cd 01       	movw	r24, r26
     b1a:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__fixunssfsi>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	9f 87       	std	Y+15, r25	; 0x0f
     b24:	8e 87       	std	Y+14, r24	; 0x0e
     b26:	0f c0       	rjmp	.+30     	; 0xb46 <lcd_init+0xe4>
     b28:	89 e1       	ldi	r24, 0x19	; 25
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	99 8b       	std	Y+17, r25	; 0x11
     b2e:	88 8b       	std	Y+16, r24	; 0x10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b30:	88 89       	ldd	r24, Y+16	; 0x10
     b32:	99 89       	ldd	r25, Y+17	; 0x11
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	f1 f7       	brne	.-4      	; 0xb34 <lcd_init+0xd2>
     b38:	99 8b       	std	Y+17, r25	; 0x11
     b3a:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b3c:	8e 85       	ldd	r24, Y+14	; 0x0e
     b3e:	9f 85       	ldd	r25, Y+15	; 0x0f
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	9f 87       	std	Y+15, r25	; 0x0f
     b44:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b46:	8e 85       	ldd	r24, Y+14	; 0x0e
     b48:	9f 85       	ldd	r25, Y+15	; 0x0f
     b4a:	89 2b       	or	r24, r25
     b4c:	69 f7       	brne	.-38     	; 0xb28 <lcd_init+0xc6>
     b4e:	14 c0       	rjmp	.+40     	; 0xb78 <lcd_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b50:	6a 85       	ldd	r22, Y+10	; 0x0a
     b52:	7b 85       	ldd	r23, Y+11	; 0x0b
     b54:	8c 85       	ldd	r24, Y+12	; 0x0c
     b56:	9d 85       	ldd	r25, Y+13	; 0x0d
     b58:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__fixunssfsi>
     b5c:	dc 01       	movw	r26, r24
     b5e:	cb 01       	movw	r24, r22
     b60:	9f 87       	std	Y+15, r25	; 0x0f
     b62:	8e 87       	std	Y+14, r24	; 0x0e
     b64:	8e 85       	ldd	r24, Y+14	; 0x0e
     b66:	9f 85       	ldd	r25, Y+15	; 0x0f
     b68:	9b 8b       	std	Y+19, r25	; 0x13
     b6a:	8a 8b       	std	Y+18, r24	; 0x12
     b6c:	8a 89       	ldd	r24, Y+18	; 0x12
     b6e:	9b 89       	ldd	r25, Y+19	; 0x13
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	f1 f7       	brne	.-4      	; 0xb70 <lcd_init+0x10e>
     b74:	9b 8b       	std	Y+19, r25	; 0x13
     b76:	8a 8b       	std	Y+18, r24	; 0x12

    _delay_ms(30);               // 30 ms Delay nach power-up

    for (i = 0; i < sizeof(init_sequenz); i++) {
     b78:	19 82       	std	Y+1, r1	; 0x01
     b7a:	82 c0       	rjmp	.+260    	; 0xc80 <lcd_init+0x21e>

        wr_lcd_mode(init_sequenz[i], 0);
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	88 2f       	mov	r24, r24
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	9e 01       	movw	r18, r28
     b84:	22 5e       	subi	r18, 0xE2	; 226
     b86:	3f 4f       	sbci	r19, 0xFF	; 255
     b88:	82 0f       	add	r24, r18
     b8a:	93 1f       	adc	r25, r19
     b8c:	fc 01       	movw	r30, r24
     b8e:	80 81       	ld	r24, Z
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <wr_lcd_mode>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 ea       	ldi	r26, 0xA0	; 160
     b9c:	b0 e4       	ldi	r27, 0x40	; 64
     b9e:	8a 83       	std	Y+2, r24	; 0x02
     ba0:	9b 83       	std	Y+3, r25	; 0x03
     ba2:	ac 83       	std	Y+4, r26	; 0x04
     ba4:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	4a e7       	ldi	r20, 0x7A	; 122
     bac:	53 e4       	ldi	r21, 0x43	; 67
     bae:	6a 81       	ldd	r22, Y+2	; 0x02
     bb0:	7b 81       	ldd	r23, Y+3	; 0x03
     bb2:	8c 81       	ldd	r24, Y+4	; 0x04
     bb4:	9d 81       	ldd	r25, Y+5	; 0x05
     bb6:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	8c 8b       	std	Y+20, r24	; 0x14
     bc0:	9d 8b       	std	Y+21, r25	; 0x15
     bc2:	ae 8b       	std	Y+22, r26	; 0x16
     bc4:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	40 e8       	ldi	r20, 0x80	; 128
     bcc:	5f e3       	ldi	r21, 0x3F	; 63
     bce:	6c 89       	ldd	r22, Y+20	; 0x14
     bd0:	7d 89       	ldd	r23, Y+21	; 0x15
     bd2:	8e 89       	ldd	r24, Y+22	; 0x16
     bd4:	9f 89       	ldd	r25, Y+23	; 0x17
     bd6:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__cmpsf2>
     bda:	88 23       	and	r24, r24
     bdc:	2c f4       	brge	.+10     	; 0xbe8 <lcd_init+0x186>
		__ticks = 1;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	99 8f       	std	Y+25, r25	; 0x19
     be4:	88 8f       	std	Y+24, r24	; 0x18
     be6:	3f c0       	rjmp	.+126    	; 0xc66 <lcd_init+0x204>
	else if (__tmp > 65535)
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	3f ef       	ldi	r19, 0xFF	; 255
     bec:	4f e7       	ldi	r20, 0x7F	; 127
     bee:	57 e4       	ldi	r21, 0x47	; 71
     bf0:	6c 89       	ldd	r22, Y+20	; 0x14
     bf2:	7d 89       	ldd	r23, Y+21	; 0x15
     bf4:	8e 89       	ldd	r24, Y+22	; 0x16
     bf6:	9f 89       	ldd	r25, Y+23	; 0x17
     bf8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__gesf2>
     bfc:	18 16       	cp	r1, r24
     bfe:	4c f5       	brge	.+82     	; 0xc52 <lcd_init+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e2       	ldi	r20, 0x20	; 32
     c06:	51 e4       	ldi	r21, 0x41	; 65
     c08:	6a 81       	ldd	r22, Y+2	; 0x02
     c0a:	7b 81       	ldd	r23, Y+3	; 0x03
     c0c:	8c 81       	ldd	r24, Y+4	; 0x04
     c0e:	9d 81       	ldd	r25, Y+5	; 0x05
     c10:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	bc 01       	movw	r22, r24
     c1a:	cd 01       	movw	r24, r26
     c1c:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__fixunssfsi>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	99 8f       	std	Y+25, r25	; 0x19
     c26:	88 8f       	std	Y+24, r24	; 0x18
     c28:	0f c0       	rjmp	.+30     	; 0xc48 <lcd_init+0x1e6>
     c2a:	89 e1       	ldi	r24, 0x19	; 25
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	9b 8f       	std	Y+27, r25	; 0x1b
     c30:	8a 8f       	std	Y+26, r24	; 0x1a
     c32:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c34:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <lcd_init+0x1d4>
     c3a:	9b 8f       	std	Y+27, r25	; 0x1b
     c3c:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3e:	88 8d       	ldd	r24, Y+24	; 0x18
     c40:	99 8d       	ldd	r25, Y+25	; 0x19
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	99 8f       	std	Y+25, r25	; 0x19
     c46:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c48:	88 8d       	ldd	r24, Y+24	; 0x18
     c4a:	99 8d       	ldd	r25, Y+25	; 0x19
     c4c:	89 2b       	or	r24, r25
     c4e:	69 f7       	brne	.-38     	; 0xc2a <lcd_init+0x1c8>
     c50:	14 c0       	rjmp	.+40     	; 0xc7a <lcd_init+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c52:	6c 89       	ldd	r22, Y+20	; 0x14
     c54:	7d 89       	ldd	r23, Y+21	; 0x15
     c56:	8e 89       	ldd	r24, Y+22	; 0x16
     c58:	9f 89       	ldd	r25, Y+23	; 0x17
     c5a:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__fixunssfsi>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	99 8f       	std	Y+25, r25	; 0x19
     c64:	88 8f       	std	Y+24, r24	; 0x18
     c66:	88 8d       	ldd	r24, Y+24	; 0x18
     c68:	99 8d       	ldd	r25, Y+25	; 0x19
     c6a:	9d 8f       	std	Y+29, r25	; 0x1d
     c6c:	8c 8f       	std	Y+28, r24	; 0x1c
     c6e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c70:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <lcd_init+0x210>
     c76:	9d 8f       	std	Y+29, r25	; 0x1d
     c78:	8c 8f       	std	Y+28, r24	; 0x1c

    I2C_INIT();

    _delay_ms(30);               // 30 ms Delay nach power-up

    for (i = 0; i < sizeof(init_sequenz); i++) {
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	8f 5f       	subi	r24, 0xFF	; 255
     c7e:	89 83       	std	Y+1, r24	; 0x01
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	86 30       	cpi	r24, 0x06	; 6
     c84:	08 f4       	brcc	.+2      	; 0xc88 <lcd_init+0x226>
     c86:	7a cf       	rjmp	.-268    	; 0xb7c <lcd_init+0x11a>

        _delay_ms(5);

    }

	wr_lcd_mode(command, 0);
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	8c a1       	ldd	r24, Y+36	; 0x24
     c8c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <wr_lcd_mode>

}
     c90:	00 00       	nop
     c92:	a4 96       	adiw	r28, 0x24	; 36
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	08 95       	ret

00000ca4 <lcd_backlight>:


void lcd_backlight(char on)

{
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	1f 92       	push	r1
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	89 83       	std	Y+1, r24	; 0x01

    wr_lcd_mode(on, 8);
     cb0:	68 e0       	ldi	r22, 0x08	; 8
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <wr_lcd_mode>

     cb8:	00 00       	nop
     cba:	0f 90       	pop	r0
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	08 95       	ret

00000cc2 <main>:
	In each mode display the mode and the appro
*/

extern volatile uint8_t setVal;

int main(void) {
     cc2:	cf 92       	push	r12
     cc4:	ef 92       	push	r14
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	61 97       	sbiw	r28, 0x11	; 17
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
	uint8_t mode = MODE_SIGNAL;
     cde:	19 82       	std	Y+1, r1	; 0x01
	uint8_t signal = SIGNAL_SIN;
     ce0:	1a 82       	std	Y+2, r1	; 0x02
	uint32_t frequency = INIT_FREQ;
     ce2:	80 ea       	ldi	r24, 0xA0	; 160
     ce4:	96 e8       	ldi	r25, 0x86	; 134
     ce6:	a1 e0       	ldi	r26, 0x01	; 1
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	8b 83       	std	Y+3, r24	; 0x03
     cec:	9c 83       	std	Y+4, r25	; 0x04
     cee:	ad 83       	std	Y+5, r26	; 0x05
     cf0:	be 83       	std	Y+6, r27	; 0x06
	uint16_t phase = 0;
     cf2:	18 86       	std	Y+8, r1	; 0x08
     cf4:	1f 82       	std	Y+7, r1	; 0x07
	int8_t voltage = 1; // probably won't be able to display voltage
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	89 87       	std	Y+9, r24	; 0x09
	const uint8_t aQuiescent = ROTARY_PIN & (1<<ROTARY_A);
     cfa:	86 e2       	ldi	r24, 0x26	; 38
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	fc 01       	movw	r30, r24
     d00:	80 81       	ld	r24, Z
     d02:	81 70       	andi	r24, 0x01	; 1
     d04:	88 8b       	std	Y+16, r24	; 0x10
	uint8_t rotation = NO_ROTATION;
     d06:	1a 86       	std	Y+10, r1	; 0x0a
	
	uint8_t modeLast = mode;
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	89 8b       	std	Y+17, r24	; 0x11
 	uint8_t signalLast = signal;
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	8b 87       	std	Y+11, r24	; 0x0b
 	uint32_t freqLast = frequency;
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	9c 81       	ldd	r25, Y+4	; 0x04
     d14:	ad 81       	ldd	r26, Y+5	; 0x05
     d16:	be 81       	ldd	r27, Y+6	; 0x06
     d18:	8c 87       	std	Y+12, r24	; 0x0c
     d1a:	9d 87       	std	Y+13, r25	; 0x0d
     d1c:	ae 87       	std	Y+14, r26	; 0x0e
     d1e:	bf 87       	std	Y+15, r27	; 0x0f
// 	uint16_t phaseLast = phase;
	uiInit();
     d20:	0e 94 49 09 	call	0x1292	; 0x1292 <uiInit>
	SPI_init();
     d24:	0e 94 4f 08 	call	0x109e	; 0x109e <SPI_init>
	AD9833_init();
     d28:	0e 94 79 00 	call	0xf2	; 0xf2 <AD9833_init>
	sei();
     d2c:	78 94       	sei
	while (1) {
		rotation = setRotaryStatus(aQuiescent, rotation);
     d2e:	6a 85       	ldd	r22, Y+10	; 0x0a
     d30:	88 89       	ldd	r24, Y+16	; 0x10
     d32:	0e 94 f7 07 	call	0xfee	; 0xfee <setRotaryStatus>
     d36:	8a 87       	std	Y+10, r24	; 0x0a
		if (setVal) {
     d38:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <setVal>
     d3c:	88 23       	and	r24, r24
     d3e:	09 f4       	brne	.+2      	; 0xd42 <main+0x80>
     d40:	8b c0       	rjmp	.+278    	; 0xe58 <main+0x196>
			switch(mode) {
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	88 2f       	mov	r24, r24
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	91 05       	cpc	r25, r1
     d4c:	f1 f0       	breq	.+60     	; 0xd8a <main+0xc8>
     d4e:	82 30       	cpi	r24, 0x02	; 2
     d50:	91 05       	cpc	r25, r1
     d52:	1c f4       	brge	.+6      	; 0xd5a <main+0x98>
     d54:	89 2b       	or	r24, r25
     d56:	41 f0       	breq	.+16     	; 0xd68 <main+0xa6>
     d58:	c7 c0       	rjmp	.+398    	; 0xee8 <main+0x226>
     d5a:	82 30       	cpi	r24, 0x02	; 2
     d5c:	91 05       	cpc	r25, r1
     d5e:	59 f1       	breq	.+86     	; 0xdb6 <main+0xf4>
     d60:	03 97       	sbiw	r24, 0x03	; 3
     d62:	09 f4       	brne	.+2      	; 0xd66 <main+0xa4>
     d64:	5b c0       	rjmp	.+182    	; 0xe1c <main+0x15a>
     d66:	c0 c0       	rjmp	.+384    	; 0xee8 <main+0x226>
				case MODE_SIGNAL:
					if (rotation == CLOCKWISE) {
     d68:	8a 85       	ldd	r24, Y+10	; 0x0a
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	29 f4       	brne	.+10     	; 0xd78 <main+0xb6>
						signal = (signal+1)&3; }
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	8f 5f       	subi	r24, 0xFF	; 255
     d72:	83 70       	andi	r24, 0x03	; 3
     d74:	8a 83       	std	Y+2, r24	; 0x02
					else if (rotation == COUNTERCLOCKWISE) {
						signal = (signal-1)&3; }
					break;
     d76:	b1 c0       	rjmp	.+354    	; 0xeda <main+0x218>
		if (setVal) {
			switch(mode) {
				case MODE_SIGNAL:
					if (rotation == CLOCKWISE) {
						signal = (signal+1)&3; }
					else if (rotation == COUNTERCLOCKWISE) {
     d78:	8a 85       	ldd	r24, Y+10	; 0x0a
     d7a:	82 30       	cpi	r24, 0x02	; 2
     d7c:	09 f0       	breq	.+2      	; 0xd80 <main+0xbe>
     d7e:	ad c0       	rjmp	.+346    	; 0xeda <main+0x218>
						signal = (signal-1)&3; }
     d80:	8a 81       	ldd	r24, Y+2	; 0x02
     d82:	81 50       	subi	r24, 0x01	; 1
     d84:	83 70       	andi	r24, 0x03	; 3
     d86:	8a 83       	std	Y+2, r24	; 0x02
					break;
     d88:	a8 c0       	rjmp	.+336    	; 0xeda <main+0x218>
				case MODE_VOLTAGE:
					if ((rotation == CLOCKWISE) && (voltage < V_MAX)) {
     d8a:	8a 85       	ldd	r24, Y+10	; 0x0a
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	39 f4       	brne	.+14     	; 0xd9e <main+0xdc>
     d90:	89 85       	ldd	r24, Y+9	; 0x09
     d92:	84 31       	cpi	r24, 0x14	; 20
     d94:	24 f4       	brge	.+8      	; 0xd9e <main+0xdc>
						voltage++; }
     d96:	89 85       	ldd	r24, Y+9	; 0x09
     d98:	8f 5f       	subi	r24, 0xFF	; 255
     d9a:	89 87       	std	Y+9, r24	; 0x09
					else if ((rotation == COUNTERCLOCKWISE) && (voltage > V_MIN)) {
						voltage--; }
					break;
     d9c:	a0 c0       	rjmp	.+320    	; 0xede <main+0x21c>
						signal = (signal-1)&3; }
					break;
				case MODE_VOLTAGE:
					if ((rotation == CLOCKWISE) && (voltage < V_MAX)) {
						voltage++; }
					else if ((rotation == COUNTERCLOCKWISE) && (voltage > V_MIN)) {
     d9e:	8a 85       	ldd	r24, Y+10	; 0x0a
     da0:	82 30       	cpi	r24, 0x02	; 2
     da2:	09 f0       	breq	.+2      	; 0xda6 <main+0xe4>
     da4:	9c c0       	rjmp	.+312    	; 0xede <main+0x21c>
     da6:	89 85       	ldd	r24, Y+9	; 0x09
     da8:	8d 3e       	cpi	r24, 0xED	; 237
     daa:	0c f4       	brge	.+2      	; 0xdae <main+0xec>
     dac:	98 c0       	rjmp	.+304    	; 0xede <main+0x21c>
						voltage--; }
     dae:	89 85       	ldd	r24, Y+9	; 0x09
     db0:	81 50       	subi	r24, 0x01	; 1
     db2:	89 87       	std	Y+9, r24	; 0x09
					break;
     db4:	94 c0       	rjmp	.+296    	; 0xede <main+0x21c>
				case MODE_FREQUENCY:
					if ((rotation == CLOCKWISE) && (frequency < FREQ_MAX)) {
     db6:	8a 85       	ldd	r24, Y+10	; 0x0a
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	b1 f4       	brne	.+44     	; 0xde8 <main+0x126>
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	9c 81       	ldd	r25, Y+4	; 0x04
     dc0:	ad 81       	ldd	r26, Y+5	; 0x05
     dc2:	be 81       	ldd	r27, Y+6	; 0x06
     dc4:	80 32       	cpi	r24, 0x20	; 32
     dc6:	9c 4b       	sbci	r25, 0xBC	; 188
     dc8:	ae 4b       	sbci	r26, 0xBE	; 190
     dca:	b1 05       	cpc	r27, r1
     dcc:	68 f4       	brcc	.+26     	; 0xde8 <main+0x126>
						frequency+=200; }
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	9c 81       	ldd	r25, Y+4	; 0x04
     dd2:	ad 81       	ldd	r26, Y+5	; 0x05
     dd4:	be 81       	ldd	r27, Y+6	; 0x06
     dd6:	88 53       	subi	r24, 0x38	; 56
     dd8:	9f 4f       	sbci	r25, 0xFF	; 255
     dda:	af 4f       	sbci	r26, 0xFF	; 255
     ddc:	bf 4f       	sbci	r27, 0xFF	; 255
     dde:	8b 83       	std	Y+3, r24	; 0x03
     de0:	9c 83       	std	Y+4, r25	; 0x04
     de2:	ad 83       	std	Y+5, r26	; 0x05
     de4:	be 83       	std	Y+6, r27	; 0x06
					else if ((rotation == COUNTERCLOCKWISE) && (frequency > FREQ_MIN)) {
						frequency-=200; }
					break;
     de6:	7d c0       	rjmp	.+250    	; 0xee2 <main+0x220>
						voltage--; }
					break;
				case MODE_FREQUENCY:
					if ((rotation == CLOCKWISE) && (frequency < FREQ_MAX)) {
						frequency+=200; }
					else if ((rotation == COUNTERCLOCKWISE) && (frequency > FREQ_MIN)) {
     de8:	8a 85       	ldd	r24, Y+10	; 0x0a
     dea:	82 30       	cpi	r24, 0x02	; 2
     dec:	09 f0       	breq	.+2      	; 0xdf0 <main+0x12e>
     dee:	79 c0       	rjmp	.+242    	; 0xee2 <main+0x220>
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	9c 81       	ldd	r25, Y+4	; 0x04
     df4:	ad 81       	ldd	r26, Y+5	; 0x05
     df6:	be 81       	ldd	r27, Y+6	; 0x06
     df8:	02 97       	sbiw	r24, 0x02	; 2
     dfa:	a1 05       	cpc	r26, r1
     dfc:	b1 05       	cpc	r27, r1
     dfe:	08 f4       	brcc	.+2      	; 0xe02 <main+0x140>
     e00:	70 c0       	rjmp	.+224    	; 0xee2 <main+0x220>
						frequency-=200; }
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	9c 81       	ldd	r25, Y+4	; 0x04
     e06:	ad 81       	ldd	r26, Y+5	; 0x05
     e08:	be 81       	ldd	r27, Y+6	; 0x06
     e0a:	88 5c       	subi	r24, 0xC8	; 200
     e0c:	91 09       	sbc	r25, r1
     e0e:	a1 09       	sbc	r26, r1
     e10:	b1 09       	sbc	r27, r1
     e12:	8b 83       	std	Y+3, r24	; 0x03
     e14:	9c 83       	std	Y+4, r25	; 0x04
     e16:	ad 83       	std	Y+5, r26	; 0x05
     e18:	be 83       	std	Y+6, r27	; 0x06
					break;
     e1a:	63 c0       	rjmp	.+198    	; 0xee2 <main+0x220>
				case MODE_PHASE:
					if ((rotation == CLOCKWISE) && (phase < PHASE_MAX)) {
     e1c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	59 f4       	brne	.+22     	; 0xe38 <main+0x176>
     e22:	8f 81       	ldd	r24, Y+7	; 0x07
     e24:	98 85       	ldd	r25, Y+8	; 0x08
     e26:	88 36       	cpi	r24, 0x68	; 104
     e28:	91 40       	sbci	r25, 0x01	; 1
     e2a:	30 f4       	brcc	.+12     	; 0xe38 <main+0x176>
						phase++; }
     e2c:	8f 81       	ldd	r24, Y+7	; 0x07
     e2e:	98 85       	ldd	r25, Y+8	; 0x08
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	98 87       	std	Y+8, r25	; 0x08
     e34:	8f 83       	std	Y+7, r24	; 0x07
     e36:	0e c0       	rjmp	.+28     	; 0xe54 <main+0x192>
					else if ((rotation == COUNTERCLOCKWISE) && (phase > PHASE_MIN)) {
     e38:	8a 85       	ldd	r24, Y+10	; 0x0a
     e3a:	82 30       	cpi	r24, 0x02	; 2
     e3c:	09 f0       	breq	.+2      	; 0xe40 <main+0x17e>
     e3e:	53 c0       	rjmp	.+166    	; 0xee6 <main+0x224>
     e40:	8f 81       	ldd	r24, Y+7	; 0x07
     e42:	98 85       	ldd	r25, Y+8	; 0x08
     e44:	89 2b       	or	r24, r25
     e46:	09 f4       	brne	.+2      	; 0xe4a <main+0x188>
     e48:	4e c0       	rjmp	.+156    	; 0xee6 <main+0x224>
						phase--; }
     e4a:	8f 81       	ldd	r24, Y+7	; 0x07
     e4c:	98 85       	ldd	r25, Y+8	; 0x08
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	98 87       	std	Y+8, r25	; 0x08
     e52:	8f 83       	std	Y+7, r24	; 0x07
					break;
     e54:	00 00       	nop
     e56:	47 c0       	rjmp	.+142    	; 0xee6 <main+0x224>
			}
		}
		else {
			if (signal != signalLast) {
     e58:	9a 81       	ldd	r25, Y+2	; 0x02
     e5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e5c:	98 17       	cp	r25, r24
     e5e:	39 f0       	breq	.+14     	; 0xe6e <main+0x1ac>
			 	cli();
     e60:	f8 94       	cli
			 	setSignalOut(signal);
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	0e 94 8e 02 	call	0x51c	; 0x51c <setSignalOut>
			 	signalLast = signal;
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	8b 87       	std	Y+11, r24	; 0x0b
			 	sei();
     e6c:	78 94       	sei
			}
			if (frequency != freqLast) {
     e6e:	2b 81       	ldd	r18, Y+3	; 0x03
     e70:	3c 81       	ldd	r19, Y+4	; 0x04
     e72:	4d 81       	ldd	r20, Y+5	; 0x05
     e74:	5e 81       	ldd	r21, Y+6	; 0x06
     e76:	8c 85       	ldd	r24, Y+12	; 0x0c
     e78:	9d 85       	ldd	r25, Y+13	; 0x0d
     e7a:	ae 85       	ldd	r26, Y+14	; 0x0e
     e7c:	bf 85       	ldd	r27, Y+15	; 0x0f
     e7e:	28 17       	cp	r18, r24
     e80:	39 07       	cpc	r19, r25
     e82:	4a 07       	cpc	r20, r26
     e84:	5b 07       	cpc	r21, r27
     e86:	99 f0       	breq	.+38     	; 0xeae <main+0x1ec>
				cli();
     e88:	f8 94       	cli
				freqChange(frequency,0);
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	9c 81       	ldd	r25, Y+4	; 0x04
     e8e:	ad 81       	ldd	r26, Y+5	; 0x05
     e90:	be 81       	ldd	r27, Y+6	; 0x06
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	bc 01       	movw	r22, r24
     e96:	cd 01       	movw	r24, r26
     e98:	0e 94 99 00 	call	0x132	; 0x132 <freqChange>
				freqLast = frequency;
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	ad 81       	ldd	r26, Y+5	; 0x05
     ea2:	be 81       	ldd	r27, Y+6	; 0x06
     ea4:	8c 87       	std	Y+12, r24	; 0x0c
     ea6:	9d 87       	std	Y+13, r25	; 0x0d
     ea8:	ae 87       	std	Y+14, r26	; 0x0e
     eaa:	bf 87       	std	Y+15, r27	; 0x0f
				sei();
     eac:	78 94       	sei
			}
			if (rotation == CLOCKWISE) {
     eae:	8a 85       	ldd	r24, Y+10	; 0x0a
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	41 f4       	brne	.+16     	; 0xec4 <main+0x202>
				mode = getNextMode(mode, &modeLast); }
     eb4:	ce 01       	movw	r24, r28
     eb6:	41 96       	adiw	r24, 0x11	; 17
     eb8:	bc 01       	movw	r22, r24
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	0e 94 c5 07 	call	0xf8a	; 0xf8a <getNextMode>
     ec0:	89 83       	std	Y+1, r24	; 0x01
     ec2:	12 c0       	rjmp	.+36     	; 0xee8 <main+0x226>
			else if (rotation == COUNTERCLOCKWISE) {
     ec4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ec6:	82 30       	cpi	r24, 0x02	; 2
     ec8:	79 f4       	brne	.+30     	; 0xee8 <main+0x226>
				mode = getPreviousMode(mode, &modeLast); }
     eca:	ce 01       	movw	r24, r28
     ecc:	41 96       	adiw	r24, 0x11	; 17
     ece:	bc 01       	movw	r22, r24
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	0e 94 de 07 	call	0xfbc	; 0xfbc <getPreviousMode>
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	07 c0       	rjmp	.+14     	; 0xee8 <main+0x226>
				case MODE_SIGNAL:
					if (rotation == CLOCKWISE) {
						signal = (signal+1)&3; }
					else if (rotation == COUNTERCLOCKWISE) {
						signal = (signal-1)&3; }
					break;
     eda:	00 00       	nop
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <main+0x226>
				case MODE_VOLTAGE:
					if ((rotation == CLOCKWISE) && (voltage < V_MAX)) {
						voltage++; }
					else if ((rotation == COUNTERCLOCKWISE) && (voltage > V_MIN)) {
						voltage--; }
					break;
     ede:	00 00       	nop
     ee0:	03 c0       	rjmp	.+6      	; 0xee8 <main+0x226>
				case MODE_FREQUENCY:
					if ((rotation == CLOCKWISE) && (frequency < FREQ_MAX)) {
						frequency+=200; }
					else if ((rotation == COUNTERCLOCKWISE) && (frequency > FREQ_MIN)) {
						frequency-=200; }
					break;
     ee2:	00 00       	nop
     ee4:	01 c0       	rjmp	.+2      	; 0xee8 <main+0x226>
				case MODE_PHASE:
					if ((rotation == CLOCKWISE) && (phase < PHASE_MAX)) {
						phase++; }
					else if ((rotation == COUNTERCLOCKWISE) && (phase > PHASE_MIN)) {
						phase--; }
					break;
     ee6:	00 00       	nop
				mode = getNextMode(mode, &modeLast); }
			else if (rotation == COUNTERCLOCKWISE) {
				mode = getPreviousMode(mode, &modeLast); }
		}
		// display mode and value with units
		if (rotation != NO_ROTATION) {
     ee8:	8a 85       	ldd	r24, Y+10	; 0x0a
     eea:	88 23       	and	r24, r24
     eec:	09 f4       	brne	.+2      	; 0xef0 <main+0x22e>
     eee:	1f cf       	rjmp	.-450    	; 0xd2e <main+0x6c>
			displayRefresh(mode, &modeLast, frequency, phase, voltage, signal); }
     ef0:	2f 81       	ldd	r18, Y+7	; 0x07
     ef2:	38 85       	ldd	r19, Y+8	; 0x08
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	9c 81       	ldd	r25, Y+4	; 0x04
     ef8:	ad 81       	ldd	r26, Y+5	; 0x05
     efa:	be 81       	ldd	r27, Y+6	; 0x06
     efc:	be 01       	movw	r22, r28
     efe:	6f 5e       	subi	r22, 0xEF	; 239
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	ca 80       	ldd	r12, Y+2	; 0x02
     f04:	e9 84       	ldd	r14, Y+9	; 0x09
     f06:	89 01       	movw	r16, r18
     f08:	9c 01       	movw	r18, r24
     f0a:	ad 01       	movw	r20, r26
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <displayRefresh>
	}
     f12:	0d cf       	rjmp	.-486    	; 0xd2e <main+0x6c>

00000f14 <rotaryInit>:
#include "rotary.h"

volatile uint8_t setVal = 0;

void rotaryInit(void) {
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
	ROTARY_DDR &= ~((1<<ROTARY_A) | (1<<ROTARY_B) | (1<<ROTARY_BUTTON)); // encoder pins and button set as input
     f1c:	87 e2       	ldi	r24, 0x27	; 39
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	27 e2       	ldi	r18, 0x27	; 39
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	f9 01       	movw	r30, r18
     f26:	20 81       	ld	r18, Z
     f28:	28 7f       	andi	r18, 0xF8	; 248
     f2a:	fc 01       	movw	r30, r24
     f2c:	20 83       	st	Z, r18
	ROTARY_PORT |= (1<<ROTARY_A) | (1<<ROTARY_B); // set pull-up resistors on encoder pins.
     f2e:	88 e2       	ldi	r24, 0x28	; 40
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	28 e2       	ldi	r18, 0x28	; 40
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	f9 01       	movw	r30, r18
     f38:	20 81       	ld	r18, Z
     f3a:	23 60       	ori	r18, 0x03	; 3
     f3c:	fc 01       	movw	r30, r24
     f3e:	20 83       	st	Z, r18
	initHeartbeatTimer();
     f40:	0e 94 a6 07 	call	0xf4c	; 0xf4c <initHeartbeatTimer>
}
     f44:	00 00       	nop
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	08 95       	ret

00000f4c <initHeartbeatTimer>:

// Init timer0 - int0 8bit PS=1024 , ticks = 78 , freq ~= 200Hz , period ~= 5ms
void initHeartbeatTimer() {
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 78;					// set Timer0 to tick for 10ms
     f54:	86 e4       	ldi	r24, 0x46	; 70
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	2e e4       	ldi	r18, 0x4E	; 78
     f5a:	fc 01       	movw	r30, r24
     f5c:	20 83       	st	Z, r18
	TCCR0B |= (1<<CS02)|(1<<CS00);	// pre-scaler = 1024
     f5e:	85 e4       	ldi	r24, 0x45	; 69
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	25 e4       	ldi	r18, 0x45	; 69
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	f9 01       	movw	r30, r18
     f68:	20 81       	ld	r18, Z
     f6a:	25 60       	ori	r18, 0x05	; 5
     f6c:	fc 01       	movw	r30, r24
     f6e:	20 83       	st	Z, r18
	TIMSK0 |= (1<<TOIE0);			// overflow interrupt enable
     f70:	8e e6       	ldi	r24, 0x6E	; 110
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	2e e6       	ldi	r18, 0x6E	; 110
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	f9 01       	movw	r30, r18
     f7a:	20 81       	ld	r18, Z
     f7c:	21 60       	ori	r18, 0x01	; 1
     f7e:	fc 01       	movw	r30, r24
     f80:	20 83       	st	Z, r18
}
     f82:	00 00       	nop
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	08 95       	ret

00000f8a <getNextMode>:

uint8_t getNextMode(uint8_t mode, uint8_t *modeLast) {
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <getNextMode+0x6>
     f90:	1f 92       	push	r1
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	7b 83       	std	Y+3, r23	; 0x03
     f9a:	6a 83       	std	Y+2, r22	; 0x02
	*modeLast = mode;
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	9b 81       	ldd	r25, Y+3	; 0x03
     fa0:	29 81       	ldd	r18, Y+1	; 0x01
     fa2:	fc 01       	movw	r30, r24
     fa4:	20 83       	st	Z, r18
	return mode = (mode+1)&3;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	8f 5f       	subi	r24, 0xFF	; 255
     faa:	83 70       	andi	r24, 0x03	; 3
     fac:	89 83       	std	Y+1, r24	; 0x01
     fae:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	08 95       	ret

00000fbc <getPreviousMode>:

uint8_t getPreviousMode(uint8_t mode, uint8_t *modeLast) {
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <getPreviousMode+0x6>
     fc2:	1f 92       	push	r1
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	7b 83       	std	Y+3, r23	; 0x03
     fcc:	6a 83       	std	Y+2, r22	; 0x02
	*modeLast = mode;
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	9b 81       	ldd	r25, Y+3	; 0x03
     fd2:	29 81       	ldd	r18, Y+1	; 0x01
     fd4:	fc 01       	movw	r30, r24
     fd6:	20 83       	st	Z, r18
	return mode = (mode-1)&3;
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	81 50       	subi	r24, 0x01	; 1
     fdc:	83 70       	andi	r24, 0x03	; 3
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <setRotaryStatus>:

uint8_t setRotaryStatus(uint8_t aQuiescent, uint8_t rotation) {
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <setRotaryStatus+0x6>
     ff4:	1f 92       	push	r1
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	8a 83       	std	Y+2, r24	; 0x02
     ffc:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t aState = ROTARY_PIN & (1<<ROTARY_A);
     ffe:	86 e2       	ldi	r24, 0x26	; 38
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	fc 01       	movw	r30, r24
    1004:	80 81       	ld	r24, Z
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	89 83       	std	Y+1, r24	; 0x01
	rotation = NO_ROTATION;
    100a:	1b 82       	std	Y+3, r1	; 0x03
	if (aState != aQuiescent) 
    100c:	99 81       	ldd	r25, Y+1	; 0x01
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	98 17       	cp	r25, r24
    1012:	99 f0       	breq	.+38     	; 0x103a <setRotaryStatus+0x4c>
		rotation = (ROTARY_PIN & (1<<ROTARY_B)) != aState ? COUNTERCLOCKWISE : CLOCKWISE;
    1014:	86 e2       	ldi	r24, 0x26	; 38
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	fc 01       	movw	r30, r24
    101a:	80 81       	ld	r24, Z
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9c 01       	movw	r18, r24
    1022:	22 70       	andi	r18, 0x02	; 2
    1024:	33 27       	eor	r19, r19
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	88 2f       	mov	r24, r24
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	28 17       	cp	r18, r24
    102e:	39 07       	cpc	r19, r25
    1030:	11 f0       	breq	.+4      	; 0x1036 <setRotaryStatus+0x48>
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	01 c0       	rjmp	.+2      	; 0x1038 <setRotaryStatus+0x4a>
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	8b 83       	std	Y+3, r24	; 0x03
	return rotation;
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	08 95       	ret

00001048 <__vector_16>:

/* Interrupt Service Routine for Timer0
	Occurs every 10ms to poll button pin */
ISR (TIMER0_OVF_vect) {
    1048:	1f 92       	push	r1
    104a:	0f 92       	push	r0
    104c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1050:	0f 92       	push	r0
    1052:	11 24       	eor	r1, r1
    1054:	8f 93       	push	r24
    1056:	9f 93       	push	r25
    1058:	ef 93       	push	r30
    105a:	ff 93       	push	r31
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
		if (ROTARY_PIN & (1<<ROTARY_BUTTON)) setVal ^= SET_VAL_FLAG;
    1064:	86 e2       	ldi	r24, 0x26	; 38
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	fc 01       	movw	r30, r24
    106a:	80 81       	ld	r24, Z
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	84 70       	andi	r24, 0x04	; 4
    1072:	99 27       	eor	r25, r25
    1074:	89 2b       	or	r24, r25
    1076:	31 f0       	breq	.+12     	; 0x1084 <__vector_16+0x3c>
    1078:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <setVal>
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	89 27       	eor	r24, r25
    1080:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <setVal>
    1084:	00 00       	nop
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	ff 91       	pop	r31
    108c:	ef 91       	pop	r30
    108e:	9f 91       	pop	r25
    1090:	8f 91       	pop	r24
    1092:	0f 90       	pop	r0
    1094:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <SPI_init>:
#define SPI_H

#include "spi.h"

void SPI_init (void)
{
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
	SPI_DDR |= (1<<SPI_CS) | (1<<SPI_MOSI) | (1<<SPI_SCK); // set SCK,MOSI,CS as Fsync 
    10a6:	84 e2       	ldi	r24, 0x24	; 36
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	24 e2       	ldi	r18, 0x24	; 36
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	f9 01       	movw	r30, r18
    10b0:	20 81       	ld	r18, Z
    10b2:	2c 62       	ori	r18, 0x2C	; 44
    10b4:	fc 01       	movw	r30, r24
    10b6:	20 83       	st	Z, r18
	SPI_PORT |= (1<<SPI_CS) | (1<<SPI_SCK); // SCK and CS high
    10b8:	85 e2       	ldi	r24, 0x25	; 37
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	25 e2       	ldi	r18, 0x25	; 37
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	f9 01       	movw	r30, r18
    10c2:	20 81       	ld	r18, Z
    10c4:	24 62       	ori	r18, 0x24	; 36
    10c6:	fc 01       	movw	r30, r24
    10c8:	20 83       	st	Z, r18
	SPCR0 |= (1<<SPE) | (1<<MSTR) | (1<<CPOL); // Enable SPI // Set Master mode //	Set clk to inv.
    10ca:	8c e4       	ldi	r24, 0x4C	; 76
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	2c e4       	ldi	r18, 0x4C	; 76
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	f9 01       	movw	r30, r18
    10d4:	20 81       	ld	r18, Z
    10d6:	28 65       	ori	r18, 0x58	; 88
    10d8:	fc 01       	movw	r30, r24
    10da:	20 83       	st	Z, r18
}
    10dc:	00 00       	nop
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	08 95       	ret

000010e4 <SPI_write16>:


void SPI_write16 (uint16_t data)    	// 	send a 16bit word and use fsync
{
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <SPI_write16+0x6>
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <SPI_write16+0x8>
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	9c 83       	std	Y+4, r25	; 0x04
    10f2:	8b 83       	std	Y+3, r24	; 0x03

	unsigned char MSdata = ((data>>8) & 0x00FF);  	//filter out MS
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	9c 81       	ldd	r25, Y+4	; 0x04
    10f8:	89 2f       	mov	r24, r25
    10fa:	99 27       	eor	r25, r25
    10fc:	89 83       	std	Y+1, r24	; 0x01
	unsigned char LSdata = (data & 0x00FF);			//filter out LS
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	8a 83       	std	Y+2, r24	; 0x02

	SPI_PORT &= ~(1<<SPI_CS);				// 	Fsync Low --> begin frame
    1102:	85 e2       	ldi	r24, 0x25	; 37
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	25 e2       	ldi	r18, 0x25	; 37
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	f9 01       	movw	r30, r18
    110c:	20 81       	ld	r18, Z
    110e:	2b 7f       	andi	r18, 0xFB	; 251
    1110:	fc 01       	movw	r30, r24
    1112:	20 83       	st	Z, r18
	
	SPDR0 = MSdata;							// 	send First 8 MS of data
    1114:	8e e4       	ldi	r24, 0x4E	; 78
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	29 81       	ldd	r18, Y+1	; 0x01
    111a:	fc 01       	movw	r30, r24
    111c:	20 83       	st	Z, r18
	while (!(SPSR0 & (1<<SPIF)));			//	while busy
    111e:	00 00       	nop
    1120:	8d e4       	ldi	r24, 0x4D	; 77
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	fc 01       	movw	r30, r24
    1126:	80 81       	ld	r24, Z
    1128:	88 23       	and	r24, r24
    112a:	d4 f7       	brge	.-12     	; 0x1120 <SPI_write16+0x3c>

	SPDR0 = LSdata;							// 	send Last 8 LS of data
    112c:	8e e4       	ldi	r24, 0x4E	; 78
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	2a 81       	ldd	r18, Y+2	; 0x02
    1132:	fc 01       	movw	r30, r24
    1134:	20 83       	st	Z, r18
	while (!(SPSR0 & (1<<SPIF)));			//	while busy
    1136:	00 00       	nop
    1138:	8d e4       	ldi	r24, 0x4D	; 77
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	fc 01       	movw	r30, r24
    113e:	80 81       	ld	r24, Z
    1140:	88 23       	and	r24, r24
    1142:	d4 f7       	brge	.-12     	; 0x1138 <SPI_write16+0x54>

	SPI_PORT |= (1<<SPI_CS);				// 	Fsync High --> End of frame
    1144:	85 e2       	ldi	r24, 0x25	; 37
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	25 e2       	ldi	r18, 0x25	; 37
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	f9 01       	movw	r30, r18
    114e:	20 81       	ld	r18, Z
    1150:	24 60       	ori	r18, 0x04	; 4
    1152:	fc 01       	movw	r30, r24
    1154:	20 83       	st	Z, r18
}
    1156:	00 00       	nop
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	08 95       	ret

00001166 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	89 ed       	ldi	r24, 0xD9	; 217
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	fc 01       	movw	r30, r24
    1174:	10 82       	st	Z, r1
    1176:	88 ed       	ldi	r24, 0xD8	; 216
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	28 e4       	ldi	r18, 0x48	; 72
    117c:	fc 01       	movw	r30, r24
    117e:	20 83       	st	Z, r18
    1180:	00 00       	nop
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	08 95       	ret

00001188 <i2c_start>:
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	00 d0       	rcall	.+0      	; 0x118e <i2c_start+0x6>
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	8a 83       	std	Y+2, r24	; 0x02
    1194:	8c ed       	ldi	r24, 0xDC	; 220
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	24 ea       	ldi	r18, 0xA4	; 164
    119a:	fc 01       	movw	r30, r24
    119c:	20 83       	st	Z, r18
    119e:	00 00       	nop
    11a0:	8c ed       	ldi	r24, 0xDC	; 220
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	fc 01       	movw	r30, r24
    11a6:	80 81       	ld	r24, Z
    11a8:	88 23       	and	r24, r24
    11aa:	d4 f7       	brge	.-12     	; 0x11a0 <i2c_start+0x18>
    11ac:	89 ed       	ldi	r24, 0xD9	; 217
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	fc 01       	movw	r30, r24
    11b2:	80 81       	ld	r24, Z
    11b4:	88 7f       	andi	r24, 0xF8	; 248
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	88 30       	cpi	r24, 0x08	; 8
    11bc:	29 f0       	breq	.+10     	; 0x11c8 <i2c_start+0x40>
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	80 31       	cpi	r24, 0x10	; 16
    11c2:	11 f0       	breq	.+4      	; 0x11c8 <i2c_start+0x40>
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	20 c0       	rjmp	.+64     	; 0x1208 <i2c_start+0x80>
    11c8:	8b ed       	ldi	r24, 0xDB	; 219
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	2a 81       	ldd	r18, Y+2	; 0x02
    11ce:	fc 01       	movw	r30, r24
    11d0:	20 83       	st	Z, r18
    11d2:	8c ed       	ldi	r24, 0xDC	; 220
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	24 e8       	ldi	r18, 0x84	; 132
    11d8:	fc 01       	movw	r30, r24
    11da:	20 83       	st	Z, r18
    11dc:	00 00       	nop
    11de:	8c ed       	ldi	r24, 0xDC	; 220
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	fc 01       	movw	r30, r24
    11e4:	80 81       	ld	r24, Z
    11e6:	88 23       	and	r24, r24
    11e8:	d4 f7       	brge	.-12     	; 0x11de <i2c_start+0x56>
    11ea:	89 ed       	ldi	r24, 0xD9	; 217
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	fc 01       	movw	r30, r24
    11f0:	80 81       	ld	r24, Z
    11f2:	88 7f       	andi	r24, 0xF8	; 248
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	88 31       	cpi	r24, 0x18	; 24
    11fa:	29 f0       	breq	.+10     	; 0x1206 <i2c_start+0x7e>
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	80 34       	cpi	r24, 0x40	; 64
    1200:	11 f0       	breq	.+4      	; 0x1206 <i2c_start+0x7e>
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <i2c_start+0x80>
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	08 95       	ret

00001212 <i2c_stop>:

/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    /* send stop condition */
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    121a:	8c ed       	ldi	r24, 0xDC	; 220
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	24 e9       	ldi	r18, 0x94	; 148
    1220:	fc 01       	movw	r30, r24
    1222:	20 83       	st	Z, r18
	
	// wait until stop condition is executed and bus released
	while(TWCR1 & (1<<TWSTO));
    1224:	00 00       	nop
    1226:	8c ed       	ldi	r24, 0xDC	; 220
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	fc 01       	movw	r30, r24
    122c:	80 81       	ld	r24, Z
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	80 71       	andi	r24, 0x10	; 16
    1234:	99 27       	eor	r25, r25
    1236:	89 2b       	or	r24, r25
    1238:	b1 f7       	brne	.-20     	; 0x1226 <i2c_stop+0x14>

}/* i2c_stop */
    123a:	00 00       	nop
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <i2c_write>:
  Input:    byte to be transfered
  Return:   0 write successful 
            1 write failed
*************************************************************************/
unsigned char i2c_write( unsigned char data )
{	
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	00 d0       	rcall	.+0      	; 0x1248 <i2c_write+0x6>
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR1 = data;
    124e:	8b ed       	ldi	r24, 0xDB	; 219
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	2a 81       	ldd	r18, Y+2	; 0x02
    1254:	fc 01       	movw	r30, r24
    1256:	20 83       	st	Z, r18
	TWCR1 = (1<<TWINT) | (1<<TWEN);
    1258:	8c ed       	ldi	r24, 0xDC	; 220
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	24 e8       	ldi	r18, 0x84	; 132
    125e:	fc 01       	movw	r30, r24
    1260:	20 83       	st	Z, r18

	// wait until transmission completed
	while(!(TWCR1 & (1<<TWINT)));
    1262:	00 00       	nop
    1264:	8c ed       	ldi	r24, 0xDC	; 220
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	fc 01       	movw	r30, r24
    126a:	80 81       	ld	r24, Z
    126c:	88 23       	and	r24, r24
    126e:	d4 f7       	brge	.-12     	; 0x1264 <i2c_write+0x22>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TWSR1 & 0xF8;
    1270:	89 ed       	ldi	r24, 0xD9	; 217
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	fc 01       	movw	r30, r24
    1276:	80 81       	ld	r24, Z
    1278:	88 7f       	andi	r24, 0xF8	; 248
    127a:	89 83       	std	Y+1, r24	; 0x01
	if( twst != TW_MT_DATA_ACK) return 1;
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	88 32       	cpi	r24, 0x28	; 40
    1280:	11 f0       	breq	.+4      	; 0x1286 <i2c_write+0x44>
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	01 c0       	rjmp	.+2      	; 0x1288 <i2c_write+0x46>
	return 0;
    1286:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	08 95       	ret

00001292 <uiInit>:
	for (uint8_t i = x1; i < x2; i++) {
		lcd_gotoxy(i,y);
		lcd_puts(" ");
	}
	lcd_gotoxy(x1,y);
}
    1292:	cf 92       	push	r12
    1294:	ef 92       	push	r14
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	6e 97       	sbiw	r28, 0x1e	; 30
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	19 82       	std	Y+1, r1	; 0x01
    12b0:	8f ef       	ldi	r24, 0xFF	; 255
    12b2:	8e 8f       	std	Y+30, r24	; 0x1e
    12b4:	0e 94 8a 07 	call	0xf14	; 0xf14 <rotaryInit>
    12b8:	8d e2       	ldi	r24, 0x2D	; 45
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	2d e2       	ldi	r18, 0x2D	; 45
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	f9 01       	movw	r30, r18
    12c2:	20 81       	ld	r18, Z
    12c4:	2c 7f       	andi	r18, 0xFC	; 252
    12c6:	fc 01       	movw	r30, r24
    12c8:	20 83       	st	Z, r18
    12ca:	8e e2       	ldi	r24, 0x2E	; 46
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	2e e2       	ldi	r18, 0x2E	; 46
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	f9 01       	movw	r30, r18
    12d4:	20 81       	ld	r18, Z
    12d6:	23 60       	ori	r18, 0x03	; 3
    12d8:	fc 01       	movw	r30, r24
    12da:	20 83       	st	Z, r18
    12dc:	82 e0       	ldi	r24, 0x02	; 2
    12de:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_init>
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	0e 94 52 06 	call	0xca4	; 0xca4 <lcd_backlight>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	aa ef       	ldi	r26, 0xFA	; 250
    12ee:	b3 e4       	ldi	r27, 0x43	; 67
    12f0:	8a 83       	std	Y+2, r24	; 0x02
    12f2:	9b 83       	std	Y+3, r25	; 0x03
    12f4:	ac 83       	std	Y+4, r26	; 0x04
    12f6:	bd 83       	std	Y+5, r27	; 0x05
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	4a e7       	ldi	r20, 0x7A	; 122
    12fe:	55 e4       	ldi	r21, 0x45	; 69
    1300:	6a 81       	ldd	r22, Y+2	; 0x02
    1302:	7b 81       	ldd	r23, Y+3	; 0x03
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	8c 8b       	std	Y+20, r24	; 0x14
    1312:	9d 8b       	std	Y+21, r25	; 0x15
    1314:	ae 8b       	std	Y+22, r26	; 0x16
    1316:	bf 8b       	std	Y+23, r27	; 0x17
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	40 e8       	ldi	r20, 0x80	; 128
    131e:	5f e3       	ldi	r21, 0x3F	; 63
    1320:	6c 89       	ldd	r22, Y+20	; 0x14
    1322:	7d 89       	ldd	r23, Y+21	; 0x15
    1324:	8e 89       	ldd	r24, Y+22	; 0x16
    1326:	9f 89       	ldd	r25, Y+23	; 0x17
    1328:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__cmpsf2>
    132c:	88 23       	and	r24, r24
    132e:	2c f4       	brge	.+10     	; 0x133a <uiInit+0xa8>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	99 8f       	std	Y+25, r25	; 0x19
    1336:	88 8f       	std	Y+24, r24	; 0x18
    1338:	3f c0       	rjmp	.+126    	; 0x13b8 <uiInit+0x126>
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	3f ef       	ldi	r19, 0xFF	; 255
    133e:	4f e7       	ldi	r20, 0x7F	; 127
    1340:	57 e4       	ldi	r21, 0x47	; 71
    1342:	6c 89       	ldd	r22, Y+20	; 0x14
    1344:	7d 89       	ldd	r23, Y+21	; 0x15
    1346:	8e 89       	ldd	r24, Y+22	; 0x16
    1348:	9f 89       	ldd	r25, Y+23	; 0x17
    134a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__gesf2>
    134e:	18 16       	cp	r1, r24
    1350:	4c f5       	brge	.+82     	; 0x13a4 <uiInit+0x112>
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e2       	ldi	r20, 0x20	; 32
    1358:	51 e4       	ldi	r21, 0x41	; 65
    135a:	6a 81       	ldd	r22, Y+2	; 0x02
    135c:	7b 81       	ldd	r23, Y+3	; 0x03
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	9d 81       	ldd	r25, Y+5	; 0x05
    1362:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	99 8f       	std	Y+25, r25	; 0x19
    1378:	88 8f       	std	Y+24, r24	; 0x18
    137a:	0f c0       	rjmp	.+30     	; 0x139a <uiInit+0x108>
    137c:	80 e9       	ldi	r24, 0x90	; 144
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	9b 8f       	std	Y+27, r25	; 0x1b
    1382:	8a 8f       	std	Y+26, r24	; 0x1a
    1384:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1386:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <uiInit+0xf6>
    138c:	9b 8f       	std	Y+27, r25	; 0x1b
    138e:	8a 8f       	std	Y+26, r24	; 0x1a
    1390:	88 8d       	ldd	r24, Y+24	; 0x18
    1392:	99 8d       	ldd	r25, Y+25	; 0x19
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	99 8f       	std	Y+25, r25	; 0x19
    1398:	88 8f       	std	Y+24, r24	; 0x18
    139a:	88 8d       	ldd	r24, Y+24	; 0x18
    139c:	99 8d       	ldd	r25, Y+25	; 0x19
    139e:	89 2b       	or	r24, r25
    13a0:	69 f7       	brne	.-38     	; 0x137c <uiInit+0xea>
    13a2:	14 c0       	rjmp	.+40     	; 0x13cc <uiInit+0x13a>
    13a4:	6c 89       	ldd	r22, Y+20	; 0x14
    13a6:	7d 89       	ldd	r23, Y+21	; 0x15
    13a8:	8e 89       	ldd	r24, Y+22	; 0x16
    13aa:	9f 89       	ldd	r25, Y+23	; 0x17
    13ac:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__fixunssfsi>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	99 8f       	std	Y+25, r25	; 0x19
    13b6:	88 8f       	std	Y+24, r24	; 0x18
    13b8:	88 8d       	ldd	r24, Y+24	; 0x18
    13ba:	99 8d       	ldd	r25, Y+25	; 0x19
    13bc:	9d 8f       	std	Y+29, r25	; 0x1d
    13be:	8c 8f       	std	Y+28, r24	; 0x1c
    13c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13c2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <uiInit+0x132>
    13c8:	9d 8f       	std	Y+29, r25	; 0x1d
    13ca:	8c 8f       	std	Y+28, r24	; 0x1c
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	0e 94 52 06 	call	0xca4	; 0xca4 <lcd_backlight>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	aa ef       	ldi	r26, 0xFA	; 250
    13d8:	b3 e4       	ldi	r27, 0x43	; 67
    13da:	8e 83       	std	Y+6, r24	; 0x06
    13dc:	9f 83       	std	Y+7, r25	; 0x07
    13de:	a8 87       	std	Y+8, r26	; 0x08
    13e0:	b9 87       	std	Y+9, r27	; 0x09
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	4a e7       	ldi	r20, 0x7A	; 122
    13e8:	55 e4       	ldi	r21, 0x45	; 69
    13ea:	6e 81       	ldd	r22, Y+6	; 0x06
    13ec:	7f 81       	ldd	r23, Y+7	; 0x07
    13ee:	88 85       	ldd	r24, Y+8	; 0x08
    13f0:	99 85       	ldd	r25, Y+9	; 0x09
    13f2:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	8a 87       	std	Y+10, r24	; 0x0a
    13fc:	9b 87       	std	Y+11, r25	; 0x0b
    13fe:	ac 87       	std	Y+12, r26	; 0x0c
    1400:	bd 87       	std	Y+13, r27	; 0x0d
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	40 e8       	ldi	r20, 0x80	; 128
    1408:	5f e3       	ldi	r21, 0x3F	; 63
    140a:	6a 85       	ldd	r22, Y+10	; 0x0a
    140c:	7b 85       	ldd	r23, Y+11	; 0x0b
    140e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1410:	9d 85       	ldd	r25, Y+13	; 0x0d
    1412:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__cmpsf2>
    1416:	88 23       	and	r24, r24
    1418:	2c f4       	brge	.+10     	; 0x1424 <uiInit+0x192>
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	9f 87       	std	Y+15, r25	; 0x0f
    1420:	8e 87       	std	Y+14, r24	; 0x0e
    1422:	3f c0       	rjmp	.+126    	; 0x14a2 <uiInit+0x210>
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	3f ef       	ldi	r19, 0xFF	; 255
    1428:	4f e7       	ldi	r20, 0x7F	; 127
    142a:	57 e4       	ldi	r21, 0x47	; 71
    142c:	6a 85       	ldd	r22, Y+10	; 0x0a
    142e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1430:	8c 85       	ldd	r24, Y+12	; 0x0c
    1432:	9d 85       	ldd	r25, Y+13	; 0x0d
    1434:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__gesf2>
    1438:	18 16       	cp	r1, r24
    143a:	4c f5       	brge	.+82     	; 0x148e <uiInit+0x1fc>
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e2       	ldi	r20, 0x20	; 32
    1442:	51 e4       	ldi	r21, 0x41	; 65
    1444:	6e 81       	ldd	r22, Y+6	; 0x06
    1446:	7f 81       	ldd	r23, Y+7	; 0x07
    1448:	88 85       	ldd	r24, Y+8	; 0x08
    144a:	99 85       	ldd	r25, Y+9	; 0x09
    144c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	bc 01       	movw	r22, r24
    1456:	cd 01       	movw	r24, r26
    1458:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__fixunssfsi>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	9f 87       	std	Y+15, r25	; 0x0f
    1462:	8e 87       	std	Y+14, r24	; 0x0e
    1464:	0f c0       	rjmp	.+30     	; 0x1484 <uiInit+0x1f2>
    1466:	80 e9       	ldi	r24, 0x90	; 144
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	99 8b       	std	Y+17, r25	; 0x11
    146c:	88 8b       	std	Y+16, r24	; 0x10
    146e:	88 89       	ldd	r24, Y+16	; 0x10
    1470:	99 89       	ldd	r25, Y+17	; 0x11
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <uiInit+0x1e0>
    1476:	99 8b       	std	Y+17, r25	; 0x11
    1478:	88 8b       	std	Y+16, r24	; 0x10
    147a:	8e 85       	ldd	r24, Y+14	; 0x0e
    147c:	9f 85       	ldd	r25, Y+15	; 0x0f
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	9f 87       	std	Y+15, r25	; 0x0f
    1482:	8e 87       	std	Y+14, r24	; 0x0e
    1484:	8e 85       	ldd	r24, Y+14	; 0x0e
    1486:	9f 85       	ldd	r25, Y+15	; 0x0f
    1488:	89 2b       	or	r24, r25
    148a:	69 f7       	brne	.-38     	; 0x1466 <uiInit+0x1d4>
    148c:	14 c0       	rjmp	.+40     	; 0x14b6 <uiInit+0x224>
    148e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1490:	7b 85       	ldd	r23, Y+11	; 0x0b
    1492:	8c 85       	ldd	r24, Y+12	; 0x0c
    1494:	9d 85       	ldd	r25, Y+13	; 0x0d
    1496:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	9f 87       	std	Y+15, r25	; 0x0f
    14a0:	8e 87       	std	Y+14, r24	; 0x0e
    14a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    14a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    14a6:	9b 8b       	std	Y+19, r25	; 0x13
    14a8:	8a 8b       	std	Y+18, r24	; 0x12
    14aa:	8a 89       	ldd	r24, Y+18	; 0x12
    14ac:	9b 89       	ldd	r25, Y+19	; 0x13
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <uiInit+0x21c>
    14b2:	9b 8b       	std	Y+19, r25	; 0x13
    14b4:	8a 8b       	std	Y+18, r24	; 0x12
    14b6:	ce 01       	movw	r24, r28
    14b8:	4e 96       	adiw	r24, 0x1e	; 30
    14ba:	c1 2c       	mov	r12, r1
    14bc:	ee 24       	eor	r14, r14
    14be:	e3 94       	inc	r14
    14c0:	00 e0       	ldi	r16, 0x00	; 0
    14c2:	10 e0       	ldi	r17, 0x00	; 0
    14c4:	20 ea       	ldi	r18, 0xA0	; 160
    14c6:	36 e8       	ldi	r19, 0x86	; 134
    14c8:	41 e0       	ldi	r20, 0x01	; 1
    14ca:	50 e0       	ldi	r21, 0x00	; 0
    14cc:	bc 01       	movw	r22, r24
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	0e 94 1c 0b 	call	0x1638	; 0x1638 <displayRefresh>
    14d4:	00 00       	nop
    14d6:	6e 96       	adiw	r28, 0x1e	; 30
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	ef 90       	pop	r14
    14ec:	cf 90       	pop	r12
    14ee:	08 95       	ret

000014f0 <clearScreen>:
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	2e 97       	sbiw	r28, 0x0e	; 14
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	0e 94 58 04 	call	0x8b0	; 0x8b0 <lcd_clrscr>
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a0 e2       	ldi	r26, 0x20	; 32
    150e:	b1 e4       	ldi	r27, 0x41	; 65
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	9a 83       	std	Y+2, r25	; 0x02
    1514:	ab 83       	std	Y+3, r26	; 0x03
    1516:	bc 83       	std	Y+4, r27	; 0x04
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	4a e7       	ldi	r20, 0x7A	; 122
    151e:	55 e4       	ldi	r21, 0x45	; 69
    1520:	69 81       	ldd	r22, Y+1	; 0x01
    1522:	7a 81       	ldd	r23, Y+2	; 0x02
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	8d 83       	std	Y+5, r24	; 0x05
    1532:	9e 83       	std	Y+6, r25	; 0x06
    1534:	af 83       	std	Y+7, r26	; 0x07
    1536:	b8 87       	std	Y+8, r27	; 0x08
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e8       	ldi	r20, 0x80	; 128
    153e:	5f e3       	ldi	r21, 0x3F	; 63
    1540:	6d 81       	ldd	r22, Y+5	; 0x05
    1542:	7e 81       	ldd	r23, Y+6	; 0x06
    1544:	8f 81       	ldd	r24, Y+7	; 0x07
    1546:	98 85       	ldd	r25, Y+8	; 0x08
    1548:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__cmpsf2>
    154c:	88 23       	and	r24, r24
    154e:	2c f4       	brge	.+10     	; 0x155a <clearScreen+0x6a>
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	9a 87       	std	Y+10, r25	; 0x0a
    1556:	89 87       	std	Y+9, r24	; 0x09
    1558:	3f c0       	rjmp	.+126    	; 0x15d8 <clearScreen+0xe8>
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	3f ef       	ldi	r19, 0xFF	; 255
    155e:	4f e7       	ldi	r20, 0x7F	; 127
    1560:	57 e4       	ldi	r21, 0x47	; 71
    1562:	6d 81       	ldd	r22, Y+5	; 0x05
    1564:	7e 81       	ldd	r23, Y+6	; 0x06
    1566:	8f 81       	ldd	r24, Y+7	; 0x07
    1568:	98 85       	ldd	r25, Y+8	; 0x08
    156a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__gesf2>
    156e:	18 16       	cp	r1, r24
    1570:	4c f5       	brge	.+82     	; 0x15c4 <clearScreen+0xd4>
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e2       	ldi	r20, 0x20	; 32
    1578:	51 e4       	ldi	r21, 0x41	; 65
    157a:	69 81       	ldd	r22, Y+1	; 0x01
    157c:	7a 81       	ldd	r23, Y+2	; 0x02
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	bc 01       	movw	r22, r24
    158c:	cd 01       	movw	r24, r26
    158e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9a 87       	std	Y+10, r25	; 0x0a
    1598:	89 87       	std	Y+9, r24	; 0x09
    159a:	0f c0       	rjmp	.+30     	; 0x15ba <clearScreen+0xca>
    159c:	80 e9       	ldi	r24, 0x90	; 144
    159e:	91 e0       	ldi	r25, 0x01	; 1
    15a0:	9c 87       	std	Y+12, r25	; 0x0c
    15a2:	8b 87       	std	Y+11, r24	; 0x0b
    15a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    15a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <clearScreen+0xb8>
    15ac:	9c 87       	std	Y+12, r25	; 0x0c
    15ae:	8b 87       	std	Y+11, r24	; 0x0b
    15b0:	89 85       	ldd	r24, Y+9	; 0x09
    15b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	9a 87       	std	Y+10, r25	; 0x0a
    15b8:	89 87       	std	Y+9, r24	; 0x09
    15ba:	89 85       	ldd	r24, Y+9	; 0x09
    15bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15be:	89 2b       	or	r24, r25
    15c0:	69 f7       	brne	.-38     	; 0x159c <clearScreen+0xac>
    15c2:	14 c0       	rjmp	.+40     	; 0x15ec <clearScreen+0xfc>
    15c4:	6d 81       	ldd	r22, Y+5	; 0x05
    15c6:	7e 81       	ldd	r23, Y+6	; 0x06
    15c8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ca:	98 85       	ldd	r25, Y+8	; 0x08
    15cc:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__fixunssfsi>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	9a 87       	std	Y+10, r25	; 0x0a
    15d6:	89 87       	std	Y+9, r24	; 0x09
    15d8:	89 85       	ldd	r24, Y+9	; 0x09
    15da:	9a 85       	ldd	r25, Y+10	; 0x0a
    15dc:	9e 87       	std	Y+14, r25	; 0x0e
    15de:	8d 87       	std	Y+13, r24	; 0x0d
    15e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <clearScreen+0xf4>
    15e8:	9e 87       	std	Y+14, r25	; 0x0e
    15ea:	8d 87       	std	Y+13, r24	; 0x0d
    15ec:	00 00       	nop
    15ee:	2e 96       	adiw	r28, 0x0e	; 14
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	08 95       	ret

00001600 <clearLine>:
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	00 d0       	rcall	.+0      	; 0x1606 <clearLine+0x6>
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	8a 83       	std	Y+2, r24	; 0x02
    160c:	6a 81       	ldd	r22, Y+2	; 0x02
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	0e 94 be 03 	call	0x77c	; 0x77c <lcd_gotoxy>
    1614:	19 82       	std	Y+1, r1	; 0x01
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <clearLine+0x26>
    1618:	8c e6       	ldi	r24, 0x6C	; 108
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_puts>
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	8f 5f       	subi	r24, 0xFF	; 255
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	80 31       	cpi	r24, 0x10	; 16
    162a:	b0 f3       	brcs	.-20     	; 0x1618 <clearLine+0x18>
    162c:	00 00       	nop
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	08 95       	ret

00001638 <displayRefresh>:

void displayRefresh(uint8_t mode, uint8_t *modeLast, uint32_t frequency, uint16_t phase, int8_t voltage, uint8_t signal) {
    1638:	cf 92       	push	r12
    163a:	ef 92       	push	r14
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	65 97       	sbiw	r28, 0x15	; 21
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	8b 87       	std	Y+11, r24	; 0x0b
    1656:	7d 87       	std	Y+13, r23	; 0x0d
    1658:	6c 87       	std	Y+12, r22	; 0x0c
    165a:	2e 87       	std	Y+14, r18	; 0x0e
    165c:	3f 87       	std	Y+15, r19	; 0x0f
    165e:	48 8b       	std	Y+16, r20	; 0x10
    1660:	59 8b       	std	Y+17, r21	; 0x11
    1662:	1b 8b       	std	Y+19, r17	; 0x13
    1664:	0a 8b       	std	Y+18, r16	; 0x12
    1666:	ec 8a       	std	Y+20, r14	; 0x14
    1668:	cd 8a       	std	Y+21, r12	; 0x15
	char val[10];
	if (mode != *modeLast) {
    166a:	8c 85       	ldd	r24, Y+12	; 0x0c
    166c:	9d 85       	ldd	r25, Y+13	; 0x0d
    166e:	fc 01       	movw	r30, r24
    1670:	90 81       	ld	r25, Z
    1672:	8b 85       	ldd	r24, Y+11	; 0x0b
    1674:	98 17       	cp	r25, r24
    1676:	79 f0       	breq	.+30     	; 0x1696 <displayRefresh+0x5e>
		clearScreen();
    1678:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <clearScreen>
		lcd_puts(labels[mode]);
    167c:	8b 85       	ldd	r24, Y+11	; 0x0b
    167e:	88 2f       	mov	r24, r24
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	8b 5f       	subi	r24, 0xFB	; 251
    1688:	9e 4f       	sbci	r25, 0xFE	; 254
    168a:	fc 01       	movw	r30, r24
    168c:	80 81       	ld	r24, Z
    168e:	91 81       	ldd	r25, Z+1	; 0x01
    1690:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_puts>
    1694:	03 c0       	rjmp	.+6      	; 0x169c <displayRefresh+0x64>
	}
	else
		clearLine(1);
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	0e 94 00 0b 	call	0x1600	; 0x1600 <clearLine>
	lcd_gotoxy(0,1);
    169c:	61 e0       	ldi	r22, 0x01	; 1
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	0e 94 be 03 	call	0x77c	; 0x77c <lcd_gotoxy>
	if (mode == MODE_SIGNAL) lcd_puts(signals[signal]);
    16a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    16a6:	88 23       	and	r24, r24
    16a8:	69 f4       	brne	.+26     	; 0x16c4 <displayRefresh+0x8c>
    16aa:	8d 89       	ldd	r24, Y+21	; 0x15
    16ac:	88 2f       	mov	r24, r24
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	8d 5e       	subi	r24, 0xED	; 237
    16b6:	9e 4f       	sbci	r25, 0xFE	; 254
    16b8:	fc 01       	movw	r30, r24
    16ba:	80 81       	ld	r24, Z
    16bc:	91 81       	ldd	r25, Z+1	; 0x01
    16be:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_puts>
    16c2:	4f c0       	rjmp	.+158    	; 0x1762 <displayRefresh+0x12a>
	else {
		if (mode == MODE_VOLTAGE) itoa(voltage,val,10);
    16c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	69 f4       	brne	.+26     	; 0x16e4 <displayRefresh+0xac>
    16ca:	8c 89       	ldd	r24, Y+20	; 0x14
    16cc:	08 2e       	mov	r0, r24
    16ce:	00 0c       	add	r0, r0
    16d0:	99 0b       	sbc	r25, r25
    16d2:	4a e0       	ldi	r20, 0x0A	; 10
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	9e 01       	movw	r18, r28
    16d8:	2f 5f       	subi	r18, 0xFF	; 255
    16da:	3f 4f       	sbci	r19, 0xFF	; 255
    16dc:	b9 01       	movw	r22, r18
    16de:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <itoa>
    16e2:	2e c0       	rjmp	.+92     	; 0x1740 <displayRefresh+0x108>
		else if (mode == MODE_FREQUENCY) sprintf(val, "%lu", frequency);//itoa(frequency,val,10);
    16e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    16e6:	82 30       	cpi	r24, 0x02	; 2
    16e8:	f1 f4       	brne	.+60     	; 0x1726 <displayRefresh+0xee>
    16ea:	89 89       	ldd	r24, Y+17	; 0x11
    16ec:	8f 93       	push	r24
    16ee:	88 89       	ldd	r24, Y+16	; 0x10
    16f0:	8f 93       	push	r24
    16f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f4:	8f 93       	push	r24
    16f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    16f8:	8f 93       	push	r24
    16fa:	8e e6       	ldi	r24, 0x6E	; 110
    16fc:	91 e0       	ldi	r25, 0x01	; 1
    16fe:	89 2f       	mov	r24, r25
    1700:	8f 93       	push	r24
    1702:	8e e6       	ldi	r24, 0x6E	; 110
    1704:	91 e0       	ldi	r25, 0x01	; 1
    1706:	8f 93       	push	r24
    1708:	ce 01       	movw	r24, r28
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	9f 93       	push	r25
    170e:	8f 93       	push	r24
    1710:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <sprintf>
    1714:	8d b7       	in	r24, 0x3d	; 61
    1716:	9e b7       	in	r25, 0x3e	; 62
    1718:	08 96       	adiw	r24, 0x08	; 8
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	0d c0       	rjmp	.+26     	; 0x1740 <displayRefresh+0x108>
		else if (mode == MODE_PHASE) itoa(phase,val,10);
    1726:	8b 85       	ldd	r24, Y+11	; 0x0b
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	51 f4       	brne	.+20     	; 0x1740 <displayRefresh+0x108>
    172c:	8a 89       	ldd	r24, Y+18	; 0x12
    172e:	9b 89       	ldd	r25, Y+19	; 0x13
    1730:	4a e0       	ldi	r20, 0x0A	; 10
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	9e 01       	movw	r18, r28
    1736:	2f 5f       	subi	r18, 0xFF	; 255
    1738:	3f 4f       	sbci	r19, 0xFF	; 255
    173a:	b9 01       	movw	r22, r18
    173c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <itoa>
		lcd_puts(val);
    1740:	ce 01       	movw	r24, r28
    1742:	01 96       	adiw	r24, 0x01	; 1
    1744:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_puts>
		lcd_puts(units[mode-1]);
    1748:	8b 85       	ldd	r24, Y+11	; 0x0b
    174a:	88 2f       	mov	r24, r24
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	83 5f       	subi	r24, 0xF3	; 243
    1756:	9e 4f       	sbci	r25, 0xFE	; 254
    1758:	fc 01       	movw	r30, r24
    175a:	80 81       	ld	r24, Z
    175c:	91 81       	ldd	r25, Z+1	; 0x01
    175e:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_puts>
	}
	val[0] = '\0';
    1762:	19 82       	std	Y+1, r1	; 0x01
    1764:	00 00       	nop
    1766:	65 96       	adiw	r28, 0x15	; 21
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	ef 90       	pop	r14
    177c:	cf 90       	pop	r12
    177e:	08 95       	ret

00001780 <__cmpsf2>:
    1780:	0e 94 df 0c 	call	0x19be	; 0x19be <__fp_cmp>
    1784:	08 f4       	brcc	.+2      	; 0x1788 <__cmpsf2+0x8>
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	08 95       	ret

0000178a <__divsf3>:
    178a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__divsf3x>
    178e:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__fp_round>
    1792:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__fp_pscB>
    1796:	58 f0       	brcs	.+22     	; 0x17ae <__divsf3+0x24>
    1798:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fp_pscA>
    179c:	40 f0       	brcs	.+16     	; 0x17ae <__divsf3+0x24>
    179e:	29 f4       	brne	.+10     	; 0x17aa <__divsf3+0x20>
    17a0:	5f 3f       	cpi	r21, 0xFF	; 255
    17a2:	29 f0       	breq	.+10     	; 0x17ae <__divsf3+0x24>
    17a4:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__fp_inf>
    17a8:	51 11       	cpse	r21, r1
    17aa:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__fp_szero>
    17ae:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <__fp_nan>

000017b2 <__divsf3x>:
    17b2:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__fp_split3>
    17b6:	68 f3       	brcs	.-38     	; 0x1792 <__divsf3+0x8>

000017b8 <__divsf3_pse>:
    17b8:	99 23       	and	r25, r25
    17ba:	b1 f3       	breq	.-20     	; 0x17a8 <__divsf3+0x1e>
    17bc:	55 23       	and	r21, r21
    17be:	91 f3       	breq	.-28     	; 0x17a4 <__divsf3+0x1a>
    17c0:	95 1b       	sub	r25, r21
    17c2:	55 0b       	sbc	r21, r21
    17c4:	bb 27       	eor	r27, r27
    17c6:	aa 27       	eor	r26, r26
    17c8:	62 17       	cp	r22, r18
    17ca:	73 07       	cpc	r23, r19
    17cc:	84 07       	cpc	r24, r20
    17ce:	38 f0       	brcs	.+14     	; 0x17de <__divsf3_pse+0x26>
    17d0:	9f 5f       	subi	r25, 0xFF	; 255
    17d2:	5f 4f       	sbci	r21, 0xFF	; 255
    17d4:	22 0f       	add	r18, r18
    17d6:	33 1f       	adc	r19, r19
    17d8:	44 1f       	adc	r20, r20
    17da:	aa 1f       	adc	r26, r26
    17dc:	a9 f3       	breq	.-22     	; 0x17c8 <__divsf3_pse+0x10>
    17de:	35 d0       	rcall	.+106    	; 0x184a <__divsf3_pse+0x92>
    17e0:	0e 2e       	mov	r0, r30
    17e2:	3a f0       	brmi	.+14     	; 0x17f2 <__divsf3_pse+0x3a>
    17e4:	e0 e8       	ldi	r30, 0x80	; 128
    17e6:	32 d0       	rcall	.+100    	; 0x184c <__divsf3_pse+0x94>
    17e8:	91 50       	subi	r25, 0x01	; 1
    17ea:	50 40       	sbci	r21, 0x00	; 0
    17ec:	e6 95       	lsr	r30
    17ee:	00 1c       	adc	r0, r0
    17f0:	ca f7       	brpl	.-14     	; 0x17e4 <__divsf3_pse+0x2c>
    17f2:	2b d0       	rcall	.+86     	; 0x184a <__divsf3_pse+0x92>
    17f4:	fe 2f       	mov	r31, r30
    17f6:	29 d0       	rcall	.+82     	; 0x184a <__divsf3_pse+0x92>
    17f8:	66 0f       	add	r22, r22
    17fa:	77 1f       	adc	r23, r23
    17fc:	88 1f       	adc	r24, r24
    17fe:	bb 1f       	adc	r27, r27
    1800:	26 17       	cp	r18, r22
    1802:	37 07       	cpc	r19, r23
    1804:	48 07       	cpc	r20, r24
    1806:	ab 07       	cpc	r26, r27
    1808:	b0 e8       	ldi	r27, 0x80	; 128
    180a:	09 f0       	breq	.+2      	; 0x180e <__divsf3_pse+0x56>
    180c:	bb 0b       	sbc	r27, r27
    180e:	80 2d       	mov	r24, r0
    1810:	bf 01       	movw	r22, r30
    1812:	ff 27       	eor	r31, r31
    1814:	93 58       	subi	r25, 0x83	; 131
    1816:	5f 4f       	sbci	r21, 0xFF	; 255
    1818:	3a f0       	brmi	.+14     	; 0x1828 <__divsf3_pse+0x70>
    181a:	9e 3f       	cpi	r25, 0xFE	; 254
    181c:	51 05       	cpc	r21, r1
    181e:	78 f0       	brcs	.+30     	; 0x183e <__divsf3_pse+0x86>
    1820:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__fp_inf>
    1824:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__fp_szero>
    1828:	5f 3f       	cpi	r21, 0xFF	; 255
    182a:	e4 f3       	brlt	.-8      	; 0x1824 <__divsf3_pse+0x6c>
    182c:	98 3e       	cpi	r25, 0xE8	; 232
    182e:	d4 f3       	brlt	.-12     	; 0x1824 <__divsf3_pse+0x6c>
    1830:	86 95       	lsr	r24
    1832:	77 95       	ror	r23
    1834:	67 95       	ror	r22
    1836:	b7 95       	ror	r27
    1838:	f7 95       	ror	r31
    183a:	9f 5f       	subi	r25, 0xFF	; 255
    183c:	c9 f7       	brne	.-14     	; 0x1830 <__divsf3_pse+0x78>
    183e:	88 0f       	add	r24, r24
    1840:	91 1d       	adc	r25, r1
    1842:	96 95       	lsr	r25
    1844:	87 95       	ror	r24
    1846:	97 f9       	bld	r25, 7
    1848:	08 95       	ret
    184a:	e1 e0       	ldi	r30, 0x01	; 1
    184c:	66 0f       	add	r22, r22
    184e:	77 1f       	adc	r23, r23
    1850:	88 1f       	adc	r24, r24
    1852:	bb 1f       	adc	r27, r27
    1854:	62 17       	cp	r22, r18
    1856:	73 07       	cpc	r23, r19
    1858:	84 07       	cpc	r24, r20
    185a:	ba 07       	cpc	r27, r26
    185c:	20 f0       	brcs	.+8      	; 0x1866 <__divsf3_pse+0xae>
    185e:	62 1b       	sub	r22, r18
    1860:	73 0b       	sbc	r23, r19
    1862:	84 0b       	sbc	r24, r20
    1864:	ba 0b       	sbc	r27, r26
    1866:	ee 1f       	adc	r30, r30
    1868:	88 f7       	brcc	.-30     	; 0x184c <__divsf3_pse+0x94>
    186a:	e0 95       	com	r30
    186c:	08 95       	ret

0000186e <__fixsfdi>:
    186e:	be e3       	ldi	r27, 0x3E	; 62
    1870:	04 d0       	rcall	.+8      	; 0x187a <__fixunssfdi+0x2>
    1872:	08 f4       	brcc	.+2      	; 0x1876 <__fixsfdi+0x8>
    1874:	90 e8       	ldi	r25, 0x80	; 128
    1876:	08 95       	ret

00001878 <__fixunssfdi>:
    1878:	bf e3       	ldi	r27, 0x3F	; 63
    187a:	22 27       	eor	r18, r18
    187c:	33 27       	eor	r19, r19
    187e:	a9 01       	movw	r20, r18
    1880:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__fp_splitA>
    1884:	60 f1       	brcs	.+88     	; 0x18de <__fixunssfdi+0x66>
    1886:	9f 57       	subi	r25, 0x7F	; 127
    1888:	48 f1       	brcs	.+82     	; 0x18dc <__fixunssfdi+0x64>
    188a:	b9 17       	cp	r27, r25
    188c:	40 f1       	brcs	.+80     	; 0x18de <__fixunssfdi+0x66>
    188e:	bf e3       	ldi	r27, 0x3F	; 63
    1890:	b9 1b       	sub	r27, r25
    1892:	99 27       	eor	r25, r25
    1894:	b8 50       	subi	r27, 0x08	; 8
    1896:	3a f4       	brpl	.+14     	; 0x18a6 <__fixunssfdi+0x2e>
    1898:	66 0f       	add	r22, r22
    189a:	77 1f       	adc	r23, r23
    189c:	88 1f       	adc	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	b3 95       	inc	r27
    18a2:	d2 f3       	brmi	.-12     	; 0x1898 <__fixunssfdi+0x20>
    18a4:	16 c0       	rjmp	.+44     	; 0x18d2 <__fixunssfdi+0x5a>
    18a6:	b8 50       	subi	r27, 0x08	; 8
    18a8:	4a f0       	brmi	.+18     	; 0x18bc <__fixunssfdi+0x44>
    18aa:	23 2f       	mov	r18, r19
    18ac:	34 2f       	mov	r19, r20
    18ae:	45 2f       	mov	r20, r21
    18b0:	56 2f       	mov	r21, r22
    18b2:	67 2f       	mov	r22, r23
    18b4:	78 2f       	mov	r23, r24
    18b6:	88 27       	eor	r24, r24
    18b8:	b8 50       	subi	r27, 0x08	; 8
    18ba:	ba f7       	brpl	.-18     	; 0x18aa <__fixunssfdi+0x32>
    18bc:	b8 5f       	subi	r27, 0xF8	; 248
    18be:	49 f0       	breq	.+18     	; 0x18d2 <__fixunssfdi+0x5a>
    18c0:	86 95       	lsr	r24
    18c2:	77 95       	ror	r23
    18c4:	67 95       	ror	r22
    18c6:	57 95       	ror	r21
    18c8:	47 95       	ror	r20
    18ca:	37 95       	ror	r19
    18cc:	27 95       	ror	r18
    18ce:	ba 95       	dec	r27
    18d0:	b9 f7       	brne	.-18     	; 0x18c0 <__fixunssfdi+0x48>
    18d2:	16 f4       	brtc	.+4      	; 0x18d8 <__fixunssfdi+0x60>
    18d4:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__fp_negdi>
    18d8:	88 94       	clc
    18da:	08 95       	ret
    18dc:	88 94       	clc
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	cb 01       	movw	r24, r22
    18e4:	08 95       	ret

000018e6 <__fixunssfsi>:
    18e6:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__fp_splitA>
    18ea:	88 f0       	brcs	.+34     	; 0x190e <__fixunssfsi+0x28>
    18ec:	9f 57       	subi	r25, 0x7F	; 127
    18ee:	98 f0       	brcs	.+38     	; 0x1916 <__fixunssfsi+0x30>
    18f0:	b9 2f       	mov	r27, r25
    18f2:	99 27       	eor	r25, r25
    18f4:	b7 51       	subi	r27, 0x17	; 23
    18f6:	b0 f0       	brcs	.+44     	; 0x1924 <__fixunssfsi+0x3e>
    18f8:	e1 f0       	breq	.+56     	; 0x1932 <__fixunssfsi+0x4c>
    18fa:	66 0f       	add	r22, r22
    18fc:	77 1f       	adc	r23, r23
    18fe:	88 1f       	adc	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	1a f0       	brmi	.+6      	; 0x190a <__fixunssfsi+0x24>
    1904:	ba 95       	dec	r27
    1906:	c9 f7       	brne	.-14     	; 0x18fa <__fixunssfsi+0x14>
    1908:	14 c0       	rjmp	.+40     	; 0x1932 <__fixunssfsi+0x4c>
    190a:	b1 30       	cpi	r27, 0x01	; 1
    190c:	91 f0       	breq	.+36     	; 0x1932 <__fixunssfsi+0x4c>
    190e:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__fp_zero>
    1912:	b1 e0       	ldi	r27, 0x01	; 1
    1914:	08 95       	ret
    1916:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__fp_zero>
    191a:	67 2f       	mov	r22, r23
    191c:	78 2f       	mov	r23, r24
    191e:	88 27       	eor	r24, r24
    1920:	b8 5f       	subi	r27, 0xF8	; 248
    1922:	39 f0       	breq	.+14     	; 0x1932 <__fixunssfsi+0x4c>
    1924:	b9 3f       	cpi	r27, 0xF9	; 249
    1926:	cc f3       	brlt	.-14     	; 0x191a <__fixunssfsi+0x34>
    1928:	86 95       	lsr	r24
    192a:	77 95       	ror	r23
    192c:	67 95       	ror	r22
    192e:	b3 95       	inc	r27
    1930:	d9 f7       	brne	.-10     	; 0x1928 <__fixunssfsi+0x42>
    1932:	3e f4       	brtc	.+14     	; 0x1942 <__fixunssfsi+0x5c>
    1934:	90 95       	com	r25
    1936:	80 95       	com	r24
    1938:	70 95       	com	r23
    193a:	61 95       	neg	r22
    193c:	7f 4f       	sbci	r23, 0xFF	; 255
    193e:	8f 4f       	sbci	r24, 0xFF	; 255
    1940:	9f 4f       	sbci	r25, 0xFF	; 255
    1942:	08 95       	ret

00001944 <__floatunsisf>:
    1944:	e8 94       	clt
    1946:	09 c0       	rjmp	.+18     	; 0x195a <__floatsisf+0x12>

00001948 <__floatsisf>:
    1948:	97 fb       	bst	r25, 7
    194a:	3e f4       	brtc	.+14     	; 0x195a <__floatsisf+0x12>
    194c:	90 95       	com	r25
    194e:	80 95       	com	r24
    1950:	70 95       	com	r23
    1952:	61 95       	neg	r22
    1954:	7f 4f       	sbci	r23, 0xFF	; 255
    1956:	8f 4f       	sbci	r24, 0xFF	; 255
    1958:	9f 4f       	sbci	r25, 0xFF	; 255
    195a:	99 23       	and	r25, r25
    195c:	a9 f0       	breq	.+42     	; 0x1988 <__floatsisf+0x40>
    195e:	f9 2f       	mov	r31, r25
    1960:	96 e9       	ldi	r25, 0x96	; 150
    1962:	bb 27       	eor	r27, r27
    1964:	93 95       	inc	r25
    1966:	f6 95       	lsr	r31
    1968:	87 95       	ror	r24
    196a:	77 95       	ror	r23
    196c:	67 95       	ror	r22
    196e:	b7 95       	ror	r27
    1970:	f1 11       	cpse	r31, r1
    1972:	f8 cf       	rjmp	.-16     	; 0x1964 <__floatsisf+0x1c>
    1974:	fa f4       	brpl	.+62     	; 0x19b4 <__floatsisf+0x6c>
    1976:	bb 0f       	add	r27, r27
    1978:	11 f4       	brne	.+4      	; 0x197e <__floatsisf+0x36>
    197a:	60 ff       	sbrs	r22, 0
    197c:	1b c0       	rjmp	.+54     	; 0x19b4 <__floatsisf+0x6c>
    197e:	6f 5f       	subi	r22, 0xFF	; 255
    1980:	7f 4f       	sbci	r23, 0xFF	; 255
    1982:	8f 4f       	sbci	r24, 0xFF	; 255
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	16 c0       	rjmp	.+44     	; 0x19b4 <__floatsisf+0x6c>
    1988:	88 23       	and	r24, r24
    198a:	11 f0       	breq	.+4      	; 0x1990 <__floatsisf+0x48>
    198c:	96 e9       	ldi	r25, 0x96	; 150
    198e:	11 c0       	rjmp	.+34     	; 0x19b2 <__floatsisf+0x6a>
    1990:	77 23       	and	r23, r23
    1992:	21 f0       	breq	.+8      	; 0x199c <__floatsisf+0x54>
    1994:	9e e8       	ldi	r25, 0x8E	; 142
    1996:	87 2f       	mov	r24, r23
    1998:	76 2f       	mov	r23, r22
    199a:	05 c0       	rjmp	.+10     	; 0x19a6 <__floatsisf+0x5e>
    199c:	66 23       	and	r22, r22
    199e:	71 f0       	breq	.+28     	; 0x19bc <__floatsisf+0x74>
    19a0:	96 e8       	ldi	r25, 0x86	; 134
    19a2:	86 2f       	mov	r24, r22
    19a4:	70 e0       	ldi	r23, 0x00	; 0
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	2a f0       	brmi	.+10     	; 0x19b4 <__floatsisf+0x6c>
    19aa:	9a 95       	dec	r25
    19ac:	66 0f       	add	r22, r22
    19ae:	77 1f       	adc	r23, r23
    19b0:	88 1f       	adc	r24, r24
    19b2:	da f7       	brpl	.-10     	; 0x19aa <__floatsisf+0x62>
    19b4:	88 0f       	add	r24, r24
    19b6:	96 95       	lsr	r25
    19b8:	87 95       	ror	r24
    19ba:	97 f9       	bld	r25, 7
    19bc:	08 95       	ret

000019be <__fp_cmp>:
    19be:	99 0f       	add	r25, r25
    19c0:	00 08       	sbc	r0, r0
    19c2:	55 0f       	add	r21, r21
    19c4:	aa 0b       	sbc	r26, r26
    19c6:	e0 e8       	ldi	r30, 0x80	; 128
    19c8:	fe ef       	ldi	r31, 0xFE	; 254
    19ca:	16 16       	cp	r1, r22
    19cc:	17 06       	cpc	r1, r23
    19ce:	e8 07       	cpc	r30, r24
    19d0:	f9 07       	cpc	r31, r25
    19d2:	c0 f0       	brcs	.+48     	; 0x1a04 <__fp_cmp+0x46>
    19d4:	12 16       	cp	r1, r18
    19d6:	13 06       	cpc	r1, r19
    19d8:	e4 07       	cpc	r30, r20
    19da:	f5 07       	cpc	r31, r21
    19dc:	98 f0       	brcs	.+38     	; 0x1a04 <__fp_cmp+0x46>
    19de:	62 1b       	sub	r22, r18
    19e0:	73 0b       	sbc	r23, r19
    19e2:	84 0b       	sbc	r24, r20
    19e4:	95 0b       	sbc	r25, r21
    19e6:	39 f4       	brne	.+14     	; 0x19f6 <__fp_cmp+0x38>
    19e8:	0a 26       	eor	r0, r26
    19ea:	61 f0       	breq	.+24     	; 0x1a04 <__fp_cmp+0x46>
    19ec:	23 2b       	or	r18, r19
    19ee:	24 2b       	or	r18, r20
    19f0:	25 2b       	or	r18, r21
    19f2:	21 f4       	brne	.+8      	; 0x19fc <__fp_cmp+0x3e>
    19f4:	08 95       	ret
    19f6:	0a 26       	eor	r0, r26
    19f8:	09 f4       	brne	.+2      	; 0x19fc <__fp_cmp+0x3e>
    19fa:	a1 40       	sbci	r26, 0x01	; 1
    19fc:	a6 95       	lsr	r26
    19fe:	8f ef       	ldi	r24, 0xFF	; 255
    1a00:	81 1d       	adc	r24, r1
    1a02:	81 1d       	adc	r24, r1
    1a04:	08 95       	ret

00001a06 <__fp_inf>:
    1a06:	97 f9       	bld	r25, 7
    1a08:	9f 67       	ori	r25, 0x7F	; 127
    1a0a:	80 e8       	ldi	r24, 0x80	; 128
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	60 e0       	ldi	r22, 0x00	; 0
    1a10:	08 95       	ret

00001a12 <__fp_nan>:
    1a12:	9f ef       	ldi	r25, 0xFF	; 255
    1a14:	80 ec       	ldi	r24, 0xC0	; 192
    1a16:	08 95       	ret

00001a18 <__fp_negdi>:
    1a18:	90 95       	com	r25
    1a1a:	80 95       	com	r24
    1a1c:	70 95       	com	r23
    1a1e:	60 95       	com	r22
    1a20:	50 95       	com	r21
    1a22:	40 95       	com	r20
    1a24:	30 95       	com	r19
    1a26:	21 95       	neg	r18
    1a28:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2a:	4f 4f       	sbci	r20, 0xFF	; 255
    1a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2e:	6f 4f       	sbci	r22, 0xFF	; 255
    1a30:	7f 4f       	sbci	r23, 0xFF	; 255
    1a32:	8f 4f       	sbci	r24, 0xFF	; 255
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	08 95       	ret

00001a38 <__fp_pscA>:
    1a38:	00 24       	eor	r0, r0
    1a3a:	0a 94       	dec	r0
    1a3c:	16 16       	cp	r1, r22
    1a3e:	17 06       	cpc	r1, r23
    1a40:	18 06       	cpc	r1, r24
    1a42:	09 06       	cpc	r0, r25
    1a44:	08 95       	ret

00001a46 <__fp_pscB>:
    1a46:	00 24       	eor	r0, r0
    1a48:	0a 94       	dec	r0
    1a4a:	12 16       	cp	r1, r18
    1a4c:	13 06       	cpc	r1, r19
    1a4e:	14 06       	cpc	r1, r20
    1a50:	05 06       	cpc	r0, r21
    1a52:	08 95       	ret

00001a54 <__fp_round>:
    1a54:	09 2e       	mov	r0, r25
    1a56:	03 94       	inc	r0
    1a58:	00 0c       	add	r0, r0
    1a5a:	11 f4       	brne	.+4      	; 0x1a60 <__fp_round+0xc>
    1a5c:	88 23       	and	r24, r24
    1a5e:	52 f0       	brmi	.+20     	; 0x1a74 <__fp_round+0x20>
    1a60:	bb 0f       	add	r27, r27
    1a62:	40 f4       	brcc	.+16     	; 0x1a74 <__fp_round+0x20>
    1a64:	bf 2b       	or	r27, r31
    1a66:	11 f4       	brne	.+4      	; 0x1a6c <__fp_round+0x18>
    1a68:	60 ff       	sbrs	r22, 0
    1a6a:	04 c0       	rjmp	.+8      	; 0x1a74 <__fp_round+0x20>
    1a6c:	6f 5f       	subi	r22, 0xFF	; 255
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	8f 4f       	sbci	r24, 0xFF	; 255
    1a72:	9f 4f       	sbci	r25, 0xFF	; 255
    1a74:	08 95       	ret

00001a76 <__fp_split3>:
    1a76:	57 fd       	sbrc	r21, 7
    1a78:	90 58       	subi	r25, 0x80	; 128
    1a7a:	44 0f       	add	r20, r20
    1a7c:	55 1f       	adc	r21, r21
    1a7e:	59 f0       	breq	.+22     	; 0x1a96 <__fp_splitA+0x10>
    1a80:	5f 3f       	cpi	r21, 0xFF	; 255
    1a82:	71 f0       	breq	.+28     	; 0x1aa0 <__fp_splitA+0x1a>
    1a84:	47 95       	ror	r20

00001a86 <__fp_splitA>:
    1a86:	88 0f       	add	r24, r24
    1a88:	97 fb       	bst	r25, 7
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	61 f0       	breq	.+24     	; 0x1aa6 <__fp_splitA+0x20>
    1a8e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a90:	79 f0       	breq	.+30     	; 0x1ab0 <__fp_splitA+0x2a>
    1a92:	87 95       	ror	r24
    1a94:	08 95       	ret
    1a96:	12 16       	cp	r1, r18
    1a98:	13 06       	cpc	r1, r19
    1a9a:	14 06       	cpc	r1, r20
    1a9c:	55 1f       	adc	r21, r21
    1a9e:	f2 cf       	rjmp	.-28     	; 0x1a84 <__fp_split3+0xe>
    1aa0:	46 95       	lsr	r20
    1aa2:	f1 df       	rcall	.-30     	; 0x1a86 <__fp_splitA>
    1aa4:	08 c0       	rjmp	.+16     	; 0x1ab6 <__fp_splitA+0x30>
    1aa6:	16 16       	cp	r1, r22
    1aa8:	17 06       	cpc	r1, r23
    1aaa:	18 06       	cpc	r1, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	f1 cf       	rjmp	.-30     	; 0x1a92 <__fp_splitA+0xc>
    1ab0:	86 95       	lsr	r24
    1ab2:	71 05       	cpc	r23, r1
    1ab4:	61 05       	cpc	r22, r1
    1ab6:	08 94       	sec
    1ab8:	08 95       	ret

00001aba <__fp_zero>:
    1aba:	e8 94       	clt

00001abc <__fp_szero>:
    1abc:	bb 27       	eor	r27, r27
    1abe:	66 27       	eor	r22, r22
    1ac0:	77 27       	eor	r23, r23
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	97 f9       	bld	r25, 7
    1ac6:	08 95       	ret

00001ac8 <__gesf2>:
    1ac8:	0e 94 df 0c 	call	0x19be	; 0x19be <__fp_cmp>
    1acc:	08 f4       	brcc	.+2      	; 0x1ad0 <__gesf2+0x8>
    1ace:	8f ef       	ldi	r24, 0xFF	; 255
    1ad0:	08 95       	ret

00001ad2 <__mulsf3>:
    1ad2:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__mulsf3x>
    1ad6:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__fp_round>
    1ada:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fp_pscA>
    1ade:	38 f0       	brcs	.+14     	; 0x1aee <__mulsf3+0x1c>
    1ae0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__fp_pscB>
    1ae4:	20 f0       	brcs	.+8      	; 0x1aee <__mulsf3+0x1c>
    1ae6:	95 23       	and	r25, r21
    1ae8:	11 f0       	breq	.+4      	; 0x1aee <__mulsf3+0x1c>
    1aea:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__fp_inf>
    1aee:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <__fp_nan>
    1af2:	11 24       	eor	r1, r1
    1af4:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__fp_szero>

00001af8 <__mulsf3x>:
    1af8:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__fp_split3>
    1afc:	70 f3       	brcs	.-36     	; 0x1ada <__mulsf3+0x8>

00001afe <__mulsf3_pse>:
    1afe:	95 9f       	mul	r25, r21
    1b00:	c1 f3       	breq	.-16     	; 0x1af2 <__mulsf3+0x20>
    1b02:	95 0f       	add	r25, r21
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	55 1f       	adc	r21, r21
    1b08:	62 9f       	mul	r22, r18
    1b0a:	f0 01       	movw	r30, r0
    1b0c:	72 9f       	mul	r23, r18
    1b0e:	bb 27       	eor	r27, r27
    1b10:	f0 0d       	add	r31, r0
    1b12:	b1 1d       	adc	r27, r1
    1b14:	63 9f       	mul	r22, r19
    1b16:	aa 27       	eor	r26, r26
    1b18:	f0 0d       	add	r31, r0
    1b1a:	b1 1d       	adc	r27, r1
    1b1c:	aa 1f       	adc	r26, r26
    1b1e:	64 9f       	mul	r22, r20
    1b20:	66 27       	eor	r22, r22
    1b22:	b0 0d       	add	r27, r0
    1b24:	a1 1d       	adc	r26, r1
    1b26:	66 1f       	adc	r22, r22
    1b28:	82 9f       	mul	r24, r18
    1b2a:	22 27       	eor	r18, r18
    1b2c:	b0 0d       	add	r27, r0
    1b2e:	a1 1d       	adc	r26, r1
    1b30:	62 1f       	adc	r22, r18
    1b32:	73 9f       	mul	r23, r19
    1b34:	b0 0d       	add	r27, r0
    1b36:	a1 1d       	adc	r26, r1
    1b38:	62 1f       	adc	r22, r18
    1b3a:	83 9f       	mul	r24, r19
    1b3c:	a0 0d       	add	r26, r0
    1b3e:	61 1d       	adc	r22, r1
    1b40:	22 1f       	adc	r18, r18
    1b42:	74 9f       	mul	r23, r20
    1b44:	33 27       	eor	r19, r19
    1b46:	a0 0d       	add	r26, r0
    1b48:	61 1d       	adc	r22, r1
    1b4a:	23 1f       	adc	r18, r19
    1b4c:	84 9f       	mul	r24, r20
    1b4e:	60 0d       	add	r22, r0
    1b50:	21 1d       	adc	r18, r1
    1b52:	82 2f       	mov	r24, r18
    1b54:	76 2f       	mov	r23, r22
    1b56:	6a 2f       	mov	r22, r26
    1b58:	11 24       	eor	r1, r1
    1b5a:	9f 57       	subi	r25, 0x7F	; 127
    1b5c:	50 40       	sbci	r21, 0x00	; 0
    1b5e:	9a f0       	brmi	.+38     	; 0x1b86 <__mulsf3_pse+0x88>
    1b60:	f1 f0       	breq	.+60     	; 0x1b9e <__mulsf3_pse+0xa0>
    1b62:	88 23       	and	r24, r24
    1b64:	4a f0       	brmi	.+18     	; 0x1b78 <__mulsf3_pse+0x7a>
    1b66:	ee 0f       	add	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	bb 1f       	adc	r27, r27
    1b6c:	66 1f       	adc	r22, r22
    1b6e:	77 1f       	adc	r23, r23
    1b70:	88 1f       	adc	r24, r24
    1b72:	91 50       	subi	r25, 0x01	; 1
    1b74:	50 40       	sbci	r21, 0x00	; 0
    1b76:	a9 f7       	brne	.-22     	; 0x1b62 <__mulsf3_pse+0x64>
    1b78:	9e 3f       	cpi	r25, 0xFE	; 254
    1b7a:	51 05       	cpc	r21, r1
    1b7c:	80 f0       	brcs	.+32     	; 0x1b9e <__mulsf3_pse+0xa0>
    1b7e:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__fp_inf>
    1b82:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__fp_szero>
    1b86:	5f 3f       	cpi	r21, 0xFF	; 255
    1b88:	e4 f3       	brlt	.-8      	; 0x1b82 <__mulsf3_pse+0x84>
    1b8a:	98 3e       	cpi	r25, 0xE8	; 232
    1b8c:	d4 f3       	brlt	.-12     	; 0x1b82 <__mulsf3_pse+0x84>
    1b8e:	86 95       	lsr	r24
    1b90:	77 95       	ror	r23
    1b92:	67 95       	ror	r22
    1b94:	b7 95       	ror	r27
    1b96:	f7 95       	ror	r31
    1b98:	e7 95       	ror	r30
    1b9a:	9f 5f       	subi	r25, 0xFF	; 255
    1b9c:	c1 f7       	brne	.-16     	; 0x1b8e <__mulsf3_pse+0x90>
    1b9e:	fe 2b       	or	r31, r30
    1ba0:	88 0f       	add	r24, r24
    1ba2:	91 1d       	adc	r25, r1
    1ba4:	96 95       	lsr	r25
    1ba6:	87 95       	ror	r24
    1ba8:	97 f9       	bld	r25, 7
    1baa:	08 95       	ret

00001bac <__ashrdi3>:
    1bac:	97 fb       	bst	r25, 7
    1bae:	10 f8       	bld	r1, 0

00001bb0 <__lshrdi3>:
    1bb0:	16 94       	lsr	r1
    1bb2:	00 08       	sbc	r0, r0
    1bb4:	0f 93       	push	r16
    1bb6:	08 30       	cpi	r16, 0x08	; 8
    1bb8:	98 f0       	brcs	.+38     	; 0x1be0 <__lshrdi3+0x30>
    1bba:	08 50       	subi	r16, 0x08	; 8
    1bbc:	23 2f       	mov	r18, r19
    1bbe:	34 2f       	mov	r19, r20
    1bc0:	45 2f       	mov	r20, r21
    1bc2:	56 2f       	mov	r21, r22
    1bc4:	67 2f       	mov	r22, r23
    1bc6:	78 2f       	mov	r23, r24
    1bc8:	89 2f       	mov	r24, r25
    1bca:	90 2d       	mov	r25, r0
    1bcc:	f4 cf       	rjmp	.-24     	; 0x1bb6 <__lshrdi3+0x6>
    1bce:	05 94       	asr	r0
    1bd0:	97 95       	ror	r25
    1bd2:	87 95       	ror	r24
    1bd4:	77 95       	ror	r23
    1bd6:	67 95       	ror	r22
    1bd8:	57 95       	ror	r21
    1bda:	47 95       	ror	r20
    1bdc:	37 95       	ror	r19
    1bde:	27 95       	ror	r18
    1be0:	0a 95       	dec	r16
    1be2:	aa f7       	brpl	.-22     	; 0x1bce <__lshrdi3+0x1e>
    1be4:	0f 91       	pop	r16
    1be6:	08 95       	ret

00001be8 <itoa>:
    1be8:	45 32       	cpi	r20, 0x25	; 37
    1bea:	51 05       	cpc	r21, r1
    1bec:	20 f4       	brcc	.+8      	; 0x1bf6 <itoa+0xe>
    1bee:	42 30       	cpi	r20, 0x02	; 2
    1bf0:	10 f0       	brcs	.+4      	; 0x1bf6 <itoa+0xe>
    1bf2:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__itoa_ncheck>
    1bf6:	fb 01       	movw	r30, r22
    1bf8:	10 82       	st	Z, r1
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	08 95       	ret

00001bfe <__itoa_ncheck>:
    1bfe:	bb 27       	eor	r27, r27
    1c00:	4a 30       	cpi	r20, 0x0A	; 10
    1c02:	31 f4       	brne	.+12     	; 0x1c10 <__itoa_ncheck+0x12>
    1c04:	99 23       	and	r25, r25
    1c06:	22 f4       	brpl	.+8      	; 0x1c10 <__itoa_ncheck+0x12>
    1c08:	bd e2       	ldi	r27, 0x2D	; 45
    1c0a:	90 95       	com	r25
    1c0c:	81 95       	neg	r24
    1c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c10:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__utoa_common>

00001c14 <__utoa_ncheck>:
    1c14:	bb 27       	eor	r27, r27

00001c16 <__utoa_common>:
    1c16:	fb 01       	movw	r30, r22
    1c18:	55 27       	eor	r21, r21
    1c1a:	aa 27       	eor	r26, r26
    1c1c:	88 0f       	add	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	aa 1f       	adc	r26, r26
    1c22:	a4 17       	cp	r26, r20
    1c24:	10 f0       	brcs	.+4      	; 0x1c2a <__utoa_common+0x14>
    1c26:	a4 1b       	sub	r26, r20
    1c28:	83 95       	inc	r24
    1c2a:	50 51       	subi	r21, 0x10	; 16
    1c2c:	b9 f7       	brne	.-18     	; 0x1c1c <__utoa_common+0x6>
    1c2e:	a0 5d       	subi	r26, 0xD0	; 208
    1c30:	aa 33       	cpi	r26, 0x3A	; 58
    1c32:	08 f0       	brcs	.+2      	; 0x1c36 <__utoa_common+0x20>
    1c34:	a9 5d       	subi	r26, 0xD9	; 217
    1c36:	a1 93       	st	Z+, r26
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	79 f7       	brne	.-34     	; 0x1c1a <__utoa_common+0x4>
    1c3c:	b1 11       	cpse	r27, r1
    1c3e:	b1 93       	st	Z+, r27
    1c40:	11 92       	st	Z+, r1
    1c42:	cb 01       	movw	r24, r22
    1c44:	0c 94 3d 10 	jmp	0x207a	; 0x207a <strrev>

00001c48 <sprintf>:
    1c48:	ae e0       	ldi	r26, 0x0E	; 14
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	ea e2       	ldi	r30, 0x2A	; 42
    1c4e:	fe e0       	ldi	r31, 0x0E	; 14
    1c50:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__prologue_saves__+0x1c>
    1c54:	0d 89       	ldd	r16, Y+21	; 0x15
    1c56:	1e 89       	ldd	r17, Y+22	; 0x16
    1c58:	86 e0       	ldi	r24, 0x06	; 6
    1c5a:	8c 83       	std	Y+4, r24	; 0x04
    1c5c:	1a 83       	std	Y+2, r17	; 0x02
    1c5e:	09 83       	std	Y+1, r16	; 0x01
    1c60:	8f ef       	ldi	r24, 0xFF	; 255
    1c62:	9f e7       	ldi	r25, 0x7F	; 127
    1c64:	9e 83       	std	Y+6, r25	; 0x06
    1c66:	8d 83       	std	Y+5, r24	; 0x05
    1c68:	ae 01       	movw	r20, r28
    1c6a:	47 5e       	subi	r20, 0xE7	; 231
    1c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6e:	6f 89       	ldd	r22, Y+23	; 0x17
    1c70:	78 8d       	ldd	r23, Y+24	; 0x18
    1c72:	ce 01       	movw	r24, r28
    1c74:	01 96       	adiw	r24, 0x01	; 1
    1c76:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <vfprintf>
    1c7a:	ef 81       	ldd	r30, Y+7	; 0x07
    1c7c:	f8 85       	ldd	r31, Y+8	; 0x08
    1c7e:	e0 0f       	add	r30, r16
    1c80:	f1 1f       	adc	r31, r17
    1c82:	10 82       	st	Z, r1
    1c84:	2e 96       	adiw	r28, 0x0e	; 14
    1c86:	e4 e0       	ldi	r30, 0x04	; 4
    1c88:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__epilogue_restores__+0x1c>

00001c8c <vfprintf>:
    1c8c:	ab e0       	ldi	r26, 0x0B	; 11
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	ec e4       	ldi	r30, 0x4C	; 76
    1c92:	fe e0       	ldi	r31, 0x0E	; 14
    1c94:	0c 94 e7 10 	jmp	0x21ce	; 0x21ce <__prologue_saves__>
    1c98:	6c 01       	movw	r12, r24
    1c9a:	7b 01       	movw	r14, r22
    1c9c:	8a 01       	movw	r16, r20
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	17 82       	std	Z+7, r1	; 0x07
    1ca2:	16 82       	std	Z+6, r1	; 0x06
    1ca4:	83 81       	ldd	r24, Z+3	; 0x03
    1ca6:	81 ff       	sbrs	r24, 1
    1ca8:	cc c1       	rjmp	.+920    	; 0x2042 <vfprintf+0x3b6>
    1caa:	ce 01       	movw	r24, r28
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	3c 01       	movw	r6, r24
    1cb0:	f6 01       	movw	r30, r12
    1cb2:	93 81       	ldd	r25, Z+3	; 0x03
    1cb4:	f7 01       	movw	r30, r14
    1cb6:	93 fd       	sbrc	r25, 3
    1cb8:	85 91       	lpm	r24, Z+
    1cba:	93 ff       	sbrs	r25, 3
    1cbc:	81 91       	ld	r24, Z+
    1cbe:	7f 01       	movw	r14, r30
    1cc0:	88 23       	and	r24, r24
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <vfprintf+0x3a>
    1cc4:	ba c1       	rjmp	.+884    	; 0x203a <vfprintf+0x3ae>
    1cc6:	85 32       	cpi	r24, 0x25	; 37
    1cc8:	39 f4       	brne	.+14     	; 0x1cd8 <vfprintf+0x4c>
    1cca:	93 fd       	sbrc	r25, 3
    1ccc:	85 91       	lpm	r24, Z+
    1cce:	93 ff       	sbrs	r25, 3
    1cd0:	81 91       	ld	r24, Z+
    1cd2:	7f 01       	movw	r14, r30
    1cd4:	85 32       	cpi	r24, 0x25	; 37
    1cd6:	29 f4       	brne	.+10     	; 0x1ce2 <vfprintf+0x56>
    1cd8:	b6 01       	movw	r22, r12
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    1ce0:	e7 cf       	rjmp	.-50     	; 0x1cb0 <vfprintf+0x24>
    1ce2:	91 2c       	mov	r9, r1
    1ce4:	21 2c       	mov	r2, r1
    1ce6:	31 2c       	mov	r3, r1
    1ce8:	ff e1       	ldi	r31, 0x1F	; 31
    1cea:	f3 15       	cp	r31, r3
    1cec:	d8 f0       	brcs	.+54     	; 0x1d24 <vfprintf+0x98>
    1cee:	8b 32       	cpi	r24, 0x2B	; 43
    1cf0:	79 f0       	breq	.+30     	; 0x1d10 <vfprintf+0x84>
    1cf2:	38 f4       	brcc	.+14     	; 0x1d02 <vfprintf+0x76>
    1cf4:	80 32       	cpi	r24, 0x20	; 32
    1cf6:	79 f0       	breq	.+30     	; 0x1d16 <vfprintf+0x8a>
    1cf8:	83 32       	cpi	r24, 0x23	; 35
    1cfa:	a1 f4       	brne	.+40     	; 0x1d24 <vfprintf+0x98>
    1cfc:	23 2d       	mov	r18, r3
    1cfe:	20 61       	ori	r18, 0x10	; 16
    1d00:	1d c0       	rjmp	.+58     	; 0x1d3c <vfprintf+0xb0>
    1d02:	8d 32       	cpi	r24, 0x2D	; 45
    1d04:	61 f0       	breq	.+24     	; 0x1d1e <vfprintf+0x92>
    1d06:	80 33       	cpi	r24, 0x30	; 48
    1d08:	69 f4       	brne	.+26     	; 0x1d24 <vfprintf+0x98>
    1d0a:	23 2d       	mov	r18, r3
    1d0c:	21 60       	ori	r18, 0x01	; 1
    1d0e:	16 c0       	rjmp	.+44     	; 0x1d3c <vfprintf+0xb0>
    1d10:	83 2d       	mov	r24, r3
    1d12:	82 60       	ori	r24, 0x02	; 2
    1d14:	38 2e       	mov	r3, r24
    1d16:	e3 2d       	mov	r30, r3
    1d18:	e4 60       	ori	r30, 0x04	; 4
    1d1a:	3e 2e       	mov	r3, r30
    1d1c:	2a c0       	rjmp	.+84     	; 0x1d72 <vfprintf+0xe6>
    1d1e:	f3 2d       	mov	r31, r3
    1d20:	f8 60       	ori	r31, 0x08	; 8
    1d22:	1d c0       	rjmp	.+58     	; 0x1d5e <vfprintf+0xd2>
    1d24:	37 fc       	sbrc	r3, 7
    1d26:	2d c0       	rjmp	.+90     	; 0x1d82 <vfprintf+0xf6>
    1d28:	20 ed       	ldi	r18, 0xD0	; 208
    1d2a:	28 0f       	add	r18, r24
    1d2c:	2a 30       	cpi	r18, 0x0A	; 10
    1d2e:	40 f0       	brcs	.+16     	; 0x1d40 <vfprintf+0xb4>
    1d30:	8e 32       	cpi	r24, 0x2E	; 46
    1d32:	b9 f4       	brne	.+46     	; 0x1d62 <vfprintf+0xd6>
    1d34:	36 fc       	sbrc	r3, 6
    1d36:	81 c1       	rjmp	.+770    	; 0x203a <vfprintf+0x3ae>
    1d38:	23 2d       	mov	r18, r3
    1d3a:	20 64       	ori	r18, 0x40	; 64
    1d3c:	32 2e       	mov	r3, r18
    1d3e:	19 c0       	rjmp	.+50     	; 0x1d72 <vfprintf+0xe6>
    1d40:	36 fe       	sbrs	r3, 6
    1d42:	06 c0       	rjmp	.+12     	; 0x1d50 <vfprintf+0xc4>
    1d44:	8a e0       	ldi	r24, 0x0A	; 10
    1d46:	98 9e       	mul	r9, r24
    1d48:	20 0d       	add	r18, r0
    1d4a:	11 24       	eor	r1, r1
    1d4c:	92 2e       	mov	r9, r18
    1d4e:	11 c0       	rjmp	.+34     	; 0x1d72 <vfprintf+0xe6>
    1d50:	ea e0       	ldi	r30, 0x0A	; 10
    1d52:	2e 9e       	mul	r2, r30
    1d54:	20 0d       	add	r18, r0
    1d56:	11 24       	eor	r1, r1
    1d58:	22 2e       	mov	r2, r18
    1d5a:	f3 2d       	mov	r31, r3
    1d5c:	f0 62       	ori	r31, 0x20	; 32
    1d5e:	3f 2e       	mov	r3, r31
    1d60:	08 c0       	rjmp	.+16     	; 0x1d72 <vfprintf+0xe6>
    1d62:	8c 36       	cpi	r24, 0x6C	; 108
    1d64:	21 f4       	brne	.+8      	; 0x1d6e <vfprintf+0xe2>
    1d66:	83 2d       	mov	r24, r3
    1d68:	80 68       	ori	r24, 0x80	; 128
    1d6a:	38 2e       	mov	r3, r24
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <vfprintf+0xe6>
    1d6e:	88 36       	cpi	r24, 0x68	; 104
    1d70:	41 f4       	brne	.+16     	; 0x1d82 <vfprintf+0xf6>
    1d72:	f7 01       	movw	r30, r14
    1d74:	93 fd       	sbrc	r25, 3
    1d76:	85 91       	lpm	r24, Z+
    1d78:	93 ff       	sbrs	r25, 3
    1d7a:	81 91       	ld	r24, Z+
    1d7c:	7f 01       	movw	r14, r30
    1d7e:	81 11       	cpse	r24, r1
    1d80:	b3 cf       	rjmp	.-154    	; 0x1ce8 <vfprintf+0x5c>
    1d82:	98 2f       	mov	r25, r24
    1d84:	9f 7d       	andi	r25, 0xDF	; 223
    1d86:	95 54       	subi	r25, 0x45	; 69
    1d88:	93 30       	cpi	r25, 0x03	; 3
    1d8a:	28 f4       	brcc	.+10     	; 0x1d96 <vfprintf+0x10a>
    1d8c:	0c 5f       	subi	r16, 0xFC	; 252
    1d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d90:	9f e3       	ldi	r25, 0x3F	; 63
    1d92:	99 83       	std	Y+1, r25	; 0x01
    1d94:	0d c0       	rjmp	.+26     	; 0x1db0 <vfprintf+0x124>
    1d96:	83 36       	cpi	r24, 0x63	; 99
    1d98:	31 f0       	breq	.+12     	; 0x1da6 <vfprintf+0x11a>
    1d9a:	83 37       	cpi	r24, 0x73	; 115
    1d9c:	71 f0       	breq	.+28     	; 0x1dba <vfprintf+0x12e>
    1d9e:	83 35       	cpi	r24, 0x53	; 83
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <vfprintf+0x118>
    1da2:	59 c0       	rjmp	.+178    	; 0x1e56 <vfprintf+0x1ca>
    1da4:	21 c0       	rjmp	.+66     	; 0x1de8 <vfprintf+0x15c>
    1da6:	f8 01       	movw	r30, r16
    1da8:	80 81       	ld	r24, Z
    1daa:	89 83       	std	Y+1, r24	; 0x01
    1dac:	0e 5f       	subi	r16, 0xFE	; 254
    1dae:	1f 4f       	sbci	r17, 0xFF	; 255
    1db0:	88 24       	eor	r8, r8
    1db2:	83 94       	inc	r8
    1db4:	91 2c       	mov	r9, r1
    1db6:	53 01       	movw	r10, r6
    1db8:	13 c0       	rjmp	.+38     	; 0x1de0 <vfprintf+0x154>
    1dba:	28 01       	movw	r4, r16
    1dbc:	f2 e0       	ldi	r31, 0x02	; 2
    1dbe:	4f 0e       	add	r4, r31
    1dc0:	51 1c       	adc	r5, r1
    1dc2:	f8 01       	movw	r30, r16
    1dc4:	a0 80       	ld	r10, Z
    1dc6:	b1 80       	ldd	r11, Z+1	; 0x01
    1dc8:	36 fe       	sbrs	r3, 6
    1dca:	03 c0       	rjmp	.+6      	; 0x1dd2 <vfprintf+0x146>
    1dcc:	69 2d       	mov	r22, r9
    1dce:	70 e0       	ldi	r23, 0x00	; 0
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <vfprintf+0x14a>
    1dd2:	6f ef       	ldi	r22, 0xFF	; 255
    1dd4:	7f ef       	ldi	r23, 0xFF	; 255
    1dd6:	c5 01       	movw	r24, r10
    1dd8:	0e 94 32 10 	call	0x2064	; 0x2064 <strnlen>
    1ddc:	4c 01       	movw	r8, r24
    1dde:	82 01       	movw	r16, r4
    1de0:	f3 2d       	mov	r31, r3
    1de2:	ff 77       	andi	r31, 0x7F	; 127
    1de4:	3f 2e       	mov	r3, r31
    1de6:	16 c0       	rjmp	.+44     	; 0x1e14 <vfprintf+0x188>
    1de8:	28 01       	movw	r4, r16
    1dea:	22 e0       	ldi	r18, 0x02	; 2
    1dec:	42 0e       	add	r4, r18
    1dee:	51 1c       	adc	r5, r1
    1df0:	f8 01       	movw	r30, r16
    1df2:	a0 80       	ld	r10, Z
    1df4:	b1 80       	ldd	r11, Z+1	; 0x01
    1df6:	36 fe       	sbrs	r3, 6
    1df8:	03 c0       	rjmp	.+6      	; 0x1e00 <vfprintf+0x174>
    1dfa:	69 2d       	mov	r22, r9
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <vfprintf+0x178>
    1e00:	6f ef       	ldi	r22, 0xFF	; 255
    1e02:	7f ef       	ldi	r23, 0xFF	; 255
    1e04:	c5 01       	movw	r24, r10
    1e06:	0e 94 27 10 	call	0x204e	; 0x204e <strnlen_P>
    1e0a:	4c 01       	movw	r8, r24
    1e0c:	f3 2d       	mov	r31, r3
    1e0e:	f0 68       	ori	r31, 0x80	; 128
    1e10:	3f 2e       	mov	r3, r31
    1e12:	82 01       	movw	r16, r4
    1e14:	33 fc       	sbrc	r3, 3
    1e16:	1b c0       	rjmp	.+54     	; 0x1e4e <vfprintf+0x1c2>
    1e18:	82 2d       	mov	r24, r2
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	88 16       	cp	r8, r24
    1e1e:	99 06       	cpc	r9, r25
    1e20:	b0 f4       	brcc	.+44     	; 0x1e4e <vfprintf+0x1c2>
    1e22:	b6 01       	movw	r22, r12
    1e24:	80 e2       	ldi	r24, 0x20	; 32
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    1e2c:	2a 94       	dec	r2
    1e2e:	f4 cf       	rjmp	.-24     	; 0x1e18 <vfprintf+0x18c>
    1e30:	f5 01       	movw	r30, r10
    1e32:	37 fc       	sbrc	r3, 7
    1e34:	85 91       	lpm	r24, Z+
    1e36:	37 fe       	sbrs	r3, 7
    1e38:	81 91       	ld	r24, Z+
    1e3a:	5f 01       	movw	r10, r30
    1e3c:	b6 01       	movw	r22, r12
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    1e44:	21 10       	cpse	r2, r1
    1e46:	2a 94       	dec	r2
    1e48:	21 e0       	ldi	r18, 0x01	; 1
    1e4a:	82 1a       	sub	r8, r18
    1e4c:	91 08       	sbc	r9, r1
    1e4e:	81 14       	cp	r8, r1
    1e50:	91 04       	cpc	r9, r1
    1e52:	71 f7       	brne	.-36     	; 0x1e30 <vfprintf+0x1a4>
    1e54:	e8 c0       	rjmp	.+464    	; 0x2026 <vfprintf+0x39a>
    1e56:	84 36       	cpi	r24, 0x64	; 100
    1e58:	11 f0       	breq	.+4      	; 0x1e5e <vfprintf+0x1d2>
    1e5a:	89 36       	cpi	r24, 0x69	; 105
    1e5c:	41 f5       	brne	.+80     	; 0x1eae <vfprintf+0x222>
    1e5e:	f8 01       	movw	r30, r16
    1e60:	37 fe       	sbrs	r3, 7
    1e62:	07 c0       	rjmp	.+14     	; 0x1e72 <vfprintf+0x1e6>
    1e64:	60 81       	ld	r22, Z
    1e66:	71 81       	ldd	r23, Z+1	; 0x01
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	93 81       	ldd	r25, Z+3	; 0x03
    1e6c:	0c 5f       	subi	r16, 0xFC	; 252
    1e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e70:	08 c0       	rjmp	.+16     	; 0x1e82 <vfprintf+0x1f6>
    1e72:	60 81       	ld	r22, Z
    1e74:	71 81       	ldd	r23, Z+1	; 0x01
    1e76:	07 2e       	mov	r0, r23
    1e78:	00 0c       	add	r0, r0
    1e7a:	88 0b       	sbc	r24, r24
    1e7c:	99 0b       	sbc	r25, r25
    1e7e:	0e 5f       	subi	r16, 0xFE	; 254
    1e80:	1f 4f       	sbci	r17, 0xFF	; 255
    1e82:	f3 2d       	mov	r31, r3
    1e84:	ff 76       	andi	r31, 0x6F	; 111
    1e86:	3f 2e       	mov	r3, r31
    1e88:	97 ff       	sbrs	r25, 7
    1e8a:	09 c0       	rjmp	.+18     	; 0x1e9e <vfprintf+0x212>
    1e8c:	90 95       	com	r25
    1e8e:	80 95       	com	r24
    1e90:	70 95       	com	r23
    1e92:	61 95       	neg	r22
    1e94:	7f 4f       	sbci	r23, 0xFF	; 255
    1e96:	8f 4f       	sbci	r24, 0xFF	; 255
    1e98:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9a:	f0 68       	ori	r31, 0x80	; 128
    1e9c:	3f 2e       	mov	r3, r31
    1e9e:	2a e0       	ldi	r18, 0x0A	; 10
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	a3 01       	movw	r20, r6
    1ea4:	0e 94 89 10 	call	0x2112	; 0x2112 <__ultoa_invert>
    1ea8:	88 2e       	mov	r8, r24
    1eaa:	86 18       	sub	r8, r6
    1eac:	45 c0       	rjmp	.+138    	; 0x1f38 <vfprintf+0x2ac>
    1eae:	85 37       	cpi	r24, 0x75	; 117
    1eb0:	31 f4       	brne	.+12     	; 0x1ebe <vfprintf+0x232>
    1eb2:	23 2d       	mov	r18, r3
    1eb4:	2f 7e       	andi	r18, 0xEF	; 239
    1eb6:	b2 2e       	mov	r11, r18
    1eb8:	2a e0       	ldi	r18, 0x0A	; 10
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	25 c0       	rjmp	.+74     	; 0x1f08 <vfprintf+0x27c>
    1ebe:	93 2d       	mov	r25, r3
    1ec0:	99 7f       	andi	r25, 0xF9	; 249
    1ec2:	b9 2e       	mov	r11, r25
    1ec4:	8f 36       	cpi	r24, 0x6F	; 111
    1ec6:	c1 f0       	breq	.+48     	; 0x1ef8 <vfprintf+0x26c>
    1ec8:	18 f4       	brcc	.+6      	; 0x1ed0 <vfprintf+0x244>
    1eca:	88 35       	cpi	r24, 0x58	; 88
    1ecc:	79 f0       	breq	.+30     	; 0x1eec <vfprintf+0x260>
    1ece:	b5 c0       	rjmp	.+362    	; 0x203a <vfprintf+0x3ae>
    1ed0:	80 37       	cpi	r24, 0x70	; 112
    1ed2:	19 f0       	breq	.+6      	; 0x1eda <vfprintf+0x24e>
    1ed4:	88 37       	cpi	r24, 0x78	; 120
    1ed6:	21 f0       	breq	.+8      	; 0x1ee0 <vfprintf+0x254>
    1ed8:	b0 c0       	rjmp	.+352    	; 0x203a <vfprintf+0x3ae>
    1eda:	e9 2f       	mov	r30, r25
    1edc:	e0 61       	ori	r30, 0x10	; 16
    1ede:	be 2e       	mov	r11, r30
    1ee0:	b4 fe       	sbrs	r11, 4
    1ee2:	0d c0       	rjmp	.+26     	; 0x1efe <vfprintf+0x272>
    1ee4:	fb 2d       	mov	r31, r11
    1ee6:	f4 60       	ori	r31, 0x04	; 4
    1ee8:	bf 2e       	mov	r11, r31
    1eea:	09 c0       	rjmp	.+18     	; 0x1efe <vfprintf+0x272>
    1eec:	34 fe       	sbrs	r3, 4
    1eee:	0a c0       	rjmp	.+20     	; 0x1f04 <vfprintf+0x278>
    1ef0:	29 2f       	mov	r18, r25
    1ef2:	26 60       	ori	r18, 0x06	; 6
    1ef4:	b2 2e       	mov	r11, r18
    1ef6:	06 c0       	rjmp	.+12     	; 0x1f04 <vfprintf+0x278>
    1ef8:	28 e0       	ldi	r18, 0x08	; 8
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	05 c0       	rjmp	.+10     	; 0x1f08 <vfprintf+0x27c>
    1efe:	20 e1       	ldi	r18, 0x10	; 16
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <vfprintf+0x27c>
    1f04:	20 e1       	ldi	r18, 0x10	; 16
    1f06:	32 e0       	ldi	r19, 0x02	; 2
    1f08:	f8 01       	movw	r30, r16
    1f0a:	b7 fe       	sbrs	r11, 7
    1f0c:	07 c0       	rjmp	.+14     	; 0x1f1c <vfprintf+0x290>
    1f0e:	60 81       	ld	r22, Z
    1f10:	71 81       	ldd	r23, Z+1	; 0x01
    1f12:	82 81       	ldd	r24, Z+2	; 0x02
    1f14:	93 81       	ldd	r25, Z+3	; 0x03
    1f16:	0c 5f       	subi	r16, 0xFC	; 252
    1f18:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1a:	06 c0       	rjmp	.+12     	; 0x1f28 <vfprintf+0x29c>
    1f1c:	60 81       	ld	r22, Z
    1f1e:	71 81       	ldd	r23, Z+1	; 0x01
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e 5f       	subi	r16, 0xFE	; 254
    1f26:	1f 4f       	sbci	r17, 0xFF	; 255
    1f28:	a3 01       	movw	r20, r6
    1f2a:	0e 94 89 10 	call	0x2112	; 0x2112 <__ultoa_invert>
    1f2e:	88 2e       	mov	r8, r24
    1f30:	86 18       	sub	r8, r6
    1f32:	fb 2d       	mov	r31, r11
    1f34:	ff 77       	andi	r31, 0x7F	; 127
    1f36:	3f 2e       	mov	r3, r31
    1f38:	36 fe       	sbrs	r3, 6
    1f3a:	0d c0       	rjmp	.+26     	; 0x1f56 <vfprintf+0x2ca>
    1f3c:	23 2d       	mov	r18, r3
    1f3e:	2e 7f       	andi	r18, 0xFE	; 254
    1f40:	a2 2e       	mov	r10, r18
    1f42:	89 14       	cp	r8, r9
    1f44:	58 f4       	brcc	.+22     	; 0x1f5c <vfprintf+0x2d0>
    1f46:	34 fe       	sbrs	r3, 4
    1f48:	0b c0       	rjmp	.+22     	; 0x1f60 <vfprintf+0x2d4>
    1f4a:	32 fc       	sbrc	r3, 2
    1f4c:	09 c0       	rjmp	.+18     	; 0x1f60 <vfprintf+0x2d4>
    1f4e:	83 2d       	mov	r24, r3
    1f50:	8e 7e       	andi	r24, 0xEE	; 238
    1f52:	a8 2e       	mov	r10, r24
    1f54:	05 c0       	rjmp	.+10     	; 0x1f60 <vfprintf+0x2d4>
    1f56:	b8 2c       	mov	r11, r8
    1f58:	a3 2c       	mov	r10, r3
    1f5a:	03 c0       	rjmp	.+6      	; 0x1f62 <vfprintf+0x2d6>
    1f5c:	b8 2c       	mov	r11, r8
    1f5e:	01 c0       	rjmp	.+2      	; 0x1f62 <vfprintf+0x2d6>
    1f60:	b9 2c       	mov	r11, r9
    1f62:	a4 fe       	sbrs	r10, 4
    1f64:	0f c0       	rjmp	.+30     	; 0x1f84 <vfprintf+0x2f8>
    1f66:	fe 01       	movw	r30, r28
    1f68:	e8 0d       	add	r30, r8
    1f6a:	f1 1d       	adc	r31, r1
    1f6c:	80 81       	ld	r24, Z
    1f6e:	80 33       	cpi	r24, 0x30	; 48
    1f70:	21 f4       	brne	.+8      	; 0x1f7a <vfprintf+0x2ee>
    1f72:	9a 2d       	mov	r25, r10
    1f74:	99 7e       	andi	r25, 0xE9	; 233
    1f76:	a9 2e       	mov	r10, r25
    1f78:	09 c0       	rjmp	.+18     	; 0x1f8c <vfprintf+0x300>
    1f7a:	a2 fe       	sbrs	r10, 2
    1f7c:	06 c0       	rjmp	.+12     	; 0x1f8a <vfprintf+0x2fe>
    1f7e:	b3 94       	inc	r11
    1f80:	b3 94       	inc	r11
    1f82:	04 c0       	rjmp	.+8      	; 0x1f8c <vfprintf+0x300>
    1f84:	8a 2d       	mov	r24, r10
    1f86:	86 78       	andi	r24, 0x86	; 134
    1f88:	09 f0       	breq	.+2      	; 0x1f8c <vfprintf+0x300>
    1f8a:	b3 94       	inc	r11
    1f8c:	a3 fc       	sbrc	r10, 3
    1f8e:	11 c0       	rjmp	.+34     	; 0x1fb2 <vfprintf+0x326>
    1f90:	a0 fe       	sbrs	r10, 0
    1f92:	06 c0       	rjmp	.+12     	; 0x1fa0 <vfprintf+0x314>
    1f94:	b2 14       	cp	r11, r2
    1f96:	88 f4       	brcc	.+34     	; 0x1fba <vfprintf+0x32e>
    1f98:	28 0c       	add	r2, r8
    1f9a:	92 2c       	mov	r9, r2
    1f9c:	9b 18       	sub	r9, r11
    1f9e:	0e c0       	rjmp	.+28     	; 0x1fbc <vfprintf+0x330>
    1fa0:	b2 14       	cp	r11, r2
    1fa2:	60 f4       	brcc	.+24     	; 0x1fbc <vfprintf+0x330>
    1fa4:	b6 01       	movw	r22, r12
    1fa6:	80 e2       	ldi	r24, 0x20	; 32
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    1fae:	b3 94       	inc	r11
    1fb0:	f7 cf       	rjmp	.-18     	; 0x1fa0 <vfprintf+0x314>
    1fb2:	b2 14       	cp	r11, r2
    1fb4:	18 f4       	brcc	.+6      	; 0x1fbc <vfprintf+0x330>
    1fb6:	2b 18       	sub	r2, r11
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <vfprintf+0x332>
    1fba:	98 2c       	mov	r9, r8
    1fbc:	21 2c       	mov	r2, r1
    1fbe:	a4 fe       	sbrs	r10, 4
    1fc0:	10 c0       	rjmp	.+32     	; 0x1fe2 <vfprintf+0x356>
    1fc2:	b6 01       	movw	r22, r12
    1fc4:	80 e3       	ldi	r24, 0x30	; 48
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    1fcc:	a2 fe       	sbrs	r10, 2
    1fce:	17 c0       	rjmp	.+46     	; 0x1ffe <vfprintf+0x372>
    1fd0:	a1 fc       	sbrc	r10, 1
    1fd2:	03 c0       	rjmp	.+6      	; 0x1fda <vfprintf+0x34e>
    1fd4:	88 e7       	ldi	r24, 0x78	; 120
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <vfprintf+0x352>
    1fda:	88 e5       	ldi	r24, 0x58	; 88
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	b6 01       	movw	r22, r12
    1fe0:	0c c0       	rjmp	.+24     	; 0x1ffa <vfprintf+0x36e>
    1fe2:	8a 2d       	mov	r24, r10
    1fe4:	86 78       	andi	r24, 0x86	; 134
    1fe6:	59 f0       	breq	.+22     	; 0x1ffe <vfprintf+0x372>
    1fe8:	a1 fe       	sbrs	r10, 1
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <vfprintf+0x364>
    1fec:	8b e2       	ldi	r24, 0x2B	; 43
    1fee:	01 c0       	rjmp	.+2      	; 0x1ff2 <vfprintf+0x366>
    1ff0:	80 e2       	ldi	r24, 0x20	; 32
    1ff2:	a7 fc       	sbrc	r10, 7
    1ff4:	8d e2       	ldi	r24, 0x2D	; 45
    1ff6:	b6 01       	movw	r22, r12
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    1ffe:	89 14       	cp	r8, r9
    2000:	38 f4       	brcc	.+14     	; 0x2010 <vfprintf+0x384>
    2002:	b6 01       	movw	r22, r12
    2004:	80 e3       	ldi	r24, 0x30	; 48
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    200c:	9a 94       	dec	r9
    200e:	f7 cf       	rjmp	.-18     	; 0x1ffe <vfprintf+0x372>
    2010:	8a 94       	dec	r8
    2012:	f3 01       	movw	r30, r6
    2014:	e8 0d       	add	r30, r8
    2016:	f1 1d       	adc	r31, r1
    2018:	80 81       	ld	r24, Z
    201a:	b6 01       	movw	r22, r12
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    2022:	81 10       	cpse	r8, r1
    2024:	f5 cf       	rjmp	.-22     	; 0x2010 <vfprintf+0x384>
    2026:	22 20       	and	r2, r2
    2028:	09 f4       	brne	.+2      	; 0x202c <vfprintf+0x3a0>
    202a:	42 ce       	rjmp	.-892    	; 0x1cb0 <vfprintf+0x24>
    202c:	b6 01       	movw	r22, r12
    202e:	80 e2       	ldi	r24, 0x20	; 32
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	0e 94 4d 10 	call	0x209a	; 0x209a <fputc>
    2036:	2a 94       	dec	r2
    2038:	f6 cf       	rjmp	.-20     	; 0x2026 <vfprintf+0x39a>
    203a:	f6 01       	movw	r30, r12
    203c:	86 81       	ldd	r24, Z+6	; 0x06
    203e:	97 81       	ldd	r25, Z+7	; 0x07
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <vfprintf+0x3ba>
    2042:	8f ef       	ldi	r24, 0xFF	; 255
    2044:	9f ef       	ldi	r25, 0xFF	; 255
    2046:	2b 96       	adiw	r28, 0x0b	; 11
    2048:	e2 e1       	ldi	r30, 0x12	; 18
    204a:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__epilogue_restores__>

0000204e <strnlen_P>:
    204e:	fc 01       	movw	r30, r24
    2050:	05 90       	lpm	r0, Z+
    2052:	61 50       	subi	r22, 0x01	; 1
    2054:	70 40       	sbci	r23, 0x00	; 0
    2056:	01 10       	cpse	r0, r1
    2058:	d8 f7       	brcc	.-10     	; 0x2050 <strnlen_P+0x2>
    205a:	80 95       	com	r24
    205c:	90 95       	com	r25
    205e:	8e 0f       	add	r24, r30
    2060:	9f 1f       	adc	r25, r31
    2062:	08 95       	ret

00002064 <strnlen>:
    2064:	fc 01       	movw	r30, r24
    2066:	61 50       	subi	r22, 0x01	; 1
    2068:	70 40       	sbci	r23, 0x00	; 0
    206a:	01 90       	ld	r0, Z+
    206c:	01 10       	cpse	r0, r1
    206e:	d8 f7       	brcc	.-10     	; 0x2066 <strnlen+0x2>
    2070:	80 95       	com	r24
    2072:	90 95       	com	r25
    2074:	8e 0f       	add	r24, r30
    2076:	9f 1f       	adc	r25, r31
    2078:	08 95       	ret

0000207a <strrev>:
    207a:	dc 01       	movw	r26, r24
    207c:	fc 01       	movw	r30, r24
    207e:	67 2f       	mov	r22, r23
    2080:	71 91       	ld	r23, Z+
    2082:	77 23       	and	r23, r23
    2084:	e1 f7       	brne	.-8      	; 0x207e <strrev+0x4>
    2086:	32 97       	sbiw	r30, 0x02	; 2
    2088:	04 c0       	rjmp	.+8      	; 0x2092 <strrev+0x18>
    208a:	7c 91       	ld	r23, X
    208c:	6d 93       	st	X+, r22
    208e:	70 83       	st	Z, r23
    2090:	62 91       	ld	r22, -Z
    2092:	ae 17       	cp	r26, r30
    2094:	bf 07       	cpc	r27, r31
    2096:	c8 f3       	brcs	.-14     	; 0x208a <strrev+0x10>
    2098:	08 95       	ret

0000209a <fputc>:
    209a:	0f 93       	push	r16
    209c:	1f 93       	push	r17
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	fb 01       	movw	r30, r22
    20a4:	23 81       	ldd	r18, Z+3	; 0x03
    20a6:	21 fd       	sbrc	r18, 1
    20a8:	03 c0       	rjmp	.+6      	; 0x20b0 <fputc+0x16>
    20aa:	8f ef       	ldi	r24, 0xFF	; 255
    20ac:	9f ef       	ldi	r25, 0xFF	; 255
    20ae:	2c c0       	rjmp	.+88     	; 0x2108 <fputc+0x6e>
    20b0:	22 ff       	sbrs	r18, 2
    20b2:	16 c0       	rjmp	.+44     	; 0x20e0 <fputc+0x46>
    20b4:	46 81       	ldd	r20, Z+6	; 0x06
    20b6:	57 81       	ldd	r21, Z+7	; 0x07
    20b8:	24 81       	ldd	r18, Z+4	; 0x04
    20ba:	35 81       	ldd	r19, Z+5	; 0x05
    20bc:	42 17       	cp	r20, r18
    20be:	53 07       	cpc	r21, r19
    20c0:	44 f4       	brge	.+16     	; 0x20d2 <fputc+0x38>
    20c2:	a0 81       	ld	r26, Z
    20c4:	b1 81       	ldd	r27, Z+1	; 0x01
    20c6:	9d 01       	movw	r18, r26
    20c8:	2f 5f       	subi	r18, 0xFF	; 255
    20ca:	3f 4f       	sbci	r19, 0xFF	; 255
    20cc:	31 83       	std	Z+1, r19	; 0x01
    20ce:	20 83       	st	Z, r18
    20d0:	8c 93       	st	X, r24
    20d2:	26 81       	ldd	r18, Z+6	; 0x06
    20d4:	37 81       	ldd	r19, Z+7	; 0x07
    20d6:	2f 5f       	subi	r18, 0xFF	; 255
    20d8:	3f 4f       	sbci	r19, 0xFF	; 255
    20da:	37 83       	std	Z+7, r19	; 0x07
    20dc:	26 83       	std	Z+6, r18	; 0x06
    20de:	14 c0       	rjmp	.+40     	; 0x2108 <fputc+0x6e>
    20e0:	8b 01       	movw	r16, r22
    20e2:	ec 01       	movw	r28, r24
    20e4:	fb 01       	movw	r30, r22
    20e6:	00 84       	ldd	r0, Z+8	; 0x08
    20e8:	f1 85       	ldd	r31, Z+9	; 0x09
    20ea:	e0 2d       	mov	r30, r0
    20ec:	09 95       	icall
    20ee:	89 2b       	or	r24, r25
    20f0:	e1 f6       	brne	.-72     	; 0x20aa <fputc+0x10>
    20f2:	d8 01       	movw	r26, r16
    20f4:	16 96       	adiw	r26, 0x06	; 6
    20f6:	8d 91       	ld	r24, X+
    20f8:	9c 91       	ld	r25, X
    20fa:	17 97       	sbiw	r26, 0x07	; 7
    20fc:	01 96       	adiw	r24, 0x01	; 1
    20fe:	17 96       	adiw	r26, 0x07	; 7
    2100:	9c 93       	st	X, r25
    2102:	8e 93       	st	-X, r24
    2104:	16 97       	sbiw	r26, 0x06	; 6
    2106:	ce 01       	movw	r24, r28
    2108:	df 91       	pop	r29
    210a:	cf 91       	pop	r28
    210c:	1f 91       	pop	r17
    210e:	0f 91       	pop	r16
    2110:	08 95       	ret

00002112 <__ultoa_invert>:
    2112:	fa 01       	movw	r30, r20
    2114:	aa 27       	eor	r26, r26
    2116:	28 30       	cpi	r18, 0x08	; 8
    2118:	51 f1       	breq	.+84     	; 0x216e <__ultoa_invert+0x5c>
    211a:	20 31       	cpi	r18, 0x10	; 16
    211c:	81 f1       	breq	.+96     	; 0x217e <__ultoa_invert+0x6c>
    211e:	e8 94       	clt
    2120:	6f 93       	push	r22
    2122:	6e 7f       	andi	r22, 0xFE	; 254
    2124:	6e 5f       	subi	r22, 0xFE	; 254
    2126:	7f 4f       	sbci	r23, 0xFF	; 255
    2128:	8f 4f       	sbci	r24, 0xFF	; 255
    212a:	9f 4f       	sbci	r25, 0xFF	; 255
    212c:	af 4f       	sbci	r26, 0xFF	; 255
    212e:	b1 e0       	ldi	r27, 0x01	; 1
    2130:	3e d0       	rcall	.+124    	; 0x21ae <__ultoa_invert+0x9c>
    2132:	b4 e0       	ldi	r27, 0x04	; 4
    2134:	3c d0       	rcall	.+120    	; 0x21ae <__ultoa_invert+0x9c>
    2136:	67 0f       	add	r22, r23
    2138:	78 1f       	adc	r23, r24
    213a:	89 1f       	adc	r24, r25
    213c:	9a 1f       	adc	r25, r26
    213e:	a1 1d       	adc	r26, r1
    2140:	68 0f       	add	r22, r24
    2142:	79 1f       	adc	r23, r25
    2144:	8a 1f       	adc	r24, r26
    2146:	91 1d       	adc	r25, r1
    2148:	a1 1d       	adc	r26, r1
    214a:	6a 0f       	add	r22, r26
    214c:	71 1d       	adc	r23, r1
    214e:	81 1d       	adc	r24, r1
    2150:	91 1d       	adc	r25, r1
    2152:	a1 1d       	adc	r26, r1
    2154:	20 d0       	rcall	.+64     	; 0x2196 <__ultoa_invert+0x84>
    2156:	09 f4       	brne	.+2      	; 0x215a <__ultoa_invert+0x48>
    2158:	68 94       	set
    215a:	3f 91       	pop	r19
    215c:	2a e0       	ldi	r18, 0x0A	; 10
    215e:	26 9f       	mul	r18, r22
    2160:	11 24       	eor	r1, r1
    2162:	30 19       	sub	r19, r0
    2164:	30 5d       	subi	r19, 0xD0	; 208
    2166:	31 93       	st	Z+, r19
    2168:	de f6       	brtc	.-74     	; 0x2120 <__ultoa_invert+0xe>
    216a:	cf 01       	movw	r24, r30
    216c:	08 95       	ret
    216e:	46 2f       	mov	r20, r22
    2170:	47 70       	andi	r20, 0x07	; 7
    2172:	40 5d       	subi	r20, 0xD0	; 208
    2174:	41 93       	st	Z+, r20
    2176:	b3 e0       	ldi	r27, 0x03	; 3
    2178:	0f d0       	rcall	.+30     	; 0x2198 <__ultoa_invert+0x86>
    217a:	c9 f7       	brne	.-14     	; 0x216e <__ultoa_invert+0x5c>
    217c:	f6 cf       	rjmp	.-20     	; 0x216a <__ultoa_invert+0x58>
    217e:	46 2f       	mov	r20, r22
    2180:	4f 70       	andi	r20, 0x0F	; 15
    2182:	40 5d       	subi	r20, 0xD0	; 208
    2184:	4a 33       	cpi	r20, 0x3A	; 58
    2186:	18 f0       	brcs	.+6      	; 0x218e <__ultoa_invert+0x7c>
    2188:	49 5d       	subi	r20, 0xD9	; 217
    218a:	31 fd       	sbrc	r19, 1
    218c:	40 52       	subi	r20, 0x20	; 32
    218e:	41 93       	st	Z+, r20
    2190:	02 d0       	rcall	.+4      	; 0x2196 <__ultoa_invert+0x84>
    2192:	a9 f7       	brne	.-22     	; 0x217e <__ultoa_invert+0x6c>
    2194:	ea cf       	rjmp	.-44     	; 0x216a <__ultoa_invert+0x58>
    2196:	b4 e0       	ldi	r27, 0x04	; 4
    2198:	a6 95       	lsr	r26
    219a:	97 95       	ror	r25
    219c:	87 95       	ror	r24
    219e:	77 95       	ror	r23
    21a0:	67 95       	ror	r22
    21a2:	ba 95       	dec	r27
    21a4:	c9 f7       	brne	.-14     	; 0x2198 <__ultoa_invert+0x86>
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	61 05       	cpc	r22, r1
    21aa:	71 05       	cpc	r23, r1
    21ac:	08 95       	ret
    21ae:	9b 01       	movw	r18, r22
    21b0:	ac 01       	movw	r20, r24
    21b2:	0a 2e       	mov	r0, r26
    21b4:	06 94       	lsr	r0
    21b6:	57 95       	ror	r21
    21b8:	47 95       	ror	r20
    21ba:	37 95       	ror	r19
    21bc:	27 95       	ror	r18
    21be:	ba 95       	dec	r27
    21c0:	c9 f7       	brne	.-14     	; 0x21b4 <__ultoa_invert+0xa2>
    21c2:	62 0f       	add	r22, r18
    21c4:	73 1f       	adc	r23, r19
    21c6:	84 1f       	adc	r24, r20
    21c8:	95 1f       	adc	r25, r21
    21ca:	a0 1d       	adc	r26, r0
    21cc:	08 95       	ret

000021ce <__prologue_saves__>:
    21ce:	2f 92       	push	r2
    21d0:	3f 92       	push	r3
    21d2:	4f 92       	push	r4
    21d4:	5f 92       	push	r5
    21d6:	6f 92       	push	r6
    21d8:	7f 92       	push	r7
    21da:	8f 92       	push	r8
    21dc:	9f 92       	push	r9
    21de:	af 92       	push	r10
    21e0:	bf 92       	push	r11
    21e2:	cf 92       	push	r12
    21e4:	df 92       	push	r13
    21e6:	ef 92       	push	r14
    21e8:	ff 92       	push	r15
    21ea:	0f 93       	push	r16
    21ec:	1f 93       	push	r17
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	ca 1b       	sub	r28, r26
    21f8:	db 0b       	sbc	r29, r27
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
    2204:	09 94       	ijmp

00002206 <__epilogue_restores__>:
    2206:	2a 88       	ldd	r2, Y+18	; 0x12
    2208:	39 88       	ldd	r3, Y+17	; 0x11
    220a:	48 88       	ldd	r4, Y+16	; 0x10
    220c:	5f 84       	ldd	r5, Y+15	; 0x0f
    220e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2210:	7d 84       	ldd	r7, Y+13	; 0x0d
    2212:	8c 84       	ldd	r8, Y+12	; 0x0c
    2214:	9b 84       	ldd	r9, Y+11	; 0x0b
    2216:	aa 84       	ldd	r10, Y+10	; 0x0a
    2218:	b9 84       	ldd	r11, Y+9	; 0x09
    221a:	c8 84       	ldd	r12, Y+8	; 0x08
    221c:	df 80       	ldd	r13, Y+7	; 0x07
    221e:	ee 80       	ldd	r14, Y+6	; 0x06
    2220:	fd 80       	ldd	r15, Y+5	; 0x05
    2222:	0c 81       	ldd	r16, Y+4	; 0x04
    2224:	1b 81       	ldd	r17, Y+3	; 0x03
    2226:	aa 81       	ldd	r26, Y+2	; 0x02
    2228:	b9 81       	ldd	r27, Y+1	; 0x01
    222a:	ce 0f       	add	r28, r30
    222c:	d1 1d       	adc	r29, r1
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	ed 01       	movw	r28, r26
    223a:	08 95       	ret

0000223c <_exit>:
    223c:	f8 94       	cli

0000223e <__stop_program>:
    223e:	ff cf       	rjmp	.-2      	; 0x223e <__stop_program>
