
ui_modeSwitch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  000007d0  00000864  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080017e  0080017e  000008e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000914  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b25  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e3e  00000000  00000000  000025e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d52  00000000  00000000  0000341f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  00004174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000756  00000000  00000000  0000447c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be8  00000000  00000000  00004bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000057ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 ed       	ldi	r30, 0xD0	; 208
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ae 37       	cpi	r26, 0x7E	; 126
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ae e7       	ldi	r26, 0x7E	; 126
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ae 38       	cpi	r26, 0x8E	; 142
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 9d 01 	call	0x33a	; 0x33a <main>
  ea:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <I2C_WRITESEQ>:

void lcd_data(unsigned char data)

{

    wr_lcd_mode(data, 1);
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	7b 01       	movw	r14, r22
 100:	14 2f       	mov	r17, r20
 102:	88 0f       	add	r24, r24
 104:	0e 94 b9 02 	call	0x572	; 0x572 <i2c_start>
 108:	81 11       	cpse	r24, r1
 10a:	12 c0       	rjmp	.+36     	; 0x130 <I2C_WRITESEQ+0x3e>
 10c:	11 23       	and	r17, r17
 10e:	91 f0       	breq	.+36     	; 0x134 <I2C_WRITESEQ+0x42>
 110:	e7 01       	movw	r28, r14
 112:	11 50       	subi	r17, 0x01	; 1
 114:	01 2f       	mov	r16, r17
 116:	10 e0       	ldi	r17, 0x00	; 0
 118:	0f 5f       	subi	r16, 0xFF	; 255
 11a:	1f 4f       	sbci	r17, 0xFF	; 255
 11c:	0e 0d       	add	r16, r14
 11e:	1f 1d       	adc	r17, r15
 120:	89 91       	ld	r24, Y+
 122:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <i2c_write>
 126:	c0 17       	cp	r28, r16
 128:	d1 07       	cpc	r29, r17
 12a:	d1 f7       	brne	.-12     	; 0x120 <I2C_WRITESEQ+0x2e>
 12c:	c0 e0       	ldi	r28, 0x00	; 0
 12e:	03 c0       	rjmp	.+6      	; 0x136 <I2C_WRITESEQ+0x44>
 130:	c1 e0       	ldi	r28, 0x01	; 1
 132:	01 c0       	rjmp	.+2      	; 0x136 <I2C_WRITESEQ+0x44>
 134:	c0 e0       	ldi	r28, 0x00	; 0
 136:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_stop>
 13a:	8c 2f       	mov	r24, r28
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	ff 90       	pop	r15
 146:	ef 90       	pop	r14
 148:	08 95       	ret

0000014a <wr_lcd_mode>:
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	00 d0       	rcall	.+0      	; 0x154 <wr_lcd_mode+0xa>
 154:	00 d0       	rcall	.+0      	; 0x156 <wr_lcd_mode+0xc>
 156:	1f 92       	push	r1
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	08 2f       	mov	r16, r24
 15e:	68 30       	cpi	r22, 0x08	; 8
 160:	71 f4       	brne	.+28     	; 0x17e <wr_lcd_mode+0x34>
 162:	81 11       	cpse	r24, r1
 164:	02 c0       	rjmp	.+4      	; 0x16a <wr_lcd_mode+0x20>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	01 c0       	rjmp	.+2      	; 0x16c <wr_lcd_mode+0x22>
 16a:	88 e0       	ldi	r24, 0x08	; 8
 16c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	71 e0       	ldi	r23, 0x01	; 1
 176:	87 e2       	ldi	r24, 0x27	; 39
 178:	0e 94 79 00 	call	0xf2	; 0xf2 <I2C_WRITESEQ>
 17c:	26 c0       	rjmp	.+76     	; 0x1ca <wr_lcd_mode+0x80>
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 182:	16 2f       	mov	r17, r22
 184:	18 2b       	or	r17, r24
 186:	19 83       	std	Y+1, r17	; 0x01
 188:	80 2f       	mov	r24, r16
 18a:	80 7f       	andi	r24, 0xF0	; 240
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	81 2b       	or	r24, r17
 190:	8a 83       	std	Y+2, r24	; 0x02
 192:	8b 7f       	andi	r24, 0xFB	; 251
 194:	8b 83       	std	Y+3, r24	; 0x03
 196:	20 e1       	ldi	r18, 0x10	; 16
 198:	02 9f       	mul	r16, r18
 19a:	c0 01       	movw	r24, r0
 19c:	11 24       	eor	r1, r1
 19e:	81 2b       	or	r24, r17
 1a0:	84 60       	ori	r24, 0x04	; 4
 1a2:	8c 83       	std	Y+4, r24	; 0x04
 1a4:	8b 7f       	andi	r24, 0xFB	; 251
 1a6:	8d 83       	std	Y+5, r24	; 0x05
 1a8:	45 e0       	ldi	r20, 0x05	; 5
 1aa:	be 01       	movw	r22, r28
 1ac:	6f 5f       	subi	r22, 0xFF	; 255
 1ae:	7f 4f       	sbci	r23, 0xFF	; 255
 1b0:	87 e2       	ldi	r24, 0x27	; 39
 1b2:	0e 94 79 00 	call	0xf2	; 0xf2 <I2C_WRITESEQ>
 1b6:	10 fd       	sbrc	r17, 0
 1b8:	08 c0       	rjmp	.+16     	; 0x1ca <wr_lcd_mode+0x80>
 1ba:	03 30       	cpi	r16, 0x03	; 3
 1bc:	30 f4       	brcc	.+12     	; 0x1ca <wr_lcd_mode+0x80>
 1be:	e3 ef       	ldi	r30, 0xF3	; 243
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <wr_lcd_mode+0x78>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <wr_lcd_mode+0x7e>
 1c8:	00 00       	nop
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <lcd_gotoxy>:
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	d8 2f       	mov	r29, r24
 1e4:	c6 2f       	mov	r28, r22
 1e6:	e6 2f       	mov	r30, r22
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	e2 5e       	subi	r30, 0xE2	; 226
 1ec:	fe 4f       	sbci	r31, 0xFE	; 254
 1ee:	80 81       	ld	r24, Z
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	8d 0f       	add	r24, r29
 1f4:	0e 94 a5 00 	call	0x14a	; 0x14a <wr_lcd_mode>
 1f8:	8d ee       	ldi	r24, 0xED	; 237
 1fa:	92 e0       	ldi	r25, 0x02	; 2
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_gotoxy+0x1e>
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_gotoxy+0x24>
 202:	00 00       	nop
 204:	d0 93 8c 01 	sts	0x018C, r29	; 0x80018c <_lcd_x>
 208:	c0 93 8d 01 	sts	0x018D, r28	; 0x80018d <_lcd_y>
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <lcd_clrscr>:
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 a5 00 	call	0x14a	; 0x14a <wr_lcd_mode>
 21a:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <_lcd_y>
 21e:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <_lcd_x>
 222:	08 95       	ret

00000224 <lcd_putc>:
 224:	cf 93       	push	r28
 226:	c8 2f       	mov	r28, r24
 228:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <_lcd_x>
 22c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <_lcd_maxx>
 230:	98 17       	cp	r25, r24
 232:	18 f4       	brcc	.+6      	; 0x23a <lcd_putc+0x16>
 234:	ca 30       	cpi	r28, 0x0A	; 10
 236:	59 f4       	brne	.+22     	; 0x24e <lcd_putc+0x2a>
 238:	1a c0       	rjmp	.+52     	; 0x26e <lcd_putc+0x4a>
 23a:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <_lcd_y>
 23e:	6f 5f       	subi	r22, 0xFF	; 255
 240:	60 93 8d 01 	sts	0x018D, r22	; 0x80018d <_lcd_y>
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_gotoxy>
 24a:	ca 30       	cpi	r28, 0x0A	; 10
 24c:	c1 f0       	breq	.+48     	; 0x27e <lcd_putc+0x5a>
 24e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <_lcd_x>
 252:	8f 5f       	subi	r24, 0xFF	; 255
 254:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <_lcd_x>
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	8c 2f       	mov	r24, r28
 25c:	0e 94 a5 00 	call	0x14a	; 0x14a <wr_lcd_mode>
 260:	8d ee       	ldi	r24, 0xED	; 237
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_putc+0x40>
 268:	00 c0       	rjmp	.+0      	; 0x26a <lcd_putc+0x46>
 26a:	00 00       	nop
 26c:	08 c0       	rjmp	.+16     	; 0x27e <lcd_putc+0x5a>
 26e:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <_lcd_y>
 272:	6f 5f       	subi	r22, 0xFF	; 255
 274:	60 93 8d 01 	sts	0x018D, r22	; 0x80018d <_lcd_y>
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_gotoxy>
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <lcd_puts>:
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	ec 01       	movw	r28, r24
 288:	88 81       	ld	r24, Y
 28a:	88 23       	and	r24, r24
 28c:	31 f0       	breq	.+12     	; 0x29a <lcd_puts+0x18>
 28e:	21 96       	adiw	r28, 0x01	; 1
 290:	0e 94 12 01 	call	0x224	; 0x224 <lcd_putc>
 294:	89 91       	ld	r24, Y+
 296:	81 11       	cpse	r24, r1
 298:	fb cf       	rjmp	.-10     	; 0x290 <lcd_puts+0xe>
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <lcd_init>:

// initialize the LCD controller

void lcd_init(unsigned char command)

{
 2a0:	df 92       	push	r13
 2a2:	ef 92       	push	r14
 2a4:	ff 92       	push	r15
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <lcd_init+0x10>
 2b0:	00 d0       	rcall	.+0      	; 0x2b2 <lcd_init+0x12>
 2b2:	00 d0       	rcall	.+0      	; 0x2b4 <lcd_init+0x14>
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	d8 2e       	mov	r13, r24

    // High-Nibble von Byte 8 = Display Control:

    // 1DCB****  D: Disp on/off; C: Cursor on/off  B: blink on/off

    char init_sequenz[] = { 0x33, 0x32, 0x28, 0x0C, 0x06, 0x01 };
 2ba:	86 e0       	ldi	r24, 0x06	; 6
 2bc:	e8 e1       	ldi	r30, 0x18	; 24
 2be:	f1 e0       	ldi	r31, 0x01	; 1
 2c0:	de 01       	movw	r26, r28
 2c2:	11 96       	adiw	r26, 0x01	; 1
 2c4:	01 90       	ld	r0, Z+
 2c6:	0d 92       	st	X+, r0
 2c8:	8a 95       	dec	r24
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <lcd_init+0x24>

    _lcd_maxx = LCD_DISP_LENGTH;
 2cc:	84 e1       	ldi	r24, 0x14	; 20
 2ce:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <_lcd_maxx>

   // _base_y[2] = _base_y[0] + _lcd_maxx;

    //_base_y[3] = _base_y[1] + _lcd_maxx;

    I2C_INIT();
 2d2:	0e 94 b3 02 	call	0x566	; 0x566 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	8b e4       	ldi	r24, 0x4B	; 75
 2d8:	9d e1       	ldi	r25, 0x1D	; 29
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <lcd_init+0x3a>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <lcd_init+0x40>
 2e0:	00 00       	nop
 2e2:	8e 01       	movw	r16, r28
 2e4:	0f 5f       	subi	r16, 0xFF	; 255
 2e6:	1f 4f       	sbci	r17, 0xFF	; 255
 2e8:	7e 01       	movw	r14, r28
 2ea:	97 e0       	ldi	r25, 0x07	; 7
 2ec:	e9 0e       	add	r14, r25
 2ee:	f1 1c       	adc	r15, r1

    _delay_ms(30);               // 30 ms Delay nach power-up

    for (i = 0; i < sizeof(init_sequenz); i++) {

        wr_lcd_mode(init_sequenz[i], 0);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	f8 01       	movw	r30, r16
 2f4:	81 91       	ld	r24, Z+
 2f6:	8f 01       	movw	r16, r30
 2f8:	0e 94 a5 00 	call	0x14a	; 0x14a <wr_lcd_mode>
 2fc:	81 ee       	ldi	r24, 0xE1	; 225
 2fe:	94 e0       	ldi	r25, 0x04	; 4
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <lcd_init+0x60>
 304:	00 c0       	rjmp	.+0      	; 0x306 <lcd_init+0x66>
 306:	00 00       	nop

    I2C_INIT();

    _delay_ms(30);               // 30 ms Delay nach power-up

    for (i = 0; i < sizeof(init_sequenz); i++) {
 308:	0e 15       	cp	r16, r14
 30a:	1f 05       	cpc	r17, r15
 30c:	89 f7       	brne	.-30     	; 0x2f0 <lcd_init+0x50>

        _delay_ms(5);

    }

	wr_lcd_mode(command, 0);
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	8d 2d       	mov	r24, r13
 312:	0e 94 a5 00 	call	0x14a	; 0x14a <wr_lcd_mode>

}
 316:	26 96       	adiw	r28, 0x06	; 6
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	ff 90       	pop	r15
 32c:	ef 90       	pop	r14
 32e:	df 90       	pop	r13
 330:	08 95       	ret

00000332 <lcd_backlight>:

void lcd_backlight(char on)

{

    wr_lcd_mode(on, 8);
 332:	68 e0       	ldi	r22, 0x08	; 8
 334:	0e 94 a5 00 	call	0x14a	; 0x14a <wr_lcd_mode>
 338:	08 95       	ret

0000033a <main>:
extern volatile uint8_t signal;



int main(void) {
	rotaryInit();
 33a:	0e 94 76 02 	call	0x4ec	; 0x4ec <rotaryInit>
	aQuiescent = ROTARY_PIN & (1<<ROTARY_A);
 33e:	86 b1       	in	r24, 0x06	; 6
 340:	81 70       	andi	r24, 0x01	; 1
 342:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <aQuiescent>
	uiInit();
 346:	0e 94 8b 03 	call	0x716	; 0x716 <uiInit>
    while (1) {
		setRotaryStatus();
 34a:	0e 94 93 02 	call	0x526	; 0x526 <setRotaryStatus>
		if (setVal) {
 34e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <setVal>
 352:	88 23       	and	r24, r24
 354:	09 f4       	brne	.+2      	; 0x358 <main+0x1e>
 356:	b5 c0       	rjmp	.+362    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			switch(mode) {
 358:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <mode>
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	f1 f0       	breq	.+60     	; 0x39c <main+0x62>
 360:	30 f0       	brcs	.+12     	; 0x36e <main+0x34>
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	c9 f1       	breq	.+114    	; 0x3d8 <main+0x9e>
 366:	83 30       	cpi	r24, 0x03	; 3
 368:	09 f4       	brne	.+2      	; 0x36c <main+0x32>
 36a:	81 c0       	rjmp	.+258    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 36c:	b7 c0       	rjmp	.+366    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
				case MODE_SIGNAL:
					if (rotation == CLOCKWISE)
 36e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	39 f4       	brne	.+14     	; 0x384 <main+0x4a>
						signal = (signal+1)&3;
 376:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <signal>
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	83 70       	andi	r24, 0x03	; 3
 37e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <signal>
 382:	ac c0       	rjmp	.+344    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
					else if (rotation == COUNTERCLOCKWISE)
 384:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 388:	82 30       	cpi	r24, 0x02	; 2
 38a:	09 f0       	breq	.+2      	; 0x38e <main+0x54>
 38c:	a7 c0       	rjmp	.+334    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
						signal = (signal-1)&3;
 38e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <signal>
 392:	81 50       	subi	r24, 0x01	; 1
 394:	83 70       	andi	r24, 0x03	; 3
 396:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <signal>
 39a:	a0 c0       	rjmp	.+320    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
					break;
				case MODE_VOLTAGE:
					if ((rotation == CLOCKWISE) && (voltage < V_MAX)) {
 39c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	51 f4       	brne	.+20     	; 0x3b8 <main+0x7e>
 3a4:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <voltage>
 3a8:	84 31       	cpi	r24, 0x14	; 20
 3aa:	34 f4       	brge	.+12     	; 0x3b8 <main+0x7e>
						voltage++;
 3ac:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <voltage>
 3b0:	8f 5f       	subi	r24, 0xFF	; 255
 3b2:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <voltage>
 3b6:	92 c0       	rjmp	.+292    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
					}
					else if ((rotation == COUNTERCLOCKWISE) && (voltage > V_MIN)) {
 3b8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 3bc:	82 30       	cpi	r24, 0x02	; 2
 3be:	09 f0       	breq	.+2      	; 0x3c2 <main+0x88>
 3c0:	8d c0       	rjmp	.+282    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 3c2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <voltage>
 3c6:	8d 3e       	cpi	r24, 0xED	; 237
 3c8:	0c f4       	brge	.+2      	; 0x3cc <main+0x92>
 3ca:	88 c0       	rjmp	.+272    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
						voltage--;
 3cc:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <voltage>
 3d0:	81 50       	subi	r24, 0x01	; 1
 3d2:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <voltage>
 3d6:	82 c0       	rjmp	.+260    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
					}
					break;
				case MODE_FREQUENCY:
					if ((rotation == CLOCKWISE) && (frequency < FREQ_MAX))
 3d8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	09 f5       	brne	.+66     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3e0:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <frequency>
 3e4:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <frequency+0x1>
 3e8:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <frequency+0x2>
 3ec:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <frequency+0x3>
 3f0:	80 34       	cpi	r24, 0x40	; 64
 3f2:	92 44       	sbci	r25, 0x42	; 66
 3f4:	af 40       	sbci	r26, 0x0F	; 15
 3f6:	b1 05       	cpc	r27, r1
 3f8:	a0 f4       	brcc	.+40     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
						frequency++;
 3fa:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <frequency>
 3fe:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <frequency+0x1>
 402:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <frequency+0x2>
 406:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <frequency+0x3>
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	a1 1d       	adc	r26, r1
 40e:	b1 1d       	adc	r27, r1
 410:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <frequency>
 414:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <frequency+0x1>
 418:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <frequency+0x2>
 41c:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <frequency+0x3>
 420:	5d c0       	rjmp	.+186    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
					else if ((rotation == COUNTERCLOCKWISE) && (frequency > FREQ_MIN))
 422:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 426:	82 30       	cpi	r24, 0x02	; 2
 428:	09 f0       	breq	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	58 c0       	rjmp	.+176    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 42c:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <frequency>
 430:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <frequency+0x1>
 434:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <frequency+0x2>
 438:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <frequency+0x3>
 43c:	02 97       	sbiw	r24, 0x02	; 2
 43e:	a1 05       	cpc	r26, r1
 440:	b1 05       	cpc	r27, r1
 442:	08 f4       	brcc	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 444:	4b c0       	rjmp	.+150    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
						frequency--;
 446:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <frequency>
 44a:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <frequency+0x1>
 44e:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <frequency+0x2>
 452:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <frequency+0x3>
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	a1 09       	sbc	r26, r1
 45a:	b1 09       	sbc	r27, r1
 45c:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <frequency>
 460:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <frequency+0x1>
 464:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <frequency+0x2>
 468:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <frequency+0x3>
 46c:	37 c0       	rjmp	.+110    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
					break;
				case MODE_PHASE:
					if ((rotation == CLOCKWISE) && (phase < PHASE_MAX))
 46e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	89 f4       	brne	.+34     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 476:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <phase>
 47a:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <phase+0x1>
 47e:	84 3b       	cpi	r24, 0xB4	; 180
 480:	91 05       	cpc	r25, r1
 482:	54 f4       	brge	.+20     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
						phase++;
 484:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <phase>
 488:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <phase+0x1>
 48c:	01 96       	adiw	r24, 0x01	; 1
 48e:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <phase+0x1>
 492:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <phase>
 496:	22 c0       	rjmp	.+68     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
					else if ((rotation == COUNTERCLOCKWISE) && (phase > PHASE_MIN))
 498:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 49c:	82 30       	cpi	r24, 0x02	; 2
 49e:	f1 f4       	brne	.+60     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4a0:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <phase>
 4a4:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <phase+0x1>
 4a8:	8d 34       	cpi	r24, 0x4D	; 77
 4aa:	9f 4f       	sbci	r25, 0xFF	; 255
 4ac:	bc f0       	brlt	.+46     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
						phase--;
 4ae:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <phase>
 4b2:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <phase+0x1>
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <phase+0x1>
 4bc:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <phase>
 4c0:	0d c0       	rjmp	.+26     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
					break;
			}
		}
		else {
			if (rotation == CLOCKWISE)
 4c2:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 4c6:	81 30       	cpi	r24, 0x01	; 1
 4c8:	19 f4       	brne	.+6      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
				getNextMode();
 4ca:	0e 94 7d 02 	call	0x4fa	; 0x4fa <getNextMode>
 4ce:	06 c0       	rjmp	.+12     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
			else if (rotation == COUNTERCLOCKWISE)
 4d0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 4d4:	82 30       	cpi	r24, 0x02	; 2
 4d6:	11 f4       	brne	.+4      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
				getPreviousMode();
 4d8:	0e 94 88 02 	call	0x510	; 0x510 <getPreviousMode>
		}
		// display mode and value with units
		if (rotation != NO_ROTATION)
 4dc:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 4e0:	88 23       	and	r24, r24
 4e2:	09 f4       	brne	.+2      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e4:	32 cf       	rjmp	.-412    	; 0x34a <main+0x10>
			displayRefresh();
 4e6:	0e 94 0d 03 	call	0x61a	; 0x61a <displayRefresh>
 4ea:	2f cf       	rjmp	.-418    	; 0x34a <main+0x10>

000004ec <rotaryInit>:
volatile uint8_t aQuiescent = 0;
volatile uint8_t aState = 0;
volatile uint8_t rotation = 0;

void rotaryInit(void) {
	ROTARY_DDR &= ~((1<<ROTARY_A) | (1<<ROTARY_B) | (1<<ROTARY_BUTTON)); // encoder pins and button set as input
 4ec:	87 b1       	in	r24, 0x07	; 7
 4ee:	88 7f       	andi	r24, 0xF8	; 248
 4f0:	87 b9       	out	0x07, r24	; 7
	ROTARY_PORT |= (1<<ROTARY_A) | (1<<ROTARY_B); // set pull-up resistors on encoder pins.
 4f2:	88 b1       	in	r24, 0x08	; 8
 4f4:	83 60       	ori	r24, 0x03	; 3
 4f6:	88 b9       	out	0x08, r24	; 8
 4f8:	08 95       	ret

000004fa <getNextMode>:
}

void getNextMode(void) {
	modeLast = mode;
 4fa:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <mode>
 4fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <modeLast>
	mode = (mode+1)&3;
 502:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <mode>
 506:	8f 5f       	subi	r24, 0xFF	; 255
 508:	83 70       	andi	r24, 0x03	; 3
 50a:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <mode>
 50e:	08 95       	ret

00000510 <getPreviousMode>:
}

void getPreviousMode(void) {
	modeLast = mode;
 510:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <mode>
 514:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <modeLast>
	mode = (mode-1)&3;
 518:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <mode>
 51c:	81 50       	subi	r24, 0x01	; 1
 51e:	83 70       	andi	r24, 0x03	; 3
 520:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <mode>
 524:	08 95       	ret

00000526 <setRotaryStatus>:
}

void setRotaryStatus(void) {
	aState = ROTARY_PIN & (1<<ROTARY_A);
 526:	86 b1       	in	r24, 0x06	; 6
 528:	81 70       	andi	r24, 0x01	; 1
 52a:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <aState>
	rotation = NO_ROTATION;
 52e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
	if (aState != aQuiescent)
 532:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <aState>
 536:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <aQuiescent>
 53a:	98 17       	cp	r25, r24
 53c:	59 f0       	breq	.+22     	; 0x554 <setRotaryStatus+0x2e>
		rotation = (ROTARY_PIN & (1<<ROTARY_B)) != aState ? COUNTERCLOCKWISE : CLOCKWISE;
 53e:	86 b1       	in	r24, 0x06	; 6
 540:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <aState>
 544:	82 70       	andi	r24, 0x02	; 2
 546:	89 13       	cpse	r24, r25
 548:	02 c0       	rjmp	.+4      	; 0x54e <setRotaryStatus+0x28>
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	01 c0       	rjmp	.+2      	; 0x550 <setRotaryStatus+0x2a>
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
	if (ROTARY_PIN & (1<<ROTARY_BUTTON))
 554:	32 9b       	sbis	0x06, 2	; 6
 556:	06 c0       	rjmp	.+12     	; 0x564 <setRotaryStatus+0x3e>
		setVal ^= SET_VAL_FLAG;
 558:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <setVal>
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	89 27       	eor	r24, r25
 560:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <setVal>
 564:	08 95       	ret

00000566 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 566:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 56a:	88 e4       	ldi	r24, 0x48	; 72
 56c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 570:	08 95       	ret

00000572 <i2c_start>:
 572:	94 ea       	ldi	r25, 0xA4	; 164
 574:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 578:	ec ed       	ldi	r30, 0xDC	; 220
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	90 81       	ld	r25, Z
 57e:	99 23       	and	r25, r25
 580:	ec f7       	brge	.-6      	; 0x57c <i2c_start+0xa>
 582:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 586:	98 7f       	andi	r25, 0xF8	; 248
 588:	98 30       	cpi	r25, 0x08	; 8
 58a:	11 f0       	breq	.+4      	; 0x590 <i2c_start+0x1e>
 58c:	90 31       	cpi	r25, 0x10	; 16
 58e:	a1 f4       	brne	.+40     	; 0x5b8 <i2c_start+0x46>
 590:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 594:	84 e8       	ldi	r24, 0x84	; 132
 596:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 59a:	ec ed       	ldi	r30, 0xDC	; 220
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	88 23       	and	r24, r24
 5a2:	ec f7       	brge	.-6      	; 0x59e <i2c_start+0x2c>
 5a4:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 5a8:	98 7f       	andi	r25, 0xF8	; 248
 5aa:	98 31       	cpi	r25, 0x18	; 24
 5ac:	39 f0       	breq	.+14     	; 0x5bc <i2c_start+0x4a>
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 34       	cpi	r25, 0x40	; 64
 5b2:	29 f4       	brne	.+10     	; 0x5be <i2c_start+0x4c>
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	08 95       	ret
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	08 95       	ret
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	08 95       	ret

000005c0 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 5c0:	84 e9       	ldi	r24, 0x94	; 148
 5c2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
	
	// wait until stop condition is executed and bus released
	while(TWCR1 & (1<<TWSTO));
 5c6:	ec ed       	ldi	r30, 0xDC	; 220
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	84 fd       	sbrc	r24, 4
 5ce:	fd cf       	rjmp	.-6      	; 0x5ca <i2c_stop+0xa>

}/* i2c_stop */
 5d0:	08 95       	ret

000005d2 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR1 = data;
 5d2:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	TWCR1 = (1<<TWINT) | (1<<TWEN);
 5d6:	84 e8       	ldi	r24, 0x84	; 132
 5d8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>

	// wait until transmission completed
	while(!(TWCR1 & (1<<TWINT)));
 5dc:	ec ed       	ldi	r30, 0xDC	; 220
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	88 23       	and	r24, r24
 5e4:	ec f7       	brge	.-6      	; 0x5e0 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TWSR1 & 0xF8;
 5e6:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
 5ea:	98 7f       	andi	r25, 0xF8	; 248
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	98 32       	cpi	r25, 0x28	; 40
 5f0:	09 f4       	brne	.+2      	; 0x5f4 <i2c_write+0x22>
 5f2:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 5f4:	08 95       	ret

000005f6 <clearScreen>:
	for (uint8_t i = x1; i < x2; i++) {
		lcd_gotoxy(i,y);
		lcd_puts(" ");
	}
	lcd_gotoxy(x1,y);
}
 5f6:	0e 94 09 01 	call	0x212	; 0x212 <lcd_clrscr>
 5fa:	8f e3       	ldi	r24, 0x3F	; 63
 5fc:	9c e9       	ldi	r25, 0x9C	; 156
 5fe:	01 97       	sbiw	r24, 0x01	; 1
 600:	f1 f7       	brne	.-4      	; 0x5fe <clearScreen+0x8>
 602:	00 c0       	rjmp	.+0      	; 0x604 <clearScreen+0xe>
 604:	00 00       	nop
 606:	08 95       	ret

00000608 <clearLine>:
 608:	68 2f       	mov	r22, r24
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_gotoxy>
 610:	82 e2       	ldi	r24, 0x22	; 34
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	0e 94 41 01 	call	0x282	; 0x282 <lcd_puts>
 618:	08 95       	ret

0000061a <displayRefresh>:

void displayRefresh(void) {
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
 622:	2a 97       	sbiw	r28, 0x0a	; 10
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	f8 94       	cli
 628:	de bf       	out	0x3e, r29	; 62
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	cd bf       	out	0x3d, r28	; 61
	char val[10];
	if (mode != modeLast) {
 62e:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <mode>
 632:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <modeLast>
 636:	98 17       	cp	r25, r24
 638:	71 f0       	breq	.+28     	; 0x656 <displayRefresh+0x3c>
		clearScreen();
 63a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <clearScreen>
		lcd_puts(labels[mode]);
 63e:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <mode>
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	ee 0f       	add	r30, r30
 646:	ff 1f       	adc	r31, r31
 648:	e0 5f       	subi	r30, 0xF0	; 240
 64a:	fe 4f       	sbci	r31, 0xFE	; 254
 64c:	80 81       	ld	r24, Z
 64e:	91 81       	ldd	r25, Z+1	; 0x01
 650:	0e 94 41 01 	call	0x282	; 0x282 <lcd_puts>
 654:	03 c0       	rjmp	.+6      	; 0x65c <displayRefresh+0x42>
	}
	else
		clearLine(1);
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	0e 94 04 03 	call	0x608	; 0x608 <clearLine>
	lcd_gotoxy(0,1);
 65c:	61 e0       	ldi	r22, 0x01	; 1
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_gotoxy>
	if (mode == MODE_SIGNAL)
 664:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <mode>
 668:	81 11       	cpse	r24, r1
 66a:	0c c0       	rjmp	.+24     	; 0x684 <displayRefresh+0x6a>
		lcd_puts(signals[signal]);
 66c:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <signal>
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	ee 0f       	add	r30, r30
 674:	ff 1f       	adc	r31, r31
 676:	ee 5f       	subi	r30, 0xFE	; 254
 678:	fe 4f       	sbci	r31, 0xFE	; 254
 67a:	80 81       	ld	r24, Z
 67c:	91 81       	ldd	r25, Z+1	; 0x01
 67e:	0e 94 41 01 	call	0x282	; 0x282 <lcd_puts>
 682:	40 c0       	rjmp	.+128    	; 0x704 <displayRefresh+0xea>
	else {
		if (mode == MODE_VOLTAGE)
 684:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <mode>
 688:	81 30       	cpi	r24, 0x01	; 1
 68a:	61 f4       	brne	.+24     	; 0x6a4 <displayRefresh+0x8a>
			itoa(voltage,val,10);
 68c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <voltage>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 690:	4a e0       	ldi	r20, 0x0A	; 10
 692:	be 01       	movw	r22, r28
 694:	6f 5f       	subi	r22, 0xFF	; 255
 696:	7f 4f       	sbci	r23, 0xFF	; 255
 698:	08 2e       	mov	r0, r24
 69a:	00 0c       	add	r0, r0
 69c:	99 0b       	sbc	r25, r25
 69e:	0e 94 b1 03 	call	0x762	; 0x762 <__itoa_ncheck>
 6a2:	21 c0       	rjmp	.+66     	; 0x6e6 <displayRefresh+0xcc>
		else if (mode == MODE_FREQUENCY)
 6a4:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <mode>
 6a8:	82 30       	cpi	r24, 0x02	; 2
 6aa:	79 f4       	brne	.+30     	; 0x6ca <displayRefresh+0xb0>
			itoa(frequency,val,10);
 6ac:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <frequency>
 6b0:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <frequency+0x1>
 6b4:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <frequency+0x2>
 6b8:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <frequency+0x3>
 6bc:	4a e0       	ldi	r20, 0x0A	; 10
 6be:	be 01       	movw	r22, r28
 6c0:	6f 5f       	subi	r22, 0xFF	; 255
 6c2:	7f 4f       	sbci	r23, 0xFF	; 255
 6c4:	0e 94 b1 03 	call	0x762	; 0x762 <__itoa_ncheck>
 6c8:	0e c0       	rjmp	.+28     	; 0x6e6 <displayRefresh+0xcc>
		else if (mode == MODE_PHASE)
 6ca:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <mode>
 6ce:	83 30       	cpi	r24, 0x03	; 3
 6d0:	51 f4       	brne	.+20     	; 0x6e6 <displayRefresh+0xcc>
			itoa(phase,val,10);
 6d2:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <phase>
 6d6:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <phase+0x1>
 6da:	4a e0       	ldi	r20, 0x0A	; 10
 6dc:	be 01       	movw	r22, r28
 6de:	6f 5f       	subi	r22, 0xFF	; 255
 6e0:	7f 4f       	sbci	r23, 0xFF	; 255
 6e2:	0e 94 b1 03 	call	0x762	; 0x762 <__itoa_ncheck>
		lcd_puts(val);
 6e6:	ce 01       	movw	r24, r28
 6e8:	01 96       	adiw	r24, 0x01	; 1
 6ea:	0e 94 41 01 	call	0x282	; 0x282 <lcd_puts>
		lcd_puts(units[mode-1]);
 6ee:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <mode>
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	ee 0f       	add	r30, r30
 6f6:	ff 1f       	adc	r31, r31
 6f8:	e8 5f       	subi	r30, 0xF8	; 248
 6fa:	fe 4f       	sbci	r31, 0xFE	; 254
 6fc:	80 81       	ld	r24, Z
 6fe:	91 81       	ldd	r25, Z+1	; 0x01
 700:	0e 94 41 01 	call	0x282	; 0x282 <lcd_puts>
	}
	val[0] = '\0';
 704:	2a 96       	adiw	r28, 0x0a	; 10
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	f8 94       	cli
 70a:	de bf       	out	0x3e, r29	; 62
 70c:	0f be       	out	0x3f, r0	; 63
 70e:	cd bf       	out	0x3d, r28	; 61
 710:	df 91       	pop	r29
 712:	cf 91       	pop	r28
 714:	08 95       	ret

00000716 <uiInit>:

extern volatile uint8_t mode;
extern volatile uint8_t modeLast;

void uiInit(void) {
	rotaryInit();
 716:	0e 94 76 02 	call	0x4ec	; 0x4ec <rotaryInit>
	LCD_I2C_DDR &= ~((1<<LCD_I2C_SCL) | (1<<LCD_I2C_SDA));
 71a:	8d b1       	in	r24, 0x0d	; 13
 71c:	8c 7f       	andi	r24, 0xFC	; 252
 71e:	8d b9       	out	0x0d, r24	; 13
	LCD_I2C_PORT |= (1<<LCD_I2C_SCL) | (1<<LCD_I2C_SDA);
 720:	8e b1       	in	r24, 0x0e	; 14
 722:	83 60       	ori	r24, 0x03	; 3
 724:	8e b9       	out	0x0e, r24	; 14
	lcd_init(LCD_ON_DISPLAY);
 726:	82 e0       	ldi	r24, 0x02	; 2
 728:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_init>
	lcd_backlight(0);
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	0e 94 99 01 	call	0x332	; 0x332 <lcd_backlight>
 732:	2f ef       	ldi	r18, 0xFF	; 255
 734:	89 e6       	ldi	r24, 0x69	; 105
 736:	98 e1       	ldi	r25, 0x18	; 24
 738:	21 50       	subi	r18, 0x01	; 1
 73a:	80 40       	sbci	r24, 0x00	; 0
 73c:	90 40       	sbci	r25, 0x00	; 0
 73e:	e1 f7       	brne	.-8      	; 0x738 <uiInit+0x22>
 740:	00 c0       	rjmp	.+0      	; 0x742 <uiInit+0x2c>
 742:	00 00       	nop
	_delay_ms(500);
	lcd_backlight(1);
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	0e 94 99 01 	call	0x332	; 0x332 <lcd_backlight>
 74a:	2f ef       	ldi	r18, 0xFF	; 255
 74c:	89 e6       	ldi	r24, 0x69	; 105
 74e:	98 e1       	ldi	r25, 0x18	; 24
 750:	21 50       	subi	r18, 0x01	; 1
 752:	80 40       	sbci	r24, 0x00	; 0
 754:	90 40       	sbci	r25, 0x00	; 0
 756:	e1 f7       	brne	.-8      	; 0x750 <uiInit+0x3a>
 758:	00 c0       	rjmp	.+0      	; 0x75a <uiInit+0x44>
 75a:	00 00       	nop
	_delay_ms(500);
	displayRefresh();
 75c:	0e 94 0d 03 	call	0x61a	; 0x61a <displayRefresh>
 760:	08 95       	ret

00000762 <__itoa_ncheck>:
 762:	bb 27       	eor	r27, r27
 764:	4a 30       	cpi	r20, 0x0A	; 10
 766:	31 f4       	brne	.+12     	; 0x774 <__itoa_ncheck+0x12>
 768:	99 23       	and	r25, r25
 76a:	22 f4       	brpl	.+8      	; 0x774 <__itoa_ncheck+0x12>
 76c:	bd e2       	ldi	r27, 0x2D	; 45
 76e:	90 95       	com	r25
 770:	81 95       	neg	r24
 772:	9f 4f       	sbci	r25, 0xFF	; 255
 774:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__utoa_common>

00000778 <__utoa_ncheck>:
 778:	bb 27       	eor	r27, r27

0000077a <__utoa_common>:
 77a:	fb 01       	movw	r30, r22
 77c:	55 27       	eor	r21, r21
 77e:	aa 27       	eor	r26, r26
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	aa 1f       	adc	r26, r26
 786:	a4 17       	cp	r26, r20
 788:	10 f0       	brcs	.+4      	; 0x78e <__utoa_common+0x14>
 78a:	a4 1b       	sub	r26, r20
 78c:	83 95       	inc	r24
 78e:	50 51       	subi	r21, 0x10	; 16
 790:	b9 f7       	brne	.-18     	; 0x780 <__utoa_common+0x6>
 792:	a0 5d       	subi	r26, 0xD0	; 208
 794:	aa 33       	cpi	r26, 0x3A	; 58
 796:	08 f0       	brcs	.+2      	; 0x79a <__utoa_common+0x20>
 798:	a9 5d       	subi	r26, 0xD9	; 217
 79a:	a1 93       	st	Z+, r26
 79c:	00 97       	sbiw	r24, 0x00	; 0
 79e:	79 f7       	brne	.-34     	; 0x77e <__utoa_common+0x4>
 7a0:	b1 11       	cpse	r27, r1
 7a2:	b1 93       	st	Z+, r27
 7a4:	11 92       	st	Z+, r1
 7a6:	cb 01       	movw	r24, r22
 7a8:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <strrev>

000007ac <strrev>:
 7ac:	dc 01       	movw	r26, r24
 7ae:	fc 01       	movw	r30, r24
 7b0:	67 2f       	mov	r22, r23
 7b2:	71 91       	ld	r23, Z+
 7b4:	77 23       	and	r23, r23
 7b6:	e1 f7       	brne	.-8      	; 0x7b0 <strrev+0x4>
 7b8:	32 97       	sbiw	r30, 0x02	; 2
 7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <strrev+0x18>
 7bc:	7c 91       	ld	r23, X
 7be:	6d 93       	st	X+, r22
 7c0:	70 83       	st	Z, r23
 7c2:	62 91       	ld	r22, -Z
 7c4:	ae 17       	cp	r26, r30
 7c6:	bf 07       	cpc	r27, r31
 7c8:	c8 f3       	brcs	.-14     	; 0x7bc <strrev+0x10>
 7ca:	08 95       	ret

000007cc <_exit>:
 7cc:	f8 94       	cli

000007ce <__stop_program>:
 7ce:	ff cf       	rjmp	.-2      	; 0x7ce <__stop_program>
